<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello</title>
  
  <subtitle>开启新的学习之旅</subtitle>
  <link href="https://allennzhang.github.io/blogs/atom.xml" rel="self"/>
  
  <link href="https://allennzhang.github.io/blogs/"/>
  <updated>2022-09-02T09:56:09.408Z</updated>
  <id>https://allennzhang.github.io/blogs/</id>
  
  <author>
    <name>Allen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter基础-数据模型与Json序列化</title>
    <link href="https://allennzhang.github.io/blogs/2022/09/02/flutter-ji-chu-shu-ju-mo-xing-yu-json-xu-lie-hua/"/>
    <id>https://allennzhang.github.io/blogs/2022/09/02/flutter-ji-chu-shu-ju-mo-xing-yu-json-xu-lie-hua/</id>
    <published>2022-09-02T07:02:00.000Z</published>
    <updated>2022-09-02T09:56:09.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-flutter中如何进行json解析"><a href="#一-flutter中如何进行json解析" class="headerlink" title="一 flutter中如何进行json解析"></a>一 flutter中如何进行json解析</h3><h4 id="1-1-dart中的数据模型"><a href="#1-1-dart中的数据模型" class="headerlink" title="1.1 dart中的数据模型"></a>1.1 dart中的数据模型</h4><blockquote><p>所有变量引用的都是 对象，每个对象都是一个 类 的实例。数字、函数以及 null 都是对象。除去 null 以外（如果你开启了 空安全）, 所有的类都继承于 Object 类</p></blockquote><blockquote><p>特殊类型 dynamic 将检查延迟到运行时进行,dynamic 这个类型不仅接受所有对象，也允许所有 operations。在编译时任何成员对 dynamic 类型值访问是允许的，但在运行时可能会引发异常,更多参考<a href="https://dart.cn/guides/language/effective-dart/design#avoid-using-dynamic-unless-you-want-to-disable-static-checking">dart特殊类型：dynamic</a></p></blockquote><ul><li><p>Dart 语言支持下列内容：</p></li><li><p>Numbers (int, double)</p></li><li><p>Strings (String)</p></li><li><p>Booleans (bool)</p></li><li><p>Lists (也被称为 arrays)</p></li><li><p>Sets (Set)</p></li><li><p>Maps (Map)</p></li><li><p>Runes (常用于在 Characters API 中进行字符替换)</p></li><li><p>Symbols (Symbol)</p></li><li><p>The value null (Null)</p></li></ul><h4 id="1-2-dart中json解析"><a href="#1-2-dart中json解析" class="headerlink" title="1.2 dart中json解析"></a>1.2 dart中json解析</h4><ul><li>dart:convert 中使用内置的JSON解码器json.decode()来实现json解析，json.encode(object)来实现将对象转换为jsonString</li><li>json.decode()仅返回一个Map&lt;String, dynamic&gt; 或者List<dynamic>类型，这意味着直到运行时我们才知道值的类型。通过这种方法，我们失去了大部分静态类型语言特性：类型安全、自动补全和最重要的编译时异常。<br>这样一来，我们的代码可能会变得非常容易出错。例如，当我们访问name或email字段时，我们输入的很快，导致字段名打错了。但由于这个 JSON 在 map 结构中，所以编译器不知道这个错误的字段名，所以编译时不会报错。<br>因此实际开发中，我们会显示定义data model,并且声明对象字段为具体的类型，如String,int,需要将原始数据转换为Object对象</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">//一个JSON格式的用户列表字符串</span><span class="token class-name">String</span> jsonStr<span class="token operator">=</span><span class="token string-literal"><span class="token string">'[&#123;"name":"Jack"&#125;,&#123;"name":"Rose"&#125;]'</span></span><span class="token punctuation">;</span>`<span class="token comment">//将JSON字符串转为Dart对象(此处是List)</span><span class="token class-name">List</span> items<span class="token operator">=</span>json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>jsonStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出第一个用户的姓名</span><span class="token function">print</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"name"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-如何手动实现数据模型与json之间的转换"><a href="#1-3-如何手动实现数据模型与json之间的转换" class="headerlink" title="1.3 如何手动实现数据模型与json之间的转换"></a>1.3 如何手动实现数据模型与json之间的转换</h3><ul><li>声明实体类User</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">final</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>      <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> json<span class="token punctuation">)</span>   <span class="token punctuation">:</span> name <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'name'</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>   email <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'email'</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>     <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>     <span class="token string-literal"><span class="token string">'name'</span></span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>     <span class="token string-literal"><span class="token string">'email'</span></span><span class="token punctuation">:</span> email<span class="token punctuation">,</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>json 序列化为User对象</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Map</span> userMap <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>userMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>json反序列化</li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token comment">// json.encode 内部会自动调User.toJson()方法</span><span class="token class-name">String</span> json <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二-使用-json-serializable库实现json解析"><a href="#二-使用-json-serializable库实现json解析" class="headerlink" title="二 使用 json_serializable库实现json解析"></a>二 使用 json_serializable库实现json解析</h3><blockquote><p>上述例子中，我们通过手动声明data model,并实现字段映射，实现json解析，但是实际项目中，不可能为每个类都进行手动解析，这样成本太高，同时可能因手误导致的错误，在运行时才能发现。<br>因此我们将使用pub.dev 提供的<a href="https://pub.dev/packages/json_serializable">json_serializable</a>来辅助实现json解析</p></blockquote><h4 id="2-1-json-serializable集成与基础配置"><a href="#2-1-json-serializable集成与基础配置" class="headerlink" title="2.1 json_serializable集成与基础配置"></a>2.1 json_serializable集成与基础配置</h4><ul><li>pubspec.yaml 依赖配置<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">dependencies<span class="token punctuation">:</span>  <span class="token comment">//1. json</span>  json_annotation<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">4.6</span><span class="token number">.0</span>dev_dependencies<span class="token punctuation">:</span>  <span class="token comment">// 2. json</span>  build_runner<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">2.2</span><span class="token number">.0</span>  json_serializable<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">6.3</span><span class="token number">.1</span>     options<span class="token punctuation">:</span>        <span class="token comment">// 支持嵌套对象解析</span>        explicit_to_json<span class="token punctuation">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-2-声明实体类及基础配置"><a href="#2-2-声明实体类及基础配置" class="headerlink" title="2.2 声明实体类及基础配置"></a>2.2 声明实体类及基础配置</h4><ul><li><p>声明实体类Person 并注解@JsonSerializable,因为本例中Person的成员变量address也是对象，对嵌套对象解析，需要声明explicitToJson: true</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span>explicitToJson<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置序列化过程映射字段名</span>  <span class="token metadata function">@JsonKey</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"real_name"</span></span><span class="token punctuation">)</span>  <span class="token class-name">String</span> name<span class="token punctuation">;</span>  int age<span class="token punctuation">;</span>    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">factory</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _$<span class="token class-name">PersonFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _$<span class="token class-name">PersonToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>手动导入 part ‘example.g.dart’; 并添加fromJson(),toJson()方法</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">part</span> <span class="token string-literal"><span class="token string">'person.g.dart'</span></span><span class="token punctuation">;</span><span class="token metadata function">@JsonSerializable</span><span class="token punctuation">(</span>explicitToJson<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>required <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> required <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>   int age<span class="token punctuation">;</span>    <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token comment">// 1.</span>   <span class="token keyword">factory</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> json<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _$<span class="token class-name">PersonFromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2.</span>   <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> <span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _$<span class="token class-name">PersonToJson</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-3-运行脚本，生成实体类json转换逻辑具体实现"><a href="#2-3-运行脚本，生成实体类json转换逻辑具体实现" class="headerlink" title="2.3 运行脚本，生成实体类json转换逻辑具体实现"></a>2.3 运行脚本，生成实体类json转换逻辑具体实现</h4><ul><li><p>运行命令： flutter packages pub run build_runner build，或者 dart run build_runner build ，该命令会生成person.g.dart</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">flutter packages pub run build_runner build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>person.g.dart 生成内容如下：</p><img src="/blogs/images/flutter_json_person.g.jpg" class="[person.g.dart]" title="[person.g.dart]"></li></ul><h3 id="三-使用-FlutterJsonBeanFactory插件实现json解析"><a href="#三-使用-FlutterJsonBeanFactory插件实现json解析" class="headerlink" title="三 使用 FlutterJsonBeanFactory插件实现json解析"></a>三 使用 FlutterJsonBeanFactory插件实现json解析</h3><blockquote><p><a href="https://github.com/fluttercandies/FlutterJsonBeanFactory">FlutterJsonBeanFactory简介</a></p></blockquote><img src="/blogs/images/flutter_beantojson_factory.gif" class="[person.g.dart]" title="[person.g.dart]"><h4 id="3-1-插件安装与基础配置"><a href="#3-1-插件安装与基础配置" class="headerlink" title="3.1 插件安装与基础配置"></a>3.1 插件安装与基础配置</h4><ul><li>安装：Settings&#x2F;Preferences &gt; Plugins &gt; Marketplace &gt; Search for “FlutterJsonBeanFactory” &gt; Install Plugin</li><li>基础配置：AndroidStudio &gt; Preference &gt; Tools &gt; FlutterJsonBeanFactory &gt; model suffix 可以修改data model 后缀，默认为Entity</li></ul><h4 id="3-2-生成新的实体类"><a href="#3-2-生成新的实体类" class="headerlink" title="3.2 生成新的实体类"></a>3.2 生成新的实体类</h4><ul><li><p>lib &gt; package &gt; 右键 &gt; New &gt; JsonToDartBeanAction</p><img src="/blogs/images/flutter_json_bean_factory_new.jpg" class="[JsonToDartBeanAction]" title="[JsonToDartBeanAction]"></li><li><p>声明data model 名称，填充json内容</p><img src="/blogs/images/flutter_json_bean_make.jpg" class="[JsonToDartBeanAction Make]" title="[JsonToDartBeanAction Make]"></li><li><p>插件生成实体类执行结果：</p><img src="/blogs/images/flutter_json_bean_data_weather.jpg" class="[JsonToDartBeanAction Make]" title="[JsonToDartBeanAction Make]"></li></ul><h4 id="3-3-FlutterJsonBeanFactory插件浅析"><a href="#3-3-FlutterJsonBeanFactory插件浅析" class="headerlink" title="3.3 FlutterJsonBeanFactory插件浅析"></a>3.3 FlutterJsonBeanFactory插件浅析</h4><ul><li><p>经过前两步，已经生成实体类及具体json解析实现，如果此时修改了类，使用Alt+J 即可重新同步最新修改结果</p></li><li><p>generated&#x2F;json&#x2F;base 下包含了两个核心文件：json_field.dart，json_convert_content.dart</p></li><li><p>json_field.dart 解析：文件声明了两个类，JsonSerializable用于实体类注解，被标记的类会参与插件解析，JSONField用于实体类字段注解，用于设置json字段-实体类字段映射，<br>及设置是否序列化与反序列，类似Java中transient关键字作用</p></li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">JsonSerializable</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token class-name">JsonSerializable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token keyword">class</span> <span class="token class-name">JSONField</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//Specify the parse field name</span>  <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token operator">?</span> name<span class="token punctuation">;</span>    <span class="token comment">//Whether to participate in toJson</span>  <span class="token keyword">final</span> bool<span class="token operator">?</span> serialize<span class="token punctuation">;</span>    <span class="token comment">//Whether to participate in fromMap</span>  <span class="token keyword">final</span> bool<span class="token operator">?</span> deserialize<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">JSONField</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serialize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deserialize<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>json_convert_content.dart解析：<ol><li>首先插件会根据标记过@JsonSerializable的注解注册对应的实体类，</li><li>然后json解析时会根据实体类的fromJson(Map&lt;String,dynamic&gt;)方法来实例化对象，并逐一调用jsonConvert.convert<T>(json[‘key’])， 来实现每个实体类字段的解析和赋值，</li><li>convert<T>(dynamic) 会调用asT<T>(dynamic)</li><li>asT<T>(dynamic) 会依次判断 T.toString的类型是”int”,”String”,”double”,”Map”… 然后对dynamic as T 转成对应的具体类型，如果是已经注册的具体实体类类型，则转换为对应的实体类类型（处理json对象嵌套对象的情况）</li><li>针对 List<dynamic>类型的json数据，通过fromJsonAsT<M>(dynamic json)进行_getListChildType<M>(json.map((e) &#x3D;&gt; e as Map&lt;String, dynamic&gt;).toList()) ,做map转换一次对每个子内容进行fromJson()反序列化为具体的实体类</li></ol></li></ul><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"> <span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:flutter/material.dart'</span></span> <span class="token keyword">show</span> debugPrint<span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:github_client_app/models/address.dart'</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:github_client_app/models/person.dart'</span></span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'package:github_client_app/models/weather.dart'</span></span><span class="token punctuation">;</span>  <span class="token class-name">JsonConvert</span> jsonConvert <span class="token operator">=</span> <span class="token class-name">JsonConvert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token class-name">JsonConvertFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token class-name">T</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">JsonConvert</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">JsonConvertFunction</span><span class="token punctuation">></span></span> _convertFuncMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>     <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Address</span><span class="token punctuation">.</span>fromJson<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>fromJson<span class="token punctuation">,</span>     <span class="token punctuation">(</span><span class="token class-name">Weather</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name">Weather</span><span class="token punctuation">.</span>fromJson<span class="token punctuation">,</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token class-name">T</span><span class="token operator">?</span> convert<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> asT<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token operator">?</span> convertList<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> asT<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'asT&lt;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token class-name">T</span></span></span><span class="token string">> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">stackTrace</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token operator">?</span> convertListNotNull<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">as</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> asT<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'asT&lt;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token class-name">T</span></span></span><span class="token string">> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">stackTrace</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">T</span><span class="token operator">?</span> asT<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">is</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">final</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> valueS <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"String"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> valueS <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"int"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">final</span> int<span class="token operator">?</span> intValue <span class="token operator">=</span> int<span class="token punctuation">.</span><span class="token function">tryParse</span><span class="token punctuation">(</span>valueS<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>intValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> double<span class="token punctuation">.</span><span class="token function">tryParse</span><span class="token punctuation">(</span>valueS<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> intValue <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"double"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> double<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>valueS<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"DateTime"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>valueS<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"bool"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>valueS <span class="token operator">==</span> <span class="token string-literal"><span class="token string">'0'</span></span> <span class="token operator">||</span> valueS <span class="token operator">==</span> <span class="token string-literal"><span class="token string">'1'</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>valueS <span class="token operator">==</span> <span class="token string-literal"><span class="token string">'1'</span></span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>valueS <span class="token operator">==</span> <span class="token string-literal"><span class="token string">'true'</span></span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"Map"</span></span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Map&lt;"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> value <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>_convertFuncMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> _convertFuncMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> <span class="token class-name">UnimplementedError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">type</span></span><span class="token string"> unimplemented'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> stackTrace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'asT&lt;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression"><span class="token class-name">T</span></span></span><span class="token string">> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">e</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">stackTrace</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//list is returned by type</span><span class="token keyword">static</span> <span class="token class-name">M</span><span class="token operator">?</span> _getListChildType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span><span class="token punctuation">></span></span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">is</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> data<span class="token punctuation">.</span>map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Address</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">Address</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">M</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">is</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> data<span class="token punctuation">.</span>map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">M</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">is</span> <span class="token class-name">M</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> data<span class="token punctuation">.</span>map<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token class-name">Weather</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">M</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">debugPrint</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression"><span class="token class-name">M</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string"> not found"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token class-name">M</span><span class="token operator">?</span> fromJsonAsT<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> json<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>json <span class="token operator">is</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> _getListChildType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> e <span class="token operator">as</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> jsonConvert<span class="token punctuation">.</span>asT<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">M</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-flutter中如何进行json解析&quot;&gt;&lt;a href=&quot;#一-flutter中如何进行json解析&quot; class=&quot;headerlink&quot; title=&quot;一 flutter中如何进行json解析&quot;&gt;&lt;/a&gt;一 flutter中如何进行json解析&lt;/h3&gt;&lt;</summary>
      
    
    
    
    <category term="Flutter" scheme="https://allennzhang.github.io/blogs/categories/Flutter/"/>
    
    
    <category term="flutter" scheme="https://allennzhang.github.io/blogs/tags/flutter/"/>
    
    <category term="json" scheme="https://allennzhang.github.io/blogs/tags/json/"/>
    
    <category term="序列化" scheme="https://allennzhang.github.io/blogs/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Flutter基础-网络请求及封装</title>
    <link href="https://allennzhang.github.io/blogs/2022/09/01/flutter-ji-chu-wang-luo-qing-qiu-ji-feng-zhuang/"/>
    <id>https://allennzhang.github.io/blogs/2022/09/01/flutter-ji-chu-wang-luo-qing-qiu-ji-feng-zhuang/</id>
    <published>2022-09-01T03:02:00.000Z</published>
    <updated>2022-09-05T03:28:33.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-使用HttpClient网络请求"><a href="#一-使用HttpClient网络请求" class="headerlink" title="一 使用HttpClient网络请求"></a>一 使用HttpClient网络请求</h3><blockquote><p>dart:io 是系统提供的一套针对非Web应用程序，进行文件读取，套接字，HTTP和其他I&#x2F;O支持的API。更多介绍详见<a href="https://api.dart.cn/stable/2.18.0/dart-io/dart-io-library.html">dart:io库</a></p></blockquote><blockquote><p>dart:io 中提供了HttpServer和HttpClient两个核心类分别针对服务端开发和客户端请求开发，这些类提供了低级的HTTP功能，实际项目开发中官方提供了更为友好的类库,如：pub.dev上的<a href="https://pub.dev/packages/http">http</a> ,及flutterchina提供的 <a href="https://pub.dev/packages/dio">dio</a></p></blockquote><h4 id="1-1-使用HttpClient网络请求"><a href="#1-1-使用HttpClient网络请求" class="headerlink" title="1.1 使用HttpClient网络请求"></a>1.1 使用HttpClient网络请求</h4><ul><li><p>step1 ： 创建HttpClient</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>step2 ： 打开HTTP连接</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">HttpClientRequest</span> request <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>step3 ： 等待服务器连接和响应</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">HttpClientResponse</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>step4 ： 读取服务器响应内容</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">int statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">String</span> content <span class="token operator">=</span>  <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>step5 ： 断开连接</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>完整的调用链：</p><blockquote><p>HttpClient.getUrl() —-&gt; _HttpClient_openUrl() —-&gt;_HttpClient_getConnection() —-&gt;_HttpClient_getConnectionTarget().connect()—-&gt;Socket.startConnect() —&gt; establish _HttpClientConnection()</p></blockquote></li></ul><h4 id="1-2-HttpClient网络请求封装"><a href="#1-2-HttpClient网络请求封装" class="headerlink" title="1.2 HttpClient网络请求封装"></a>1.2 HttpClient网络请求封装</h4><ul><li>完整示例<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:convert'</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">'dart:io'</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DartHttp</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">DartHttp</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">DartHttp</span> _instance <span class="token operator">=</span> <span class="token class-name">DartHttp</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 工厂+静态变量 实现单例</span>   <span class="token keyword">factory</span> <span class="token class-name">DartHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> _instance<span class="token punctuation">;</span>   <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestUrl<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> query<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 1.创建一个HttpClient</span>     <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 设置连接超时时间</span>     httpClient<span class="token punctuation">.</span>connectionTimeout <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 2. 设置请求地址，参数</span>     <span class="token class-name">Uri</span> org <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span>scheme<span class="token punctuation">:</span> org<span class="token punctuation">.</span>scheme<span class="token punctuation">,</span>host<span class="token punctuation">:</span> org<span class="token punctuation">.</span>host<span class="token punctuation">,</span>path<span class="token punctuation">:</span>org<span class="token punctuation">.</span>path<span class="token punctuation">,</span>queryParameters<span class="token punctuation">:</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 2. 打开Http连接</span>     <span class="token class-name">HttpClientRequest</span> request <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 3. 设置请求header</span>     request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"user-agent"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Chrome/104.0.0.0"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 4. 等待连接服务器</span>     <span class="token class-name">HttpClientResponse</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 5. 读取响应内容</span>     <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">;</span>     int statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span>  <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"http status code: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">statusCode</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 6. 断开连接</span>     httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> content<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>  <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestUrl<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> query<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1.创建一个HttpClient</span>      <span class="token class-name">HttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 设置连接超时时间</span>      httpClient<span class="token punctuation">.</span>connectionTimeout <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2. 设置请求地址，参数</span>      <span class="token class-name">Uri</span> org <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>requestUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Uri</span> uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">(</span>scheme<span class="token punctuation">:</span> org<span class="token punctuation">.</span>scheme<span class="token punctuation">,</span>host<span class="token punctuation">:</span> org<span class="token punctuation">.</span>host<span class="token punctuation">,</span>path<span class="token punctuation">:</span>org<span class="token punctuation">.</span>path<span class="token punctuation">,</span>queryParameters<span class="token punctuation">:</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2. 打开Http连接</span>      <span class="token class-name">HttpClientRequest</span> request <span class="token operator">=</span> <span class="token keyword">await</span> httpClient<span class="token punctuation">.</span><span class="token function">postUrl</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3. 设置请求header</span>      request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"user-agent"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Chrome/104.0.0.0"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 4. 等待连接服务器</span>      <span class="token class-name">HttpClientResponse</span> response <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 5. 读取响应内容</span>      <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">;</span>      int statusCode <span class="token operator">=</span> response<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span> content <span class="token operator">=</span>  <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Utf8Decoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         content <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"http status code: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">statusCode</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 6. 断开连接</span>      httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> content<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二-dio网络库使用及封装"><a href="#二-dio网络库使用及封装" class="headerlink" title="二 dio网络库使用及封装"></a>二 dio网络库使用及封装</h3><blockquote><p>dio是一个强大的Dart Http请求库，支持Restful API、FormData、拦截器、请求取消、Cookie管理、文件上传&#x2F;下载、超时、自定义适配器等，更多信息详见<a href="https://github.com/flutterchina/dio/blob/master/README-ZH.md">dio中文文档</a></p></blockquote><h4 id="2-1-dio简介"><a href="#2-1-dio简介" class="headerlink" title="2.1 dio简介"></a>2.1 dio简介</h4><ul><li>dio是一款强大的dart网络库，提供了丰富可扩展的插件，及网络请求拦截器，供开发者使用，如：网络请求日志打印，网络缓存，cookie管理，如果对okhttp熟悉和了解的开发者来说，你一定不会感到陌生。同时dio同时适配器的方式，底层默认封装了系统的HttpClient,<br>方便开发者进行切换和定制底层网络库，灵活性比较强。</li></ul><h4 id="2-2-dio-集成"><a href="#2-2-dio-集成" class="headerlink" title="2.2 dio 集成"></a>2.2 dio 集成</h4><ul><li>pubspec.yaml 依赖配置<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">dependencies<span class="token punctuation">:</span>  <span class="token comment">// dio 网络库</span>  dio<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">4.0</span><span class="token number">.6</span>  <span class="token comment">// dio logger 可选</span>  pretty_dio_logger<span class="token punctuation">:</span> <span class="token operator">^</span><span class="token number">1.1</span><span class="token number">.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-3-dio-基础配置"><a href="#2-3-dio-基础配置" class="headerlink" title="2.3 dio 基础配置"></a>2.3 dio 基础配置</h4><ul><li><p>自定义DioConfig</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">DioConfig</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">DioConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>connectTimeOut<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token class-name">DioConfig</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  baseUrl<span class="token operator">=</span><span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>  connectTimeOut<span class="token operator">=</span><span class="token number">25000</span><span class="token punctuation">,</span> <span class="token comment">// Timeout in milliseconds</span>  headers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> baseUrl<span class="token punctuation">;</span>  <span class="token keyword">final</span> int connectTimeOut<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> headers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义dio全局管理类DioHttp,创建Dio单例</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">  <span class="token keyword">class</span> <span class="token class-name">DioHttp</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">DioHttp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">DioConfig</span> dioConfig <span class="token operator">=</span> _config<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        baseOptions <span class="token operator">=</span> <span class="token class-name">BaseOptions</span><span class="token punctuation">(</span>        baseUrl<span class="token punctuation">:</span> dioConfig<span class="token punctuation">.</span>baseUrl<span class="token punctuation">,</span>               <span class="token comment">// 设置baseUrl</span>        connectTimeout<span class="token punctuation">:</span> dioConfig<span class="token punctuation">.</span>connectTimeOut<span class="token punctuation">,</span> <span class="token comment">// 设置连接超时时间</span>        sendTimeout<span class="token punctuation">:</span>dioConfig<span class="token punctuation">.</span>connectTimeOut<span class="token punctuation">,</span>     <span class="token comment">// 设置发送数据超时时间</span>        receiveTimeout<span class="token punctuation">:</span> dioConfig<span class="token punctuation">.</span>connectTimeOut<span class="token punctuation">,</span> <span class="token comment">// 设置接受服务器数据超时时间</span>        headers<span class="token punctuation">:</span> dioConfig<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 设置公共HttpHeader</span>              _dio <span class="token operator">=</span> <span class="token class-name">Dio</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加自定义拦截器</span>        _dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CustomInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加请求日志拦截器</span>        _dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">PrettyDioLogger</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>responseHeader<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>responseBody<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     late <span class="token class-name">Dio</span> _dio<span class="token punctuation">;</span>     late <span class="token class-name">BaseOptions</span> baseOptions<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-4-封装常用的GET-POST请求"><a href="#2-4-封装常用的GET-POST请求" class="headerlink" title="2.4 封装常用的GET,POST请求"></a>2.4 封装常用的GET,POST请求</h4><ul><li>封装get，post代理方法<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token keyword">get</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> query<span class="token punctuation">,</span>   <span class="token comment">// get请求参数</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> headers<span class="token punctuation">,</span> <span class="token comment">// 请求header</span>  <span class="token class-name">ErrorHandler</span><span class="token operator">?</span> errorHandler<span class="token punctuation">,</span>   <span class="token comment">// 捕获异常处理的handler</span>  bool showLoading<span class="token operator">=</span><span class="token boolean">false</span>        <span class="token comment">// 是否显示loading</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span>  <span class="token function">_realRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"GET"</span></span><span class="token punctuation">,</span> query<span class="token punctuation">:</span>query<span class="token punctuation">,</span>headers<span class="token punctuation">:</span>headers<span class="token punctuation">,</span>errorHandler<span class="token punctuation">:</span> errorHandler<span class="token punctuation">,</span>showLoading<span class="token punctuation">:</span> showLoading<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">></span></span> post<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> query<span class="token punctuation">,</span>   <span class="token comment">// 请求参数</span>  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> headers<span class="token punctuation">,</span> <span class="token comment">// 请求header</span>  <span class="token keyword">dynamic</span> data<span class="token punctuation">,</span>                 <span class="token comment">// post请求参数</span>  bool contentTypeJson <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否设置Content-Type: application/json,默认 application/x-www-form-urlencoded</span>  <span class="token class-name">ErrorHandler</span><span class="token operator">?</span> errorHandler<span class="token punctuation">,</span>   <span class="token comment">// 捕获异常处理的handler</span>  bool showLoading<span class="token operator">=</span><span class="token boolean">false</span>        <span class="token comment">// 是否显示loading</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">_realRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"POST"</span></span><span class="token punctuation">,</span> query<span class="token punctuation">:</span>query<span class="token punctuation">,</span>headers<span class="token punctuation">:</span>headers<span class="token punctuation">,</span> data<span class="token punctuation">:</span>data<span class="token punctuation">,</span>contentTypeJson<span class="token punctuation">:</span> contentTypeJson<span class="token punctuation">,</span>errorHandler<span class="token punctuation">:</span> errorHandler<span class="token punctuation">,</span>showLoading<span class="token punctuation">:</span> showLoading<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-5-封装GET-POST代理方法的具体实现"><a href="#2-5-封装GET-POST代理方法的具体实现" class="headerlink" title="2.5 封装GET,POST代理方法的具体实现"></a>2.5 封装GET,POST代理方法的具体实现</h4><ul><li>dio 默认提供了get,post,fetch 快捷方法，底层都是通过request来实现，因此我们也通过调用request来实现<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">></span></span> _realRequest<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span> <span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">,</span>                <span class="token comment">// HTTP请求方法："GET", "POST"</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> query<span class="token punctuation">,</span>   <span class="token comment">// get请求参数</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token operator">?</span> headers<span class="token punctuation">,</span> <span class="token comment">// 请求header</span> <span class="token keyword">dynamic</span> data<span class="token punctuation">,</span>                 <span class="token comment">// post请求参数</span> bool contentTypeJson<span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否设置Content-Type: application/json,默认 application/x-www-form-urlencoded</span> <span class="token class-name">ErrorHandler</span><span class="token operator">?</span> errorHandler<span class="token punctuation">,</span>   <span class="token comment">// 捕获异常处理的handler</span> bool showLoading<span class="token operator">=</span><span class="token boolean">false</span>        <span class="token comment">// 是否显示loading</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span> <span class="token keyword">try</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>showLoading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">showLoadingDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 请求头组装，如果本次请求单独设置了Options，则本次请求会覆盖公共的BaseOptions设置的内容</span>     <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token class-name">Options</span><span class="token punctuation">(</span>method<span class="token punctuation">:</span> method<span class="token punctuation">,</span>headers<span class="token punctuation">:</span> headers<span class="token punctuation">)</span> <span class="token punctuation">;</span>     options<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>sendTimeout<span class="token punctuation">:</span>baseOptions<span class="token punctuation">.</span>connectTimeout<span class="token punctuation">,</span>receiveTimeout<span class="token punctuation">:</span> baseOptions<span class="token punctuation">.</span>connectTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 设置content-type</span>     options<span class="token punctuation">.</span>contentType <span class="token operator">=</span> contentTypeJson <span class="token operator">?</span> <span class="token class-name">Headers</span><span class="token punctuation">.</span>jsonContentType <span class="token punctuation">:</span> <span class="token class-name">Headers</span><span class="token punctuation">.</span>formUrlEncodedContentType<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>contentTypeJson<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// dynamic data 转json</span>        data <span class="token operator">=</span> <span class="token function">_convertRequestData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token class-name">Uri</span><span class="token operator">?</span> orgUri<span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">&#123;</span>         orgUri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> orgQuery <span class="token operator">=</span> orgUri<span class="token punctuation">.</span>queryParameters<span class="token punctuation">;</span>         query <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>         query<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>orgQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">var</span> exception <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 如果业务方未处理异常，则直接抛出异常</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>errorHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> globalErrorHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     late <span class="token class-name">Response</span> response<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>orgUri <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         response <span class="token operator">=</span> <span class="token keyword">await</span> _dio<span class="token punctuation">.</span><span class="token function">requestUri</span><span class="token punctuation">(</span>orgUri<span class="token punctuation">,</span>data<span class="token punctuation">:</span>data<span class="token punctuation">,</span> options<span class="token punctuation">:</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>baseOptions<span class="token punctuation">.</span>baseUrl<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApiException</span> exception <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token class-name">ApiException</span><span class="token punctuation">.</span>defaultErrorCode<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"未设置BaseUrl"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果业务方未处理异常，则直接抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 使用dio发起请求</span>     response <span class="token operator">=</span> <span class="token keyword">await</span> _dio<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>queryParameters<span class="token punctuation">:</span>query<span class="token punctuation">,</span>data<span class="token punctuation">:</span>data<span class="token punctuation">,</span> options<span class="token punctuation">:</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token function">_parseHttpResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">var</span> exception <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 如果业务方未处理异常，则直接抛出异常</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>errorHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> globalErrorHandler<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>     <span class="token function">hideLoadingDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token class-name">String</span> <span class="token function">_convertRequestData</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data <span class="token operator">=</span> <span class="token function">jsonDecode</span><span class="token punctuation">(</span><span class="token function">jsonEncode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">showLoadingDialog</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> message<span class="token operator">=</span> <span class="token string-literal"><span class="token string">"加载中..."</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EasyLoading</span><span class="token punctuation">.</span><span class="token keyword">show</span><span class="token punctuation">(</span>status<span class="token punctuation">:</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">hideLoadingDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">EasyLoading</span><span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-6-dio-请求响应数据解析与json转换"><a href="#2-6-dio-请求响应数据解析与json转换" class="headerlink" title="2.6 dio 请求响应数据解析与json转换"></a>2.6 dio 请求响应数据解析与json转换</h4><ul><li>response响应的数据类型可以是bytes，也可以是stream，json，移动开发中通常会解析为data model<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">T</span><span class="token operator">?</span> _parseHttpResponse<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token class-name">RawData</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RawData</span> rawData <span class="token operator">=</span> <span class="token class-name">RawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rawData<span class="token punctuation">.</span>value <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">return</span> rawData <span class="token operator">as</span> <span class="token class-name">T</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">ApiResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> apiResponse <span class="token operator">=</span> <span class="token class-name">ApiResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>apiResponse<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> apiResponse<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>         <span class="token keyword">var</span> exception <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>apiResponse<span class="token punctuation">.</span>code<span class="token punctuation">,</span>apiResponse<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> exception <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode<span class="token punctuation">,</span> response<span class="token punctuation">.</span>statusMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-7-dio网络请求异常处理"><a href="#2-7-dio网络请求异常处理" class="headerlink" title="2.7 dio网络请求异常处理"></a>2.7 dio网络请求异常处理</h4><ul><li><p>异常处理：网络请求异常，dio会抛出DioError,根据DioErrorType可以自行处理和二次包装，这里重新定义一个ApiException类</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">ApiException</span> <span class="token keyword">implements</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token operator">?</span> message<span class="token punctuation">;</span>      <span class="token keyword">final</span> int<span class="token operator">?</span> code<span class="token punctuation">;</span>      <span class="token class-name">String</span><span class="token operator">?</span> stackInfo<span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">const</span> defaultErrorCode <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">const</span> defaultMessage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"未知异常"</span></span><span class="token punctuation">;</span>      <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">factory</span> <span class="token class-name">ApiException</span><span class="token punctuation">.</span><span class="token function">fromDioError</span><span class="token punctuation">(</span><span class="token class-name">DioError</span> error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">case</span> <span class="token class-name">DioErrorType</span><span class="token punctuation">.</span>cancel<span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>defaultErrorCode<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"请求取消"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token class-name">DioErrorType</span><span class="token punctuation">.</span>connectTimeout<span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>defaultErrorCode<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"连接超时"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token class-name">DioErrorType</span><span class="token punctuation">.</span>sendTimeout<span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>defaultErrorCode<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"请求超时"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token class-name">DioErrorType</span><span class="token punctuation">.</span>receiveTimeout<span class="token punctuation">:</span>              <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"响应超时"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token class-name">DioErrorType</span><span class="token punctuation">.</span>response<span class="token punctuation">:</span>         <span class="token keyword">try</span><span class="token punctuation">&#123;</span>              <span class="token class-name">ApiResponse</span> apiResponse <span class="token operator">=</span> <span class="token class-name">ApiResponse</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token operator">?</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>apiResponse<span class="token punctuation">.</span>code <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>apiResponse<span class="token punctuation">.</span>code<span class="token punctuation">,</span> apiResponse<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              int<span class="token operator">?</span> errCode <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token operator">?</span><span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>              <span class="token keyword">switch</span> <span class="token punctuation">(</span>errCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"请求语法错误"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">401</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"没有权限"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">403</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"服务器拒绝执行"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"无法连接服务器"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">405</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"请求方法被禁止"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">500</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"服务器内部错误"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">502</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"无效的请求"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">503</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"服务器异常"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> <span class="token number">505</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"不支持HTTP协议请求"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>errCode<span class="token punctuation">,</span> error<span class="token punctuation">.</span>response<span class="token operator">?</span><span class="token punctuation">.</span>statusMessage <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">'未知错误'</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">on</span> <span class="token class-name">Exception</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>defaultErrorCode<span class="token punctuation">,</span> defaultMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>defaultErrorCode<span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>            <span class="token keyword">factory</span> <span class="token class-name">ApiException</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>exception <span class="token operator">is</span> <span class="token class-name">DioError</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">ApiException</span><span class="token punctuation">.</span><span class="token function">fromDioError</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>exception <span class="token operator">is</span> <span class="token class-name">ApiException</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> exception<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> apiException <span class="token operator">=</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span>defaultErrorCode<span class="token punctuation">,</span> defaultMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            apiException<span class="token punctuation">.</span>stackInfo <span class="token operator">=</span> exception<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> apiException<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>全局异常处理：在初始化网络库的时候设置全局处理网络请求异常的ErrorHandler</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">typedef</span> <span class="token class-name">ErrorHandler</span> <span class="token operator">=</span> bool <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">ApiException</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token class-name">ErrorHandler</span>  defaultErrorHandler  <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">EasyLoading</span><span class="token punctuation">.</span><span class="token function">showToast</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">"未知错误"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>dioHttpClient<span class="token punctuation">.</span><span class="token function">setGlobalErrorHandler</span><span class="token punctuation">(</span>defaultErrorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-8-dio-拦截器"><a href="#2-8-dio-拦截器" class="headerlink" title="2.8 dio 拦截器"></a>2.8 dio 拦截器</h4><blockquote><p>每个Dio实例都可以添加任意多个拦截器，他们组成一个队列，拦截器队列的执行顺序是FIFO。通过拦截器你可以在请求之前、响应之后和发生异常时(但还没有被 then 或 catchError处理)做一些统一的预处理操做</p></blockquote><ul><li><p>基本用法</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">dio<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">InterceptorsWrapper</span><span class="token punctuation">(</span>   onRequest<span class="token punctuation">:</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// Do something before request is sent</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//continue</span>      <span class="token comment">// 如果你想完成请求并返回一些自定义数据，你可以resolve一个Response对象 `handler.resolve(response)`</span>      <span class="token comment">// 这样请求将会被终止，上层then会被调用，then中返回的数据将是你的自定义response.</span>      <span class="token comment">// 如果你想终止请求并触发一个错误,你可以返回一个`DioError`对象,如`handler.reject(error)`，</span>      <span class="token comment">// 这样请求将被中止并触发异常，上层catchError会被调用。</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   onResponse<span class="token punctuation">:</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Do something with response data</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// continue</span>      <span class="token comment">// 如果你想终止请求并触发一个错误,你可以 reject 一个`DioError`对象,如`handler.reject(error)`，</span>      <span class="token comment">// 这样请求将被中止并触发异常，上层catchError会被调用。</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   onError<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">DioError</span> e<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Do something with response error</span>      <span class="token keyword">return</span>  handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//continue</span>      <span class="token comment">// 如果你想完成请求并返回一些自定义数据，可以resolve 一个`Response`,如`handler.resolve(response)`。</span>      <span class="token comment">// 这样请求将会被终止，上层then会被调用，then中返回的数据将是你的自定义response.</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义拦截器示例</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">&#123;</span>    <span class="token metadata function">@override</span>   <span class="token keyword">void</span> <span class="token function">onRequest</span><span class="token punctuation">(</span><span class="token class-name">RequestOptions</span> options<span class="token punctuation">,</span> <span class="token class-name">RequestInterceptorHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token metadata function">@override</span>   <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">,</span> <span class="token class-name">ResponseInterceptorHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 修改天气api返回数据结构</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>realUri <span class="token operator">==</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>weatherApi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"response.realUri=</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">response<span class="token punctuation">.</span>realUri</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Weather</span> weather <span class="token operator">=</span> <span class="token class-name">Weather</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> orgData <span class="token operator">=</span> weather<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span> newData <span class="token operator">=</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token keyword">dynamic</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      newData<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"code"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>      newData<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"message"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"success"</span></span><span class="token punctuation">;</span>      newData<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"data"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> orgData<span class="token punctuation">;</span>      response<span class="token punctuation">.</span>data <span class="token operator">=</span> newData<span class="token punctuation">;</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// continue ,将修改后的response 传递给后面的拦截器</span>      handler<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token metadata function">@override</span>   <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token class-name">DioError</span> err<span class="token punctuation">,</span> <span class="token class-name">ErrorInterceptorHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       handler<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-9-网络请求与天气示例"><a href="#2-9-网络请求与天气示例" class="headerlink" title="2.9 网络请求与天气示例"></a>2.9 网络请求与天气示例</h4><ul><li><p>ui效果 </p><img src="/blogs/images/flutter_simple_weather.jpg" class="[天气]" width="320" height="380" title="[天气]"></li><li><p>网络请求拦截器日志打印</p><img src="/blogs/images/flutter_simple_dio_log.jpg" class="[天气api log]" title="[天气api log]"></li><li><p>通过天气api获取当前地区实时天气并展示ui</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Widget</span> <span class="token function">_buildWeather</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Size</span> size <span class="token operator">=</span> <span class="token class-name">MediaQuery</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>    <span class="token keyword">var</span> imageHeight <span class="token operator">=</span> size<span class="token punctuation">.</span>height <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>weather <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> gm <span class="token operator">=</span> <span class="token class-name">GmLocalizations</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>           decoration<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">BoxDecoration</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">,</span>           child<span class="token punctuation">:</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>              child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>gm<span class="token punctuation">.</span>findTab<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> temArea <span class="token operator">=</span>   <span class="token string-literal"><span class="token string">"$&#123;weather?.temDay ?? "</span></span><span class="token number">30</span><span class="token string-literal"><span class="token string">"&#125;°/ $&#123;weather?.temNight ?? "</span></span><span class="token number">18</span><span class="token string-literal"><span class="token string">"&#125;°"</span></span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"imageHeight:</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">imageHeight</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token class-name">TextStyle</span> defaultTextStyle <span class="token operator">=</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>white<span class="token punctuation">,</span>fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span>               <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token function">network</span><span class="token punctuation">(</span>weatherImages<span class="token punctuation">[</span>weather<span class="token operator">?</span><span class="token punctuation">.</span>weaImg<span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">,</span>height<span class="token punctuation">:</span> <span class="token number">260</span><span class="token punctuation">,</span>alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>topLeft<span class="token punctuation">,</span>fit<span class="token punctuation">:</span> <span class="token class-name">BoxFit</span><span class="token punctuation">.</span>fitHeight<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token class-name">Center</span><span class="token punctuation">(</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>                     children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                        <span class="token class-name">Padding</span><span class="token punctuation">(</span>                           padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>weather<span class="token operator">?</span><span class="token punctuation">.</span>city <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">"未知城市"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> defaultTextStyle<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token class-name">Row</span><span class="token punctuation">(</span>                           mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>                           children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                               <span class="token class-name">Text</span><span class="token punctuation">(</span>weather<span class="token operator">?</span><span class="token punctuation">.</span>tem <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">"30"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> defaultTextStyle<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token class-name">Padding</span><span class="token punctuation">(</span>                                  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"°"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> defaultTextStyle<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                      <span class="token punctuation">]</span><span class="token punctuation">,</span>                        <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token class-name">Padding</span><span class="token punctuation">(</span>                  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>top<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>bottom<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>temArea<span class="token punctuation">,</span>style<span class="token punctuation">:</span> defaultTextStyle<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">weather<span class="token operator">?</span><span class="token punctuation">.</span>wea</span><span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">weather<span class="token operator">?</span><span class="token punctuation">.</span>win</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> defaultTextStyle<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token class-name">Padding</span><span class="token punctuation">(</span>                  padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">only</span><span class="token punctuation">(</span>top<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>right<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Align</span><span class="token punctuation">(</span>                     alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>bottomRight<span class="token punctuation">,</span>                     child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"上次更新时间: </span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">weather<span class="token operator">?</span><span class="token punctuation">.</span>updateTime</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> defaultTextStyle<span class="token punctuation">.</span><span class="token function">copyWith</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span>                   <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">_refreshWeather</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>bool showLoadingDialog <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">async</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Weather</span><span class="token operator">?</span> res <span class="token operator">=</span> <span class="token keyword">await</span> dioHttpClient<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Weather</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>API<span class="token punctuation">.</span>weatherApi<span class="token punctuation">,</span>showLoading<span class="token punctuation">:</span> showLoadingDialog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      weather <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三-在flutter中使用websocket"><a href="#三-在flutter中使用websocket" class="headerlink" title="三 在flutter中使用websocket"></a>三 在flutter中使用websocket</h3><blockquote><p>dart:io系统类库中的WebSocket类提供对 Web 套接字协议的支持。这允许客户端和服务器应用程序之间的全双工通信。<br>Web 套接字服务器使用普通的 HTTP 服务器来接受 Web 套接字连接。初始握手是一个 HTTP 请求，然后升级为 Web 套接字连接。</p></blockquote><blockquote><p>服务器使用WebSocketTransformer升级请求 并侦听返回的 Web 套接字上的数据。</p></blockquote><blockquote><p>客户端使用WebSocket.connect方法和使用 Web Socket 协议的 URI连接到WebSocket 。客户端可以使用WebSocket.add方法写入WebSocket。</p></blockquote><blockquote><p>pub.dev 提供了 <a href="https://pub.dev/packages/web_socket_channel">web_socket_channel</a> 库，对WebSocket进行了包装，提供了一套跨平台的WebSocketChannel的 API，本例将使用该库进行说明</p></blockquote><h4 id="3-1-WebSocket的通信5个步骤"><a href="#3-1-WebSocket的通信5个步骤" class="headerlink" title="3.1 WebSocket的通信5个步骤"></a>3.1 WebSocket的通信5个步骤</h4><ol><li>连接到WebSocket服务器</li></ol><ul><li>为了方便管理，我们自定义一个WebSocketManager，对WebSocket通信进行统一封装<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">late <span class="token class-name">IOWebSocketChannel</span> _channel<span class="token punctuation">;</span><span class="token class-name">StreamController</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">></span></span><span class="token operator">?</span> socketStatusController <span class="token operator">=</span> <span class="token class-name">StreamController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// socket 连接状态</span><span class="token class-name">WebSocketStatus</span> connectStatus <span class="token operator">=</span> <span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>close<span class="token punctuation">;</span><span class="token class-name">Future</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>connectStatus <span class="token operator">==</span> <span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   connectStatus <span class="token operator">=</span> <span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>connecting<span class="token punctuation">;</span>   socketStatusController <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token class-name">StreamController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   socketStatusController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>connecting<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 建立websocket连接</span>   _channel <span class="token operator">=</span> <span class="token class-name">IOWebSocketChannel</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   connectStatus <span class="token operator">=</span> <span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>connect<span class="token punctuation">;</span>   <span class="token comment">// 更新连接状态为已连接</span>   socketStatusController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>connect<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>监听来自服务器的消息</li></ol><ul><li>IOWebSocketChannel.stream.listen()监听数据，也可以结合StreamBuilder来实现异步更新ui<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">StreamBuilder</span><span class="token punctuation">(</span>   stream<span class="token punctuation">:</span> widget<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>   builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过hasData 接受数据</span>    <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasData <span class="token operator">?</span> <span class="token string-literal"><span class="token string">'</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">''</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="3"><li>向服务端发送数据</li></ol><ul><li>通过IOWebSocketChannel.sink.add(data),一个StreamSink类型的对象，用于接受流事件<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart">bool <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>connectStatus <span class="token operator">==</span> <span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>connect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    _channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>关闭WebSocket连接</li></ol><ul><li>通过IOWebSocketChannel.sink.close(),后续将不再添加任何流事件<pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Future</span> <span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>connectStatus<span class="token operator">==</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>connect<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   connectStatus<span class="token operator">=</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>closing<span class="token punctuation">;</span>   socketStatusController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>closing<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">await</span> _channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"主动关闭"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>   connectStatus<span class="token operator">=</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>close<span class="token punctuation">;</span>   socketStatusController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">WebSocketStatus</span><span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-2-WebSocket实战聊天实例"><a href="#3-2-WebSocket实战聊天实例" class="headerlink" title="3.2 WebSocket实战聊天实例"></a>3.2 WebSocket实战聊天实例</h4><ul><li><p>聊天页面ui</p><img src="/blogs/images/flutter_simple_websocket.jpg" class="[websocket 聊天示例]" width="320" height="380" title="[websocket 聊天示例]"></li><li><p>通过WebSocket来实现聊天功能和ui界面</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token class-name">Widget</span> <span class="token function">_buildChatRoom</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> channel <span class="token operator">=</span> <span class="token class-name">WebSocketManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token class-name">StreamBuilder</span><span class="token punctuation">(</span>            stream<span class="token punctuation">:</span> channel<span class="token punctuation">.</span>stream<span class="token punctuation">,</span>            builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>context<span class="token punctuation">,</span>snapshot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">// 网络链接异常</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                _message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"网络异连接常"</span></span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasData<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                _message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>                _receiveTime <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _messageHistory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">newReceiveMessage</span><span class="token punctuation">(</span>_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token keyword">return</span> <span class="token class-name">Padding</span><span class="token punctuation">(</span>                padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>horizontal<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                child<span class="token punctuation">:</span> <span class="token class-name">ListView</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>                physics<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">NeverScrollableScrollPhysics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 解决与CustomScrollView垂直方向滑动冲突</span>                shrinkWrap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 解决Vertical viewport was given unbounded height</span>                itemCount<span class="token punctuation">:</span> _messageHistory<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                itemBuilder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span>int index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token function">_buildMessageHistory</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> _messageHistory<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token class-name">Widget</span> <span class="token function">_buildMessageHistory</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token class-name">Message</span><span class="token punctuation">.</span>sendMsgType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>               children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                 <span class="token class-name">Padding</span><span class="token punctuation">(</span>                    padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    child<span class="token punctuation">:</span> <span class="token class-name">Align</span><span class="token punctuation">(</span>                           alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>centerLeft<span class="token punctuation">,</span>                           child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"你发送的消息：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_sendTime</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF056A2D</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token class-name">Align</span><span class="token punctuation">(</span>                  alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>centerLeft<span class="token punctuation">,</span>                  child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>text<span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>                children<span class="token punctuation">:</span> <span class="token punctuation">[</span>                   <span class="token class-name">Padding</span><span class="token punctuation">(</span>                      padding<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">EdgeInsets</span><span class="token punctuation">.</span><span class="token function">symmetric</span><span class="token punctuation">(</span>vertical<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      child<span class="token punctuation">:</span>  <span class="token class-name">Align</span><span class="token punctuation">(</span>                                 alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>centerLeft<span class="token punctuation">,</span>                                 child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"服务器响应：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">_receiveTime</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0xFF2F15E4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token class-name">Align</span><span class="token punctuation">(</span>                      alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>centerLeft<span class="token punctuation">,</span>                      child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>text<span class="token punctuation">,</span>style<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">,</span>color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">_sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>_textEditingController<span class="token punctuation">.</span>text<span class="token punctuation">.</span>isNotEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> sendContent <span class="token operator">=</span> _textEditingController<span class="token punctuation">.</span>text<span class="token punctuation">;</span>      _sendTime <span class="token operator">=</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      _messageHistory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">newSendMessage</span><span class="token punctuation">(</span>sendContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">IOWebSocketChannel</span> channel <span class="token operator">=</span> <span class="token class-name">WebSocketManager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      channel<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sendContent<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四-文件操作"><a href="#四-文件操作" class="headerlink" title="四 文件操作"></a>四 文件操作</h3><h4 id="4-1-drat-io库提供了标准的API-File-Directory-Link类来实现文件读写操作"><a href="#4-1-drat-io库提供了标准的API-File-Directory-Link类来实现文件读写操作" class="headerlink" title="4.1 drat:io库提供了标准的API: File,Directory,Link类来实现文件读写操作"></a>4.1 drat:io库提供了标准的API: File,Directory,Link类来实现文件读写操作</h4><ul><li><p>读文件</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">&#123;</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> content<span class="token punctuation">;</span>  <span class="token comment">// 以字符串形式写入文件</span>  content <span class="token operator">=</span>  file<span class="token punctuation">.</span><span class="token function">readAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以bytes[] 形式写入文件</span>  <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Uint8List</span><span class="token punctuation">></span></span> bytes <span class="token operator">=</span>  file<span class="token punctuation">.</span><span class="token function">readAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> content<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>写文件</p><pre class="line-numbers language-dart" data-language="dart"><code class="language-dart"><span class="token keyword">static</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">></span></span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token keyword">async</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Directory</span> dir <span class="token operator">=</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"app_cache"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     dir<span class="token punctuation">.</span><span class="token function">createSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">dir<span class="token punctuation">.</span>path</span><span class="token punctuation">&#125;</span></span><span class="token string">/test.txt"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     file<span class="token punctuation">.</span><span class="token function">createSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 以字符串形式写入文件</span>  file<span class="token punctuation">.</span><span class="token function">writeAsString</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以bytes[] 形式写入文件</span>  file<span class="token punctuation">.</span><span class="token function">writeAsBytes</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">Utf8Encoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> file<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-2-移动端文件操作一些特异性"><a href="#4-2-移动端文件操作一些特异性" class="headerlink" title="4.2 移动端文件操作一些特异性"></a>4.2 移动端文件操作一些特异性</h4><blockquote><p>dart:io库包含了文件读写的相关类，它属于Dart语法标准的一部分，所以无论是Dart VM下的脚本还是Flutter，都是通过dart:io库来操作文件的，不过和Dart VM相比，<br>Flutter有一个重要差异是文件系统路径不同，这是因为Dart VM 是运行在 PC 或服务器操作系统下，而 Flutter 是运行在移动操作系统中，他们的文件系统会有一些差异</p></blockquote><ul><li>APP目录</li></ul><blockquote><p>Android 和 iOS 的应用存储目录不同，<a href="https://pub.dev/packages/path_provider">path_provider</a>插件提供了一种平台透明的方式来访问设备文件系统上的常用位置。该类当前支持访问两个文件系统位置</p></blockquote><ul><li><p>临时目录: 可以使用 getTemporaryDirectory() 来获取临时目录； 系统可随时清除的临时目录（缓存）。在 iOS 上，这对应于NSTemporaryDirectory()返回的值。在 Android上，这是getCacheDir()返回的值</p></li><li><p>文档目录: 可以使用getApplicationDocumentsDirectory()来获取应用程序的文档目录，该目录用于存储只有自己可以访问的文件。只有当应用程序被卸载时，系统才会清除该目录。在 iOS 上，这对应于NSDocumentDirectory。在 Android 上，这是AppData目录</p></li><li><p>外部存储目录：可以使用getExternalStorageDirectory()来获取外部存储目录，如 SD 卡；由于 iOS不支持外部目录，所以在 iOS 下调用该方法会抛出UnsupportedError异常，而在 Android 下结果是Android SDK 中getExternalStorageDirectory的返回值</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-使用HttpClient网络请求&quot;&gt;&lt;a href=&quot;#一-使用HttpClient网络请求&quot; class=&quot;headerlink&quot; title=&quot;一 使用HttpClient网络请求&quot;&gt;&lt;/a&gt;一 使用HttpClient网络请求&lt;/h3&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="Flutter" scheme="https://allennzhang.github.io/blogs/categories/Flutter/"/>
    
    
    <category term="flutter" scheme="https://allennzhang.github.io/blogs/tags/flutter/"/>
    
    <category term="网络" scheme="https://allennzhang.github.io/blogs/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="websocket" scheme="https://allennzhang.github.io/blogs/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Multiplatform Mobile基础入门(三)</title>
    <link href="https://allennzhang.github.io/blogs/2022/06/09/kotlin-multiplatform-mobile-ji-chu-ru-men-san/"/>
    <id>https://allennzhang.github.io/blogs/2022/06/09/kotlin-multiplatform-mobile-ji-chu-ru-men-san/</id>
    <published>2022-06-09T02:02:00.000Z</published>
    <updated>2022-06-14T09:02:00.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-KmmSimpleLogin示例工程搭建"><a href="#一-KmmSimpleLogin示例工程搭建" class="headerlink" title="一 KmmSimpleLogin示例工程搭建"></a>一 KmmSimpleLogin示例工程搭建</h3><blockquote><p>上一节 <a href="https://allennzhang.github.io/blogs/2022/06/08/kotlin-multiplatform-mobile-ji-chu-ru-men-er/">Kotlin Multiplatform Mobile基础入门(二)</a> <br/><br>已经搭建好了登录示例工程，并在公共模块login实现了登录校验和模拟登录的公共业务逻辑，本节主要介绍通过Ktor网络库和SQLDelight数据库来真正实现业务逻辑</p></blockquote><ul><li>工程结构</li></ul><img src="/blogs/images/kmm_simple_login_project.png" class="[KmmSimpleLogin示例工程]" title="[KmmSimpleLogin示例工程]"><ul><li>其中 login module为我们的共享模块</li></ul><h4 id="1-2-添加工程基础配置和依赖项"><a href="#1-2-添加工程基础配置和依赖项" class="headerlink" title="1.2 添加工程基础配置和依赖项"></a>1.2 添加工程基础配置和依赖项</h4><ul><li><p>工程依赖的插件配置</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>mpp<span class="token punctuation">.</span>KotlinNativeTargetplugins <span class="token punctuation">&#123;</span>   <span class="token comment">// 多平台插件（必选）</span>   <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"multiplatform"</span></span><span class="token punctuation">)</span>   <span class="token comment">// ios cocoapods 插件</span>   <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"native.cocoapods"</span></span><span class="token punctuation">)</span>   <span class="token comment">// kotlin 序列化-反序列化插件</span>   <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"plugin.serialization"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"1.6.21"</span></span>   <span class="token comment">// android lib 插件</span>   <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.library"</span></span><span class="token punctuation">)</span>   <span class="token comment">// SQLDelight 插件，用于解析sql配置文件生成对应实体类</span>   <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.squareup.sqldelight"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"1.5.3"</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>android和iOS端目标平台配置</p></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> ktor_version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"2.0.0"</span></span>    <span class="token keyword">val</span> sqldelight_version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"1.5.3"</span></span>    <span class="token function">android</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> iosTarget<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> KotlinNativeTarget<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token operator">-></span> KotlinNativeTarget <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">&#123;</span>    System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"SDK_NAME"</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"iphoneos"</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">-></span>  <span class="token operator">::</span>iosArm64    System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"NATIVE_ARCH"</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"arm"</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">-></span>  <span class="token operator">::</span>iosSimulatorArm64    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token operator">::</span>iosX64    <span class="token punctuation">&#125;</span>    <span class="token comment">// ios 支持 真机，模拟器</span>    <span class="token function">iosTarget</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"ios"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// fix sqlite3 linker error</span>    targets<span class="token punctuation">.</span>filterIsInstance<span class="token operator">&lt;</span>org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>mpp<span class="token punctuation">.</span>KotlinNativeTarget<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">&#123;</span>        it<span class="token punctuation">.</span>binaries<span class="token punctuation">.</span>filterIsInstance<span class="token operator">&lt;</span>org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>mpp<span class="token punctuation">.</span>Framework<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span> lib <span class="token operator">-></span>            lib<span class="token punctuation">.</span>isStatic <span class="token operator">=</span> <span class="token boolean">false</span>            lib<span class="token punctuation">.</span>linkerOpts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"-lsqlite3"</span></span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// cocoapods 配置项</span>    cocoapods <span class="token punctuation">&#123;</span>        summary <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Some description for the Shared Module"</span></span>        homepage <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Link to the Shared Module homepage"</span></span>        ios<span class="token punctuation">.</span>deploymentTarget <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"14.1"</span></span>        framework <span class="token punctuation">&#123;</span>            baseName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"login"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>源码集及依赖项配置</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin <span class="token punctuation">&#123;</span>    sourceSets <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> commonMain <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"</span></span><span class="token punctuation">)</span>                <span class="token comment">// ktor  网络库</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-core:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// ktor plugin Logging</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-logging:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// logger</span>                <span class="token function">implementation</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.github.aakira:napier:2.6.1"</span></span><span class="token punctuation">)</span>                <span class="token comment">// Serialization  kotlin-serialization</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-serialization-core:1.3.2"</span></span><span class="token punctuation">)</span>                <span class="token comment">//Serialization  kotlin-protobuf</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.3.2"</span></span><span class="token punctuation">)</span>                <span class="token comment">// json</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-serialization-kotlinx-json:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token function">implementation</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-network:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// kotlin-datetime</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-datetime:0.3.2"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> commonTest <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"test"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> androidMain <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token comment">// android 平台使用okhttp 网络引擎</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-okhttp:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// android 平台协程 </span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"</span></span><span class="token punctuation">)</span>                <span class="token comment">// android 平台 sqlite 驱动， expect a SqlDriver to be provided by individual platforms when creating the Database</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.squareup.sqldelight:android-driver:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">sqldelight_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> androidTest <span class="token keyword">by</span> getting        <span class="token keyword">val</span> iosMain <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            <span class="token function">dependsOn</span><span class="token punctuation">(</span>commonMain<span class="token punctuation">)</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token comment">// ios 平台 网络引擎</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-darwin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// ios sqlite 驱动，expect a SqlDriver to be provided by individual platforms when creating the Database</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.squareup.sqldelight:native-driver:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">sqldelight_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> iosTest <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            <span class="token function">dependsOn</span><span class="token punctuation">(</span>commonTest<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>sqldelight <span class="token punctuation">&#123;</span>   <span class="token comment">// This will be the name of the generated database class.</span>   <span class="token function">database</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"LoginDatabase"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// packageName 为生成 SQLite 操作类的包名，根据情况合理指定即可</span>         packageName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"cn.hipac.login.sql"</span></span>         <span class="token comment">// for iOS </span>         linkSqlite <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-通过Ktor实现网络请求"><a href="#二-通过Ktor实现网络请求" class="headerlink" title="二 通过Ktor实现网络请求"></a>二 通过Ktor实现网络请求</h3><blockquote><p><a href="https://ktor.io/docs/welcome.html">什么是Ktor</a> <br/><br>Ktor 是一个框架，可以轻松构建连接的应用程序——Web 应用程序、HTTP 服务、移动和浏览器应用程序。现代连接的应用程序需要异步才能为用户提供最佳体验，而 Kotlin 协程提供了非常棒的工具，可以以简单直接的方式实现。Ktor 的目标是为连接的应用程序提供端到端的多平台框架</p></blockquote><blockquote><p>HttpClient 是 Ktor中客户端发起HTTP请求的实例对象，可以在不同的平台上使用，包括 JVM、Android、JavaScript和Native。<br/><br>特定平台可能需要处理网络请求的特定引擎。例如，您可以将Apache or Jetty用于 JVM 应用程序，OkHttp或者Android用于 Android，Curl用于面向 Kotlin&#x2F;Native 的桌面应用程序，等等<br/><br>不同的<a href="https://ktor.io/docs/http-client-engines.html">引擎</a> 可能具有特定的功能并提供不同的配置选项</p></blockquote><blockquote><p>Ktor 提供了丰富的<a href="https://ktor.io/docs/http-client-plugins.html">插件</a> 来实现网络请求的一些拓展功能，诸如日志记录、序列化或授权之类的事情</p></blockquote><h4 id="2-1-在commonMain-kotlin-package下新建登录结果数据模型-LoginResult-和-User"><a href="#2-1-在commonMain-kotlin-package下新建登录结果数据模型-LoginResult-和-User" class="headerlink" title="2.1 在commonMain kotlin package下新建登录结果数据模型 LoginResult 和 User"></a>2.1 在commonMain kotlin package下新建登录结果数据模型 LoginResult 和 User</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token punctuation">.</span>model<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>Serializable<span class="token annotation builtin">@Serializable</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span><span class="token keyword">val</span> success<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token keyword">val</span> user<span class="token operator">:</span> User<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">val</span> linkUrl<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">val</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">fun</span> <span class="token function">loginSuccess</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">User</span><span class="token punctuation">(</span>userName <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"manager"</span></span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"http://www.baidu.com"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"success"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">fun</span> <span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">User</span><span class="token punctuation">(</span>userName <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"http://www.baidu.com"</span></span><span class="token punctuation">,</span>msg <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"用户名或者密码错误"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">fun</span> <span class="token function">convert</span><span class="token punctuation">(</span>model<span class="token operator">:</span> BaseResponse<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>success <span class="token operator">?:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>model<span class="token punctuation">.</span>            <span class="token keyword">data</span><span class="token punctuation">,</span> linkUrl <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"http://www.baidu.com"</span></span><span class="token punctuation">,</span> msg <span class="token operator">=</span> model<span class="token punctuation">.</span>message <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation builtin">@Serializable</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> userName<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token keyword">val</span> userPass<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">val</span> userRole<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token keyword">val</span> age<span class="token operator">:</span>Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-在commonMain-kotlin-package下新建LoginService-创建-HttpClient实例"><a href="#2-2-在commonMain-kotlin-package下新建LoginService-创建-HttpClient实例" class="headerlink" title="2.2 在commonMain kotlin package下新建LoginService 创建 HttpClient实例"></a>2.2 在commonMain kotlin package下新建LoginService 创建 HttpClient实例</h4><ul><li>创建 HttpClient</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> LoginService <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> tag <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"LoginService"</span></span>        <span class="token comment">// 服务器ip地址</span>    <span class="token keyword">val</span> serverIP <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"http://10.250.46.235:8089/"</span></span>    <span class="token comment">// Ktor Client 端 发起请求的实例对象HttpClient</span>    <span class="token keyword">val</span> httpClient<span class="token operator">:</span> HttpClient <span class="token operator">=</span> httpClient <span class="token punctuation">&#123;</span>        <span class="token comment">//日志插件</span>        <span class="token function">install</span><span class="token punctuation">(</span>Logging<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            level <span class="token operator">=</span> LogLevel<span class="token punctuation">.</span>HEADERS            logger <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Logger <span class="token punctuation">&#123;</span>                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 请求失败重试插件</span>        <span class="token function">install</span><span class="token punctuation">(</span>HttpRequestRetry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxRetries <span class="token operator">=</span> <span class="token number">2</span>            retryIf<span class="token punctuation">&#123;</span> request<span class="token punctuation">,</span>response <span class="token operator">-></span>                <span class="token operator">!</span>response<span class="token punctuation">.</span>status<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            delayMillis <span class="token punctuation">&#123;</span> retry <span class="token operator">-></span>                retry <span class="token operator">*</span> <span class="token number">1000L</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Retry conditions</span>            modifyRequest <span class="token punctuation">&#123;</span> request <span class="token operator">-></span>                request<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"x-retry-count"</span></span><span class="token punctuation">,</span> retryCount<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 序列化插件</span>        <span class="token function">install</span><span class="token punctuation">(</span>ContentNegotiation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 将HttpResponse  json内容反序列化为实体对象</span>            <span class="token function">json</span><span class="token punctuation">(</span>Json <span class="token punctuation">&#123;</span>                prettyPrint <span class="token operator">=</span> <span class="token boolean">true</span>                isLenient <span class="token operator">=</span> <span class="token boolean">true</span>                ignoreUnknownKeys <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// http response校验插件</span>        HttpResponseValidator <span class="token punctuation">&#123;</span>               <span class="token comment">// http 错误统一拦截器</span>               handleResponseExceptionWithRequest<span class="token punctuation">&#123;</span>exception<span class="token punctuation">,</span> request <span class="token operator">-></span>                     <span class="token keyword">val</span> clientException <span class="token operator">=</span> exception <span class="token keyword">as</span><span class="token operator">?</span> ClientRequestException <span class="token operator">?:</span> <span class="token keyword">return</span><span class="token label symbol">@handleResponseExceptionWithRequest</span>                     <span class="token keyword">val</span> exceptionResponse <span class="token operator">=</span> exception<span class="token punctuation">.</span>response                     <span class="token comment">// 404 Not Found</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionResponse<span class="token punctuation">.</span>status <span class="token operator">==</span> HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                         <span class="token keyword">val</span> exceptionResponseText <span class="token operator">=</span> exceptionResponse<span class="token punctuation">.</span><span class="token function">bodyAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token keyword">throw</span> <span class="token function">MissingPageException</span><span class="token punctuation">(</span>exceptionResponse<span class="token punctuation">,</span>exceptionResponseText<span class="token punctuation">)</span>                     <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 初始化Napier 日志服务</span>         <span class="token function">initLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HttpClient Engine 配置 <br/><br>由于涉及到平台特性，因此我们需要通过expect-actual机制来实现功能 <br/></li></ul><p>1.首先在commonMain中创建Platform类，并且声明 HttpClient的实例化方法及配置项<br/><br>2.分别在androidMain和iOsMain实现HttpClient实例化方法和配置</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> io<span class="token punctuation">.</span>ktor<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">expect</span> <span class="token keyword">class</span> <span class="token function">Platform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">val</span> platform<span class="token operator">:</span> String    <span class="token keyword">val</span> osVersion<span class="token operator">:</span> String    <span class="token keyword">fun</span> <span class="token function">isIOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean<span class="token punctuation">&#125;</span> <span class="token comment">/**  * 实例化HttpClient  */</span>  <span class="token keyword">expect</span> <span class="token keyword">fun</span> <span class="token function">httpClient</span><span class="token punctuation">(</span>config<span class="token operator">:</span> HttpClientConfig<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> HttpClient <span class="token comment">/**  * 初始化Napier日志服务  */</span>  <span class="token keyword">expect</span> <span class="token keyword">fun</span> <span class="token function">initLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/**  * 从服务端下载图片到本地  */</span>  <span class="token keyword">expect</span> <span class="token keyword">fun</span>  <span class="token function">saveBytesToPicture</span><span class="token punctuation">(</span>byteArray<span class="token operator">:</span> ByteArray<span class="token punctuation">)</span> <span class="token operator">:</span> String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Okhttp for Android  <br/></p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>aakira<span class="token punctuation">.</span>napier<span class="token punctuation">.</span>DebugAntilog<span class="token keyword">import</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>aakira<span class="token punctuation">.</span>napier<span class="token punctuation">.</span>Napier<span class="token keyword">import</span> io<span class="token punctuation">.</span>ktor<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>ktor<span class="token punctuation">.</span>client<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>okhttp<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>CoroutineScope<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>Dispatchers<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>launch<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token keyword">actual</span> <span class="token keyword">class</span> Platform <span class="token keyword">actual</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">actual</span> <span class="token keyword">val</span> platform<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Android"</span></span>    <span class="token keyword">actual</span> <span class="token keyword">val</span> osVersion<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Android </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span>    <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">isIOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">httpClient</span><span class="token punctuation">(</span>config<span class="token operator">:</span> HttpClientConfig<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">HttpClient</span><span class="token punctuation">(</span>OkHttp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">config</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      engine <span class="token punctuation">&#123;</span>          config <span class="token punctuation">&#123;</span>             <span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>             <span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>             <span class="token function">followRedirects</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">initLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   Napier<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token function">DebugAntilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">saveBytesToPicture</span><span class="token punctuation">(</span>byteArray<span class="token operator">:</span> ByteArray<span class="token punctuation">)</span> <span class="token operator">:</span> String<span class="token punctuation">&#123;</span>  <span class="token keyword">val</span> file <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"images_"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"ktor.jpg"</span></span><span class="token punctuation">)</span>  file<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span>  <span class="token keyword">return</span> file<span class="token punctuation">.</span>absolutePath<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Darwin for iOS</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>aakira<span class="token punctuation">.</span>napier<span class="token punctuation">.</span>DebugAntilog<span class="token keyword">import</span> io<span class="token punctuation">.</span>github<span class="token punctuation">.</span>aakira<span class="token punctuation">.</span>napier<span class="token punctuation">.</span>Napier<span class="token keyword">import</span> io<span class="token punctuation">.</span>ktor<span class="token punctuation">.</span>client<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>ktor<span class="token punctuation">.</span>client<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>darwin<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">import</span> platform<span class="token punctuation">.</span>UIKit<span class="token punctuation">.</span>UIDevice<span class="token keyword">actual</span> <span class="token keyword">class</span> Platform <span class="token keyword">actual</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">actual</span> <span class="token keyword">val</span> platform<span class="token operator">:</span> String <span class="token operator">=</span> UIDevice<span class="token punctuation">.</span>currentDevice<span class="token punctuation">.</span><span class="token function">systemName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">actual</span> <span class="token keyword">val</span> osVersion<span class="token operator">:</span> String <span class="token operator">=</span> UIDevice<span class="token punctuation">.</span>currentDevice<span class="token punctuation">.</span><span class="token function">systemName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">" "</span></span> <span class="token operator">+</span> UIDevice<span class="token punctuation">.</span>currentDevice<span class="token punctuation">.</span>systemVersion    <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">isIOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">httpClient</span><span class="token punctuation">(</span>config<span class="token operator">:</span> HttpClientConfig<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">HttpClient</span><span class="token punctuation">(</span>Darwin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">config</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    engine <span class="token punctuation">&#123;</span>        configureRequest <span class="token punctuation">&#123;</span>         <span class="token function">setAllowsCellularAccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">initLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Napier<span class="token punctuation">.</span><span class="token function">base</span><span class="token punctuation">(</span><span class="token function">DebugAntilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">saveBytesToPicture</span><span class="token punctuation">(</span>byteArray<span class="token operator">:</span> ByteArray<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-在commonMain-kotlin-package下新建LoginService-实现登录业务"><a href="#2-3-在commonMain-kotlin-package下新建LoginService-实现登录业务" class="headerlink" title="2.3 在commonMain kotlin package下新建LoginService 实现登录业务"></a>2.3 在commonMain kotlin package下新建LoginService 实现登录业务</h4><ul><li>HTTP GET 请求获取已注册用户列表</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> LoginService <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> tag <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"LoginService"</span></span>    <span class="token comment">// 服务器ip地址</span>    <span class="token keyword">val</span> serverIP <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"http://10.250.46.235:8089/"</span></span>    <span class="token comment">/**     * http get request      */</span>     <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">realLogin</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token punctuation">,</span> userPassword<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> validator <span class="token operator">=</span> LoginDataValidator<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPassword<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>validator<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> LoginResult<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>validator<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> response<span class="token operator">:</span> HttpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"https://wireless-hipac.oss-cn-hangzhou.aliyuncs.com/android/temp/exit_users.json"</span></span><span class="token punctuation">)</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"response=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">response</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token comment">// 将HttpResponse json内容转换为 Model实体对象</span>        <span class="token keyword">val</span> loginModel<span class="token operator">:</span>  BaseResponse<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"loginModel=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">loginModel</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token keyword">val</span> exitUsers <span class="token operator">=</span> loginModel<span class="token punctuation">.</span>data <span class="token keyword">as</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span>        <span class="token keyword">var</span> success <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"您还未注册,请先注册之后再登录哟❤"</span></span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> exitUsers<span class="token punctuation">.</span>indices<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>exitUsers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span> ignoreCase <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exitUsers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>userPass <span class="token operator">==</span> userPassword<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    success <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                   msg <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"密码错误❎"</span></span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> LoginResult<span class="token punctuation">.</span><span class="token function">loginSuccess</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span> <span class="token keyword">else</span> LoginResult<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>msg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HTTP POST 请求实现普通用户登录&#x2F;admin登录</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> LoginService <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> tag <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"LoginService"</span></span>    <span class="token comment">// 服务器ip地址</span>    <span class="token keyword">val</span> serverIP <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"http://10.250.46.235:8089/"</span></span>    <span class="token comment">/**     * 用户登录     * http post 请求，Content-Type: application/x-www-form-urlencoded     */</span>    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">loginFromServer</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token punctuation">,</span> userPassword<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> validator <span class="token operator">=</span> LoginDataValidator<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPassword<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>validator<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> LoginResult<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>validator<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> url <span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">serverIP</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">login"</span></span>        <span class="token keyword">val</span> params <span class="token operator">=</span> Parameters<span class="token punctuation">.</span><span class="token function">build</span> <span class="token punctuation">&#123;</span>            <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"userName"</span></span><span class="token punctuation">,</span>userName<span class="token punctuation">)</span>            <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"userPass"</span></span><span class="token punctuation">,</span>userPassword<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// form 表单提交</span>        <span class="token keyword">val</span> response<span class="token operator">:</span> HttpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">submitForm</span><span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> formParameters <span class="token operator">=</span> params <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            method <span class="token operator">=</span> HttpMethod<span class="token punctuation">.</span>Post        <span class="token punctuation">&#125;</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"response=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">response</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token comment">// HttpClient 安装 ContentNegotiation插件，配合Json 可实现HttpResponse 反序列化为实体对象</span>        <span class="token keyword">val</span> loginModel<span class="token operator">:</span>  BaseResponse<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"loginModel=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">loginModel</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token keyword">return</span> LoginResult<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>loginModel<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * admin登录     * http post 请求，Content-Type: application/json     */</span>    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">loginAdmin</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token punctuation">,</span> userPassword<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> BaseResponse<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> validator <span class="token operator">=</span> LoginDataValidator<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPassword<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>validator<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">BaseResponse</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token number">900</span><span class="token punctuation">,</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> validator<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> url <span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">serverIP</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">login/admin"</span></span>        <span class="token keyword">val</span> response <span class="token operator">:</span> HttpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">contentType</span><span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Json<span class="token punctuation">)</span>            <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPassword<span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"admin"</span></span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"response=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">response</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token keyword">val</span> model <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">&lt;</span>BaseResponse<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"model=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">model</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token keyword">return</span> model    <span class="token punctuation">&#125;</span>    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">getResourceFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> response <span class="token operator">:</span> HttpResponse <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">serverIP</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">ktor.jpg"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            onDownload <span class="token punctuation">&#123;</span> bytesSentTotal<span class="token punctuation">,</span> contentLength <span class="token operator">-></span>                Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Received </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">bytesSentTotal</span></span><span class="token string"> bytes from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">contentLength</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> responseBody<span class="token operator">:</span> ByteArray <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> saveBytesToPicture <span class="token operator">=</span> <span class="token function">saveBytesToPicture</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">)</span>        Napier<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"saveBytesToPicture=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">saveBytesToPicture</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>        <span class="token keyword">return</span> saveBytesToPicture    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-使用SQLDelight实现登录用户信息存储"><a href="#三-使用SQLDelight实现登录用户信息存储" class="headerlink" title="三 使用SQLDelight实现登录用户信息存储"></a>三 使用SQLDelight实现登录用户信息存储</h3><h4 id="3-1-SQLDelight-数据库配置"><a href="#3-1-SQLDelight-数据库配置" class="headerlink" title="3.1  SQLDelight 数据库配置"></a>3.1  SQLDelight 数据库配置</h4><ul><li>login module build.gradle.kts 配置</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">plugins <span class="token punctuation">&#123;</span> <span class="token comment">// ... </span> <span class="token comment">// SQLDelight 插件，用于解析sql配置文件生成对应实体类</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.squareup.sqldelight"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"1.5.3"</span></span><span class="token punctuation">&#125;</span>sqldelight <span class="token punctuation">&#123;</span>   <span class="token comment">// This will be the name of the generated database class.</span>   <span class="token function">database</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"LoginDatabase"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// packageName 为生成 SQLite 操作类的包名，根据情况合理指定即可</span>      packageName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"cn.hipac.login.sql"</span></span>      <span class="token comment">// for iOS</span>      linkSqlite <span class="token operator">=</span> <span class="token boolean">true</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在commonMain中 与kotlin同一级目录新建sqldelight目录作为.sq文件存放件目录<blockquote><p>在sqldelight目录下新建package（需要与gradle中保持一致）cn.hipac.login.sql <br/><br>当执行.&#x2F;gradlew build之后 会在KmmSimpleLogin&#x2F;login&#x2F;build&#x2F;generated&#x2F;sqldelight&#x2F;code下生成上述包名对应的.sq实体类</p></blockquote></li></ul><h4 id="3-2-SQLDelight-建表-与-sql-编写"><a href="#3-2-SQLDelight-建表-与-sql-编写" class="headerlink" title="3.2  SQLDelight 建表 与 sql 编写"></a>3.2  SQLDelight 建表 与 sql 编写</h4><ul><li>在commonMain&#x2F;sqldelight&#x2F;cn.hipac.login.sql下新建User.sq文件</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token operator">--</span> 新建 User 表CREATE TABLE <span class="token function">User</span> <span class="token punctuation">(</span>   id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT<span class="token punctuation">,</span> <span class="token operator">--</span> 用户id   userName TEXT<span class="token punctuation">,</span> <span class="token operator">--</span>用户名   userPass TEXT<span class="token punctuation">,</span> <span class="token operator">--</span>password   userRole TEXT<span class="token punctuation">,</span> <span class="token operator">--</span> 用户身份   age INTEGER AS Int <span class="token operator">--</span> 年龄<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span> 创建索引CREATE INDEX user_name ON <span class="token function">User</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span> <span class="token punctuation">(</span><span class="token keyword">val</span> userName<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token keyword">val</span> userPass<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">val</span> userRole<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token keyword">val</span> age<span class="token operator">:</span>Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">--</span> 方法绑定，在生成的实体类中会以此名称作为该sql语句执行的方法名，提供给调用者insertUser<span class="token operator">:</span>INSERT OR REPLACE INTO  <span class="token function">User</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>userPass<span class="token punctuation">,</span>userRole<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>insertLoginUser<span class="token operator">:</span>INSERT OR REPLACE INTO User VALUES <span class="token operator">?</span><span class="token punctuation">;</span>queryById<span class="token operator">:</span>SELECT <span class="token operator">*</span> FROM User WHERE id <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>queryByName<span class="token operator">:</span>SELECT  <span class="token operator">*</span> FROM User  WHERE userName <span class="token operator">=</span> <span class="token operator">?</span><span class="token punctuation">;</span>queryAllUsers<span class="token operator">:</span>SELECT <span class="token operator">*</span> FROM User<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-SQLDelight-build结果-分析"><a href="#3-3-SQLDelight-build结果-分析" class="headerlink" title="3.3 SQLDelight build结果 分析"></a>3.3 SQLDelight build结果 分析</h4><img src="/blogs/images/kmm_simple_login_build.png" class="[SQLDelight build产物]" title="[SQLDelight build产物]"><blockquote><p>1.SQLDelight 插件会为我们生成LoginDatabase.kt 实体类 ，对应 build.gradle.kts中声明的Database名称 <br/></p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>login<span class="token punctuation">.</span>newInstance<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>login<span class="token punctuation">.</span>schema<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>Transacter<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>db<span class="token punctuation">.</span>SqlDriver<span class="token keyword">public</span> <span class="token keyword">interface</span> LoginDatabase <span class="token operator">:</span> Transacter <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">val</span> userQueries<span class="token operator">:</span> UserQueries      <span class="token keyword">public</span> <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">val</span> Schema<span class="token operator">:</span> SqlDriver<span class="token punctuation">.</span>Schema        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> LoginDatabase<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>schema         <span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>driver<span class="token operator">:</span> SqlDriver<span class="token punctuation">)</span><span class="token operator">:</span> LoginDatabase <span class="token operator">=</span> LoginDatabase<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2.SQLDelight 插件会为我们生成User.kt 实体类，对应User.sq中的 User表</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>Int<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>Long<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>String<span class="token keyword">public</span> <span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">val</span> id<span class="token operator">:</span> Long<span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token keyword">val</span> userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token keyword">val</span> userPass<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token keyword">val</span> userRole<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal multiline"><span class="token string">"""      |User [      |  id: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">id</span></span><span class="token string">      |  userName: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">userName</span></span><span class="token string">      |  userPass: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">userPass</span></span><span class="token string">      |  userRole: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">userRole</span></span><span class="token string">      |  age: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string">      |]      """</span></span><span class="token punctuation">.</span><span class="token function">trimMargin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3.SQLDelight 插件会为我们生成UserQueries.kt ,作为对 User.sq中sql语句的方法封装，方便我们调用</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>Query<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>Transacter<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>Any<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>Int<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>Long<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>String<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>Unit<span class="token keyword">public</span> <span class="token keyword">interface</span> UserQueries <span class="token operator">:</span> Transacter <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">></span> <span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">,</span> mapper<span class="token operator">:</span> <span class="token punctuation">(</span>  id<span class="token operator">:</span> Long<span class="token punctuation">,</span>  userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userPass<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userRole<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> Int<span class="token operator">?</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Query<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">queryById</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Query<span class="token operator">&lt;</span>User<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">></span> <span class="token function">queryByName</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> mapper<span class="token operator">:</span> <span class="token punctuation">(</span>  id<span class="token operator">:</span> Long<span class="token punctuation">,</span>  userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userPass<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userRole<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> Int<span class="token operator">?</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Query<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">queryByName</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Query<span class="token operator">&lt;</span>User<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">></span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span>mapper<span class="token operator">:</span> <span class="token punctuation">(</span>  id<span class="token operator">:</span> Long<span class="token punctuation">,</span>  userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userPass<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userRole<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> Int<span class="token operator">?</span>  <span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Query<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Query<span class="token operator">&lt;</span>User<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>  userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userPass<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  userRole<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> Int<span class="token operator">?</span>  <span class="token punctuation">)</span><span class="token operator">:</span> Unit    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">insertLoginUser</span><span class="token punctuation">(</span>User<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Unit<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4.SQLDelight插件会生成一个LoginDatabaseImpl.kt 实现类，作为真正的执行者 <br/><br>从下图中可以看到其实关于sql的执行，最终都是交给SqlDriver（在实例化时会根据平台传入平台特定的驱动）来现实的 <br/><br>也就是跟平台相关的实现统一交给平台底层，屏蔽了细节和复杂性，我们只需要关心上层统一接口的声明和使用</p></blockquote><img src="/blogs/images/kmm_simple_login_sqldelight.png" class="[SQLDelight build产物LoginDatabaseImpl]" title="[SQLDelight build产物LoginDatabaseImpl]"><h4 id="3-4-实现LoginDatabase-的实例化方法"><a href="#3-4-实现LoginDatabase-的实例化方法" class="headerlink" title="3.4 实现LoginDatabase 的实例化方法"></a>3.4 实现LoginDatabase 的实例化方法</h4><ul><li>SqlDriver 跟平台相关，我们通过expect-actual 机制来实现</li></ul><blockquote><p>首先在 commonMain 下面新建一个 DriverFactory</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>LoginDatabase<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>db<span class="token punctuation">.</span>SqlDriver<span class="token keyword">expect</span> <span class="token keyword">class</span> DriverFactory <span class="token punctuation">&#123;</span> <span class="token keyword">fun</span> <span class="token function">createDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SqlDriver <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>接下来在 androidMain 实现 DriverFactory</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>LoginDatabase<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>android<span class="token punctuation">.</span>AndroidSqliteDriver<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>db<span class="token punctuation">.</span>SqlDriver<span class="token keyword">actual</span> <span class="token keyword">class</span> <span class="token function">DriverFactory</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">createDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SqlDriver <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">AndroidSqliteDriver</span><span class="token punctuation">(</span>LoginDatabase<span class="token punctuation">.</span>Schema<span class="token punctuation">,</span>context<span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"login.db"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后在 iosMain 实现 DriverFactory</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>LoginDatabase<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>db<span class="token punctuation">.</span>SqlDriver<span class="token keyword">import</span> com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>sqldelight<span class="token punctuation">.</span>drivers<span class="token punctuation">.</span>native<span class="token punctuation">.</span>NativeSqliteDriver<span class="token keyword">actual</span> <span class="token keyword">class</span> DriverFactory <span class="token punctuation">&#123;</span>  <span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">createDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SqlDriver <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">NativeSqliteDriver</span><span class="token punctuation">(</span>LoginDatabase<span class="token punctuation">.</span>Schema<span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"login.db"</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>最后封装统一的数据库管理类 DatabaseManager</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>LoginDatabase<span class="token keyword">object</span> DatabaseManager <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">val</span> KEY <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"DatabaseManager"</span></span>    <span class="token keyword">private</span> <span class="token keyword">val</span> dbCache <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>LoginDatabase<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">initDatabase</span><span class="token punctuation">(</span>driverFactory<span class="token operator">:</span> DriverFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createDatabase</span><span class="token punctuation">(</span>driverFactory<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">createDatabase</span><span class="token punctuation">(</span>driverFactory<span class="token operator">:</span> DriverFactory<span class="token punctuation">)</span><span class="token operator">:</span> LoginDatabase <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> driver <span class="token operator">=</span> driverFactory<span class="token punctuation">.</span><span class="token function">createDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> db <span class="token operator">=</span> <span class="token function">LoginDatabase</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span>        dbCache<span class="token punctuation">[</span>KEY<span class="token punctuation">]</span> <span class="token operator">=</span> db        <span class="token keyword">return</span> db    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LoginDatabase<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> dbCache<span class="token punctuation">[</span>KEY<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * 登录用户存储     */</span>    <span class="token keyword">fun</span> <span class="token function">insertLoginUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       user<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">val</span> exitUser <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>userQueries<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">queryByName</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">executeAsOneOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exitUser <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> exitUser<span class="token punctuation">.</span>userName <span class="token operator">!=</span> it<span class="token punctuation">.</span>userName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>userQueries<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>userName<span class="token punctuation">,</span>it<span class="token punctuation">.</span>userPass<span class="token punctuation">,</span>it<span class="token punctuation">.</span>userRole<span class="token punctuation">,</span>it<span class="token punctuation">.</span>age<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-5-android平台使用使用LoginDatabase存储用户信息"><a href="#3-5-android平台使用使用LoginDatabase存储用户信息" class="headerlink" title="3.5 android平台使用使用LoginDatabase存储用户信息"></a>3.5 android平台使用使用LoginDatabase存储用户信息</h4><blockquote><p>Application 中初始化LoginDatabase</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>simpleloginandroid<span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Application<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token punctuation">.</span>DriverFactory<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token punctuation">.</span>createDatabase<span class="token keyword">import</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>login<span class="token punctuation">.</span>LoginDatabase<span class="token keyword">class</span> MainApp <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 数据库初始化</span>        DatabaseManager<span class="token punctuation">.</span><span class="token function">initDatabase</span><span class="token punctuation">(</span><span class="token function">DriverFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>登录页面将登录成功的用户信息进行存储</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>          binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>          <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>          binding<span class="token punctuation">.</span>btnLogin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span> view <span class="token operator">-></span>          <span class="token keyword">val</span> imm <span class="token operator">=</span> ContextCompat<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> InputMethodManager<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>imm <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              imm<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span>windowToken<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>           Snackbar<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"正在登录，请稍后..."</span></span><span class="token punctuation">,</span> Snackbar<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Action"</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> email <span class="token operator">=</span> binding<span class="token punctuation">.</span>etEmail<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> password <span class="token operator">=</span> binding<span class="token punctuation">.</span>etPassword<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span>               <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">val</span> job <span class="token operator">=</span> async <span class="token punctuation">&#123;</span> LoginService<span class="token punctuation">.</span><span class="token function">loginFromServer</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>                    <span class="token keyword">val</span> loginResult <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">handleLoginResult</span><span class="token punctuation">(</span>loginResult<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">fun</span> <span class="token function">handleLoginResult</span><span class="token punctuation">(</span>result<span class="token operator">:</span> LoginResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>HomeActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">val</span> user <span class="token operator">=</span> result<span class="token punctuation">.</span>user             DatabaseManager<span class="token punctuation">.</span><span class="token function">insertLoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             Snackbar<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>btnLogin<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">result<span class="token punctuation">.</span>msg</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> Snackbar<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Action"</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">val</span> databaseQueries <span class="token operator">=</span> <span class="token punctuation">(</span>application <span class="token keyword">as</span> MainApp<span class="token punctuation">)</span><span class="token punctuation">.</span>database<span class="token punctuation">.</span>userQueries             <span class="token keyword">val</span> exitUsers <span class="token operator">=</span> databaseQueries<span class="token punctuation">.</span><span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             exitUsers<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span>               Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"MainActivity"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"user=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">it<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>android 运行效果</li></ul><img src="/blogs/images/kmm_simple_login_jhon.jpg" class="[login page]" width="400" height="840" title="[login page]">  <img src="/blogs/images/kmm_simple_login_users.jpg" class="[users]" width="400" height="840" title="[users]"><img src="/blogs/images/kmm_simple_login_db.png" class="[login.db]" title="[login.db]"><h4 id="3-6-ios平台使用使用LoginDatabase存储用户信息"><a href="#3-6-ios平台使用使用LoginDatabase存储用户信息" class="headerlink" title="3.6 ios平台使用使用LoginDatabase存储用户信息"></a>3.6 ios平台使用使用LoginDatabase存储用户信息</h4><blockquote><p>在 App 中 初始化 LoginDatabase</p></blockquote><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> login<span class="token attribute atrule">@main</span><span class="token keyword">struct</span> <span class="token class-name">SimpleLoginIOSApp</span><span class="token punctuation">:</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@UIApplicationDelegateAdaptor</span><span class="token punctuation">(</span><span class="token class-name">MyAppDelegate</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token keyword">var</span> appDelegate        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 数据库初始化</span>        <span class="token class-name">DatabaseManager</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doInitDatabase</span><span class="token punctuation">(</span>driverFactory<span class="token punctuation">:</span> <span class="token class-name">DriverFactory</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"SimpleLoginIOSApp init() ... you can config sdk in here"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">Scene</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">WindowGroup</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>登录页面将登录成功的用户信息进行存储</p></blockquote><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> login<span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> userName<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"email"</span></span><span class="token punctuation">,</span>text<span class="token punctuation">:</span>$userName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token comment">/*@START_MENU_TOKEN@*/</span><span class="token punctuation">.</span>leading<span class="token comment">/*@END_MENU_TOKEN@*/</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">RoundedBorderTextFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token class-name">SecureField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"password"</span></span><span class="token punctuation">,</span>text<span class="token punctuation">:</span>$password<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">RoundedBorderTextFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"登录"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token comment">/*@START_MENU_TOKEN@*/</span><span class="token punctuation">.</span>center<span class="token comment">/*@END_MENU_TOKEN@*/</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"正在登录，请稍后..."</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"userName"</span></span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>userName<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"password"</span></span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span>        <span class="token function">loginSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">loginSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Thread.mian"</span></span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>isMainThread<span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token class-name">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> execute<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Thread.main"</span></span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>isMainThread<span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>        <span class="token keyword">let</span> loginResult<span class="token punctuation">:</span> <span class="token class-name">Void</span> <span class="token operator">=</span>  <span class="token class-name">LoginService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginFromServer</span><span class="token punctuation">(</span>userName<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span>userPassword<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>error<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">handleLogin</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">print</span><span class="token punctuation">(</span>error <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"unkown error"</span></span><span class="token punctuation">)</span>               <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"出错了"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"loginResult"</span></span><span class="token punctuation">,</span>loginResult<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">handleLogin</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> <span class="token class-name">LoginResult</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> result <span class="token operator">=</span> result<span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"login success ,user="</span></span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>user <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>                    <span class="token function">goToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">let</span> loginDatabase <span class="token operator">=</span> <span class="token class-name">DatabaseManager</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"handleLogin database="</span></span><span class="token punctuation">,</span>loginDatabase <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>                    <span class="token class-name">DatabaseManager</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertLoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> result<span class="token punctuation">.</span>user<span class="token punctuation">)</span>                    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token class-name">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> execute<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                       <span class="token function">readUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>msg <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">goToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token class-name">UIApplication</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>first<span class="token punctuation">&#123;</span>           window<span class="token punctuation">.</span>rootViewController <span class="token operator">=</span> <span class="token class-name">UIHostingController</span><span class="token punctuation">(</span>rootView<span class="token punctuation">:</span> <span class="token class-name">HomePageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           window<span class="token punctuation">.</span><span class="token function">makeKeyAndVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">readUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> loginDatabase <span class="token operator">=</span> <span class="token class-name">DatabaseManager</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loginDatabase <span class="token operator">!=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> records <span class="token operator">=</span> loginDatabase<span class="token operator">!</span><span class="token punctuation">.</span>userQueries<span class="token punctuation">.</span><span class="token function">queryAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeAsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"record"</span></span><span class="token punctuation">,</span>records<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ios 运行效果</li></ul><img src="/blogs/images/kmm_simple_login_ios_db.png" class="[ios login]" title="[ios login]"><p>至此，我们的第一个登录示例工程基本完成，使用Ktor网络库和SQLDelight数据库实现真实的网络请求和数据缓存，在login共享模块实现了统一登录的业务逻辑，在android平台和iOS平台只需要关心UI实现，底层业务逻辑复用。</p><h3 id="四-项目资料"><a href="#四-项目资料" class="headerlink" title="四 项目资料"></a>四 项目资料</h3><ul><li><a href="https://ytgit.hipac.cn/Wireless/common/kmmsimplelogin">KmmSimpleLogin Client</a></li><li><a href="https://ytgit.hipac.cn/Wireless/common/kmmloginserver">KmmSimpleLogin Server</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-KmmSimpleLogin示例工程搭建&quot;&gt;&lt;a href=&quot;#一-KmmSimpleLogin示例工程搭建&quot; class=&quot;headerlink&quot; title=&quot;一 KmmSimpleLogin示例工程搭建&quot;&gt;&lt;/a&gt;一 KmmSimpleLogin示例工程</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://allennzhang.github.io/blogs/categories/Kotlin/"/>
    
    
    <category term="kotlin" scheme="https://allennzhang.github.io/blogs/tags/kotlin/"/>
    
    <category term="跨平台" scheme="https://allennzhang.github.io/blogs/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="android" scheme="https://allennzhang.github.io/blogs/tags/android/"/>
    
    <category term="iOS" scheme="https://allennzhang.github.io/blogs/tags/iOS/"/>
    
    <category term="Ktor" scheme="https://allennzhang.github.io/blogs/tags/Ktor/"/>
    
    <category term="SQLDelight" scheme="https://allennzhang.github.io/blogs/tags/SQLDelight/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Multiplatform Mobile基础入门(二)</title>
    <link href="https://allennzhang.github.io/blogs/2022/06/08/kotlin-multiplatform-mobile-ji-chu-ru-men-er/"/>
    <id>https://allennzhang.github.io/blogs/2022/06/08/kotlin-multiplatform-mobile-ji-chu-ru-men-er/</id>
    <published>2022-06-08T06:02:00.000Z</published>
    <updated>2022-06-10T10:06:45.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-KmmSimpleLogin示例工程搭建"><a href="#一-KmmSimpleLogin示例工程搭建" class="headerlink" title="一 KmmSimpleLogin示例工程搭建"></a>一 KmmSimpleLogin示例工程搭建</h3><blockquote><p>上一节 <a href="https://allennzhang.github.io/blogs/2022/05/25/kotlin-multiplatform-mobile-ji-chu-ru-men-yi/">Kotlin Multiplatform Mobile基础入门(一)</a> <br/>介绍了Kotlin Multiplatform Mobile新建工程基础知识，本节主要通过登录示例工程来演示和说明</p></blockquote><h4 id="1-1-创建一个名为KmmSimpleLogin的多平台工程"><a href="#1-1-创建一个名为KmmSimpleLogin的多平台工程" class="headerlink" title="1.1 创建一个名为KmmSimpleLogin的多平台工程"></a>1.1 创建一个名为KmmSimpleLogin的多平台工程</h4><ul><li>通过 AndroidStudio—&gt;File—&gt;New—&gt;Project—&gt;Kotlin Multiplatform App 新建向导创建一个Kmm App</li></ul><img src="/blogs/images/kmm_simple_login_project.png" class="[KmmSimpleLogin示例工程]" title="[KmmSimpleLogin示例工程]"><ul><li>其中 login module为我们的共享模块</li></ul><h4 id="1-2-添加工程基础配置和依赖项"><a href="#1-2-添加工程基础配置和依赖项" class="headerlink" title="1.2 添加工程基础配置和依赖项"></a>1.2 添加工程基础配置和依赖项</h4><ul><li><p>工程依赖的插件配置</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>mpp<span class="token punctuation">.</span>KotlinNativeTargetplugins <span class="token punctuation">&#123;</span>   <span class="token comment">// 多平台插件（必选）</span>   <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"multiplatform"</span></span><span class="token punctuation">)</span>   <span class="token comment">// ios cocoapods 插件</span>   <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"native.cocoapods"</span></span><span class="token punctuation">)</span>   <span class="token comment">// kotlin 序列化-反序列化插件</span>   <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"plugin.serialization"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"1.6.21"</span></span>   <span class="token comment">// android lib 插件</span>   <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.library"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>android和iOS端目标平台配置</p></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> ktor_version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"2.0.0"</span></span>    <span class="token keyword">val</span> sqldelight_version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"1.5.3"</span></span>    <span class="token function">android</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> iosTarget<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">,</span> KotlinNativeTarget<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token operator">-></span> KotlinNativeTarget <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">&#123;</span>    System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"SDK_NAME"</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"iphoneos"</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">-></span>  <span class="token operator">::</span>iosArm64    System<span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"NATIVE_ARCH"</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"arm"</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">-></span>  <span class="token operator">::</span>iosSimulatorArm64    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token operator">::</span>iosX64    <span class="token punctuation">&#125;</span>    <span class="token comment">// ios 支持 真机，模拟器</span>    <span class="token function">iosTarget</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"ios"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// cocoapods 配置项</span>    cocoapods <span class="token punctuation">&#123;</span>        summary <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Some description for the Shared Module"</span></span>        homepage <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Link to the Shared Module homepage"</span></span>        ios<span class="token punctuation">.</span>deploymentTarget <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"14.1"</span></span>        framework <span class="token punctuation">&#123;</span>            baseName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"login"</span></span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>源码集及依赖项配置</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">kotlin <span class="token punctuation">&#123;</span>    sourceSets <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> commonMain <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"</span></span><span class="token punctuation">)</span>                <span class="token comment">// ktor  网络库</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-core:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// ktor plugin Logging</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-logging:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// logger</span>                <span class="token function">implementation</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.github.aakira:napier:2.6.1"</span></span><span class="token punctuation">)</span>                <span class="token comment">// Serialization  kotlin-serialization</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-serialization-core:1.3.2"</span></span><span class="token punctuation">)</span>                <span class="token comment">//Serialization  kotlin-protobuf</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.3.2"</span></span><span class="token punctuation">)</span>                <span class="token comment">// json</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-serialization-kotlinx-json:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token function">implementation</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-network:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// kotlin-datetime</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-datetime:0.3.2"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> commonTest <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"test"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> androidMain <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token comment">// android 平台使用okhttp 网络引擎</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-okhttp:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// android 平台协程 </span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"</span></span><span class="token punctuation">)</span>                <span class="token comment">// android 平台 sqlite 驱动</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.squareup.sqldelight:android-driver:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">sqldelight_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> androidTest <span class="token keyword">by</span> getting        <span class="token keyword">val</span> iosMain <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            <span class="token function">dependsOn</span><span class="token punctuation">(</span>commonMain<span class="token punctuation">)</span>            dependencies <span class="token punctuation">&#123;</span>                <span class="token comment">// ios 平台 网络引擎</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"io.ktor:ktor-client-darwin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">ktor_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token comment">// ios sqlite 驱动</span>                <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.squareup.sqldelight:native-driver:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">sqldelight_version</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">val</span> iosTest <span class="token keyword">by</span> getting <span class="token punctuation">&#123;</span>            <span class="token function">dependsOn</span><span class="token punctuation">(</span>commonTest<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二-实现登录业务逻辑"><a href="#二-实现登录业务逻辑" class="headerlink" title="二 实现登录业务逻辑"></a>二 实现登录业务逻辑</h3><h4 id="2-1-在commonMain-kotlin-package下新建-LoginDataValidator工具类"><a href="#2-1-在commonMain-kotlin-package下新建-LoginDataValidator工具类" class="headerlink" title="2.1 在commonMain kotlin package下新建 LoginDataValidator工具类"></a>2.1 在commonMain kotlin package下新建 LoginDataValidator工具类</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> LoginDataValidator <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * 校验 登录用户输入账号密码的合法性     */</span>    <span class="token keyword">fun</span> <span class="token function">verify</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> userPassword<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> Pair<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userName<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"用户名不能为空"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userPassword<span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"密码不能为空"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"校验通过"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-在commonMain-kotlin-package下新建登录结果数据模型-LoginResult-和-User"><a href="#2-2-在commonMain-kotlin-package下新建登录结果数据模型-LoginResult-和-User" class="headerlink" title="2.2 在commonMain kotlin package下新建登录结果数据模型 LoginResult 和 User"></a>2.2 在commonMain kotlin package下新建登录结果数据模型 LoginResult 和 User</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>hipac<span class="token punctuation">.</span>hello<span class="token punctuation">.</span>compose<span class="token punctuation">.</span>login<span class="token punctuation">.</span>model<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>serialization<span class="token punctuation">.</span>Serializable<span class="token annotation builtin">@Serializable</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span><span class="token keyword">val</span> success<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token keyword">val</span> user<span class="token operator">:</span> User<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">val</span> linkUrl<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> <span class="token keyword">val</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">fun</span> <span class="token function">loginSuccess</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">User</span><span class="token punctuation">(</span>userName <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"manager"</span></span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"http://www.baidu.com"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"success"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">fun</span> <span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">User</span><span class="token punctuation">(</span>userName <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"http://www.baidu.com"</span></span><span class="token punctuation">,</span>msg <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"用户名或者密码错误"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">fun</span> <span class="token function">convert</span><span class="token punctuation">(</span>model<span class="token operator">:</span> BaseResponse<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">LoginResult</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>success <span class="token operator">?:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>model<span class="token punctuation">.</span>            <span class="token keyword">data</span><span class="token punctuation">,</span> linkUrl <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"http://www.baidu.com"</span></span><span class="token punctuation">,</span> msg <span class="token operator">=</span> model<span class="token punctuation">.</span>message <span class="token operator">?:</span> <span class="token string-literal singleline"><span class="token string">"unknown"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation builtin">@Serializable</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> userName<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token keyword">val</span> userPass<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">val</span> userRole<span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token keyword">val</span> age<span class="token operator">:</span>Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-在commonMain-kotlin-package下新建LoginService-实现登录功能"><a href="#2-3-在commonMain-kotlin-package下新建LoginService-实现登录功能" class="headerlink" title="2.3 在commonMain kotlin package下新建LoginService 实现登录功能"></a>2.3 在commonMain kotlin package下新建LoginService 实现登录功能</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> LoginService <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> tag <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"LoginService"</span></span>    <span class="token keyword">val</span> taskPool <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> Unit<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">/**     * 模拟登录，账号密码合法性校验通过，直接返回结果     */</span>    <span class="token keyword">fun</span> <span class="token function">login</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> userPassword<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> validator <span class="token operator">=</span> LoginDataValidator<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> userPassword<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>validator<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            LoginResult<span class="token punctuation">.</span><span class="token function">loginSuccess</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            LoginResult<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> validator<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 模拟网络请求登录，延迟3s后返回结果，该函数是suspend函数，通过异步执行     */</span>    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">loginAsync</span><span class="token punctuation">(</span>userName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> userPassword<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> LoginResult <span class="token punctuation">&#123;</span>        <span class="token comment">// 模拟耗时任务</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> validator <span class="token operator">=</span> LoginDataValidator<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> userPassword<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>validator<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            LoginResult<span class="token punctuation">.</span><span class="token function">loginSuccess</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            LoginResult<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> validator<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 模拟添加任务，并执行任务返回执行结果     */</span>    <span class="token keyword">fun</span> <span class="token function">doWork</span><span class="token punctuation">(</span>taskId<span class="token operator">:</span> Int<span class="token punctuation">,</span> task <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> Unit<span class="token punctuation">,</span> callback<span class="token operator">:</span> ServiceCallBack<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LoginService<span class="token punctuation">.</span>taskPool<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">taskId</span></span><span class="token string">"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> task        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            callback<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">workDone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Napier<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"doWork() error=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">e</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> tag <span class="token operator">=</span> tag<span class="token punctuation">)</span>            callback<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">workDone</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> e        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> ServiceCallBack <span class="token punctuation">&#123;</span>        <span class="token keyword">fun</span> <span class="token function">workDone</span><span class="token punctuation">(</span>success<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>本节中，我们暂时没有引入网络库的概念，所以通过延时来模拟登录过程</li></ul><h3 id="三-实现android和iOS平台UI开发和模拟登录"><a href="#三-实现android和iOS平台UI开发和模拟登录" class="headerlink" title="三 实现android和iOS平台UI开发和模拟登录"></a>三 实现android和iOS平台UI开发和模拟登录</h3><h4 id="3-1-实现android平台登录界面UI"><a href="#3-1-实现android平台登录界面UI" class="headerlink" title="3.1  实现android平台登录界面UI"></a>3.1  实现android平台登录界面UI</h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> appBarConfiguration<span class="token operator">:</span> AppBarConfiguration    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> binding<span class="token operator">:</span> ActivityMainBinding    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        binding <span class="token operator">=</span> ActivityMainBinding<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>root<span class="token punctuation">)</span>        binding<span class="token punctuation">.</span>btnLogin<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span> view <span class="token operator">-></span>            Snackbar<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"正在登录，请稍后..."</span></span><span class="token punctuation">,</span> Snackbar<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Action"</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> email <span class="token operator">=</span> binding<span class="token punctuation">.</span>etEmail<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> password <span class="token operator">=</span> binding<span class="token punctuation">.</span>etPassword<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">&#123;</span>                <span class="token comment">// IO线程发起登录 </span>                <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">val</span> loginJob <span class="token operator">=</span> async<span class="token operator">&lt;</span>LoginResult<span class="token operator">></span> <span class="token punctuation">&#123;</span>                        LoginService<span class="token punctuation">.</span><span class="token function">loginAsync</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span>password<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">val</span> loginResult <span class="token operator">=</span> loginJob<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">// 主线程处理登录结果</span>                        <span class="token function">handleLoginResult</span><span class="token punctuation">(</span>loginResult<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fun</span> <span class="token function">handleLoginResult</span><span class="token punctuation">(</span>result<span class="token operator">:</span> LoginResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">startActivity</span><span class="token punctuation">(</span><span class="token function">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>HomeActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            Snackbar<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>btnLogin<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">result<span class="token punctuation">.</span>msg</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> Snackbar<span class="token punctuation">.</span>LENGTH_LONG<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Action"</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-实现iOS平台登录界面UI"><a href="#3-1-实现iOS平台登录界面UI" class="headerlink" title="3.1  实现iOS平台登录界面UI"></a>3.1  实现iOS平台登录界面UI</h4><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> login<span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> userName<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">""</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"email"</span></span><span class="token punctuation">,</span>text<span class="token punctuation">:</span>$userName<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">multilineTextAlignment</span><span class="token punctuation">(</span><span class="token comment">/*@START_MENU_TOKEN@*/</span><span class="token punctuation">.</span>leading<span class="token comment">/*@END_MENU_TOKEN@*/</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">RoundedBorderTextFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token class-name">SecureField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"password"</span></span><span class="token punctuation">,</span>text<span class="token punctuation">:</span>$password<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">textFieldStyle</span><span class="token punctuation">(</span><span class="token class-name">RoundedBorderTextFieldStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"登录"</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> alignment<span class="token punctuation">:</span> <span class="token comment">/*@START_MENU_TOKEN@*/</span><span class="token punctuation">.</span>center<span class="token comment">/*@END_MENU_TOKEN@*/</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">cornerRadius</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                   <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>all<span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">func</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"正在登录，请稍后..."</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"userName"</span></span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>userName<span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"password"</span></span><span class="token punctuation">,</span><span class="token keyword">self</span><span class="token punctuation">.</span>password<span class="token punctuation">)</span>        <span class="token function">loginSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">loginSuspend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Thread.mian"</span></span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>isMainThread<span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token class-name">DispatchTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">,</span> execute<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Thread.main"</span></span><span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>isMainThread<span class="token punctuation">,</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>current<span class="token punctuation">)</span>        <span class="token keyword">let</span> loginResult<span class="token punctuation">:</span> <span class="token class-name">Void</span> <span class="token operator">=</span>  <span class="token class-name">LoginService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loginAsync</span><span class="token punctuation">(</span>userName<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>userName<span class="token punctuation">,</span>userPassword<span class="token punctuation">:</span><span class="token keyword">self</span><span class="token punctuation">.</span>password<span class="token punctuation">,</span> completionHandler<span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>error<span class="token punctuation">)</span> <span class="token keyword">in</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">handleLogin</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token function">print</span><span class="token punctuation">(</span>error <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"unkown error"</span></span><span class="token punctuation">)</span>               <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span><span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span> <span class="token string-literal"><span class="token string">"出错了"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"loginResult"</span></span><span class="token punctuation">,</span>loginResult<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">handleLogin</span><span class="token punctuation">(</span>result<span class="token punctuation">:</span> <span class="token class-name">LoginResult</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token keyword">let</span> result <span class="token operator">=</span> result<span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"login success ,user="</span></span><span class="token punctuation">,</span>result<span class="token punctuation">.</span>user <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>                    <span class="token function">goToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>msg <span class="token operator">??</span> <span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">func</span> <span class="token function-definition function">goToHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token class-name">UIApplication</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>first<span class="token punctuation">&#123;</span>           window<span class="token punctuation">.</span>rootViewController <span class="token operator">=</span> <span class="token class-name">UIHostingController</span><span class="token punctuation">(</span>rootView<span class="token punctuation">:</span> <span class="token class-name">HomePageView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           window<span class="token punctuation">.</span><span class="token function">makeKeyAndVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-login-framework-分析"><a href="#3-2-login-framework-分析" class="headerlink" title="3.2  login.framework 分析"></a>3.2  login.framework 分析</h4><ul><li>我们在login module commonMain下的LoginService 中 分别声明了 3个函数方法：</li></ul><blockquote><p> fun login(userName: String?, userPassword: String?): LoginResult  <br/><br>该方法是一个普通方法，同步返回结果</p></blockquote><blockquote><p> suspend fun loginAsync(userName: String?, userPassword: String?): LoginResult <br/></p><p>该方法是一个挂起函数，接受两个参数userName，userPassword <br/></p><p>在android中配合协程使用可以直接通过 val loginJob &#x3D; async<LoginResult> { LoginService.loginAsync(email,password)}<br>val loginResult &#x3D; loginJob.await() 来获取结果  <br/></p><p>在iOS中，suspend函数对应的会在函数参数的末尾位置，显示的声明一个completionHandler，类型为(LoginResult?, Error?) -&gt; Void的callback 来接收回调结果 <br/></p><p>在iOS中启动suspend函数（启动协程）默认要在主线程中启动</p></blockquote><blockquote><p> fun doWork(taskId: Int, task : ()-&gt; Unit, callback: ServiceCallBack?) <br/></p><p>该方法是一个普通方法，最后一个参数为callback类型，通过callback异步接收回调结果</p></blockquote><img src="/blogs/images/kmm_simple_login_ios_framework.png" class="[KmmSimpleLogin-login.framework]" title="[KmmSimpleLogin-login.framework]"><h3 id="四-运行效果"><a href="#四-运行效果" class="headerlink" title="四 运行效果"></a>四 运行效果</h3><h4 id="4-1-android平台登录"><a href="#4-1-android平台登录" class="headerlink" title="4.1 android平台登录"></a>4.1 android平台登录</h4><img src="/blogs/images/kmm_simple_login_android.jpg" class="[KmmSimpleLogin-Android]" width="400" height="600" title="[KmmSimpleLogin-Android]"><h4 id="4-2-iOS平台登录"><a href="#4-2-iOS平台登录" class="headerlink" title="4.2 iOS平台登录"></a>4.2 iOS平台登录</h4><img src="/blogs/images/kmm_simple_login_ios.png" class="[KmmSimpleLogin-iOS]" title="[KmmSimpleLogin-iOS]"><p>至此，我们的第一个登录示例工程基本完成，在login共享模块实现了统一登录的业务逻辑，在android平台和iOS平台只需要关心UI实现，底层业务逻辑复用。下一个例子我们将实现网络请求功能，进行真实请求和业务处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-KmmSimpleLogin示例工程搭建&quot;&gt;&lt;a href=&quot;#一-KmmSimpleLogin示例工程搭建&quot; class=&quot;headerlink&quot; title=&quot;一 KmmSimpleLogin示例工程搭建&quot;&gt;&lt;/a&gt;一 KmmSimpleLogin示例工程</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://allennzhang.github.io/blogs/categories/Kotlin/"/>
    
    
    <category term="kotlin" scheme="https://allennzhang.github.io/blogs/tags/kotlin/"/>
    
    <category term="跨平台" scheme="https://allennzhang.github.io/blogs/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="android" scheme="https://allennzhang.github.io/blogs/tags/android/"/>
    
    <category term="iOS" scheme="https://allennzhang.github.io/blogs/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Multiplatform Mobile基础入门(一)</title>
    <link href="https://allennzhang.github.io/blogs/2022/05/25/kotlin-multiplatform-mobile-ji-chu-ru-men-yi/"/>
    <id>https://allennzhang.github.io/blogs/2022/05/25/kotlin-multiplatform-mobile-ji-chu-ru-men-yi/</id>
    <published>2022-05-25T10:02:00.000Z</published>
    <updated>2022-06-09T08:35:38.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-KMM-项目结构"><a href="#一-KMM-项目结构" class="headerlink" title="一 KMM 项目结构"></a>一 KMM 项目结构</h3><ul><li>KMM工程结构<img src="/blogs/images/kmm_project.png" class="[KMM工程结构]" title="[KMM工程结构]"></li></ul><p>一个基本的 Kotlin 移动多平台项目由三个组件组成：</p><ul><li><p>共享模块——一个 Kotlin 模块，包含 Android 和 iOS 应用程序的通用逻辑。内置于 Android 库和 iOS 框架中。使用 Gradle 作为构建系统。</p></li><li><p>Android 应用程序– 一个内置于 Android 应用程序的 Kotlin 模块。使用 Gradle 作为构建系统。</p></li><li><p>iOS 应用程序– 一个内置到 iOS 应用程序中的 Xcode 项目</p></li><li><p>KMM工程依赖关系</p></li></ul><img src="/blogs/images/kmm_project_struct.png" class="[KMM工程依赖关系]" title="[KMM工程依赖关系]"><h3 id="二共享模块"><a href="#二共享模块" class="headerlink" title="二共享模块"></a>二共享模块</h3><img src="/blogs/images/kotlin-multiplatofrm-hierarchical-structure.png" class="[KMM共享库多平台配置]" title="[KMM共享库多平台配置]"><blockquote><p>共享模块包含两个目标平台中使用的核心应用程序逻辑：类、函数等。这是一个编译成 Android 库和 iOS 框架的Kotlin 多平台模块。它使用 Gradle 并应用了 Kotlin 多平台插件，并具有适用于 Android 和 iOS 的目标</p></blockquote><img src="/blogs/images/kmm_common_gradle.png" class="[KMM共享库gradle配置]" title="[KMM共享库gradle配置]"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// kmm module build.gradle.kts</span>plugins <span class="token punctuation">&#123;</span><span class="token comment">// kmm插件，用于跨平台构建</span><span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"multiplatform"</span></span><span class="token punctuation">)</span><span class="token comment">// 生成android依赖库aar</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.library"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="源集"><a href="#源集" class="headerlink" title="源集"></a>源集</h4><blockquote><p>共享模块包含 Android 和 iOS 应用程序通用的代码。但是，要在 Android 和 iOS 上实现相同的逻辑，您有时需要编写两个特定于平台的版本。为了处理这种情况，Kotlin 提供了期望&#x2F;实际机制。共享模块的源代码相应地组织在三个源集中：</p></blockquote><ul><li><p>commonMain存储适用于两个平台的代码，包括expect声明</p></li><li><p>androidMain存储特定于 Android 的部分，包括actual实现</p></li><li><p>iosMain存储 iOS 特定的部分，包括actual实现</p></li></ul><p>每个源集都有自己的依赖项。Kotlin 标准库会自动添加到所有源代码集中，您无需在构建脚本中声明它</p><h4 id="测试源集"><a href="#测试源集" class="headerlink" title="测试源集"></a>测试源集</h4><p>除了*Main源集，还有三个匹配的测试源集：</p><ul><li><p>commonTest</p></li><li><p>androidTest</p></li><li><p>iosTest</p></li></ul><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><h4 id="android"><a href="#android" class="headerlink" title="android"></a>android</h4><blockquote><p>androidApp中通过直接配置shared module作为依赖项，引入并参与android项目构建</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// app.gradle</span>dependencies <span class="token punctuation">&#123;</span><span class="token comment">// 引入共享模块</span>implementation <span class="token function">project</span><span class="token punctuation">(</span>'<span class="token operator">:</span>shared'<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><img src="/blogs/images/basic-xcode-project.png" class="[KMM-iOSApp结构]" title="[KMM-iOSApp结构]"><blockquote><p>对于 iOS 应用程序的每次构建，项目都会获取最新版本的框架。为此，它使用了一个运行脚本embedAndSignAppleFrameworkForXcode构建阶段，该阶段从共享模块执行Gradle 任务。此任务.framework根据 Xcode 环境设置生成具有所需配置的文件，并将工件放入DerivedDataXcode 目录</p></blockquote><ul><li><p>如果您有 Apple 框架的自定义名称，请embedAndSign<Custom-name>AppleFrameworkForXcode用作此 Gradle 任务的名称。</p></li><li><p>如果您的自定义构建配置不同于默认的Debug or Release，请在Build Settings选项卡上，在User-DefinedKOTLIN_FRAMEWORK_BUILD_TYPE下添加设置并将其设置为 Debug  or Release</p></li></ul><h3 id="三-在已有项目中添加KMM共享模块"><a href="#三-在已有项目中添加KMM共享模块" class="headerlink" title="三 在已有项目中添加KMM共享模块"></a>三 在已有项目中添加KMM共享模块</h3><blockquote><p>在AndroidStudio 中新建一个KMM Module: File—New—Module—Kotlin Multiplatform Shared Module</p></blockquote><img src="/blogs/images/multiplatform-mobile-module-wizard.png" class="[新建KMM Module]" title="[新建KMM Module]"><h4 id="android项目中集成kmm"><a href="#android项目中集成kmm" class="headerlink" title="android项目中集成kmm"></a>android项目中集成kmm</h4><ol><li><p>在业务模块引入共享库依赖</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// app.gradle</span>dependencies <span class="token punctuation">&#123;</span><span class="token comment">// 引入共享模块</span>implementation <span class="token function">project</span><span class="token punctuation">(</span>'<span class="token operator">:</span>shared'<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导包即可使用</p></li></ol><h4 id="iOS项目中集成kmm"><a href="#iOS项目中集成kmm" class="headerlink" title="iOS项目中集成kmm"></a>iOS项目中集成kmm</h4><ol><li><p>在项目设置的Build Phases选项卡上，单击+并添加New Run Script Phase</p><img src="/blogs/images/xcode-run-script-phase-1.png" class="[iOS项目集成KMM Module step1]" title="[iOS项目集成KMM Module step1]"></li><li><p>添加以下脚本：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">cd <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">SRCROOT</span></span><span class="token string">/.."</span></span> <span class="token comment">// 注意这里如果是以cocoapods 方式新建的kmm，此处需要修改为：embedAndSignPodAppleFrameworkForXcode</span><span class="token punctuation">.</span><span class="token operator">/</span>gradlew <span class="token operator">:</span>shared<span class="token operator">:</span>embedAndSignAppleFrameworkForXcode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/blogs/images/xcode-add-run-phase-2.png" class="[iOS项目集成KMM Module step2]" title="[iOS项目集成KMM Module step2]"></li><li><p>将Run Script阶段移到 Compile Sources阶段之前</p><img src="/blogs/images/xcode-run-script-phase-3.png" class="[iOS项目集成KMM Module step3]" title="[iOS项目集成KMM Module step3]"></li><li><p>在Build Settings选项卡上，切换到All build settings 并在Search Paths下指定Framework Search Path</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 注意shared 为kmm module名称</span>$<span class="token punctuation">(</span>SRCROOT<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">..</span><span class="token operator">/</span>shared<span class="token operator">/</span>build<span class="token operator">/</span>xcode<span class="token operator">-</span>frameworks<span class="token operator">/</span>$<span class="token punctuation">(</span>CONFIGURATION<span class="token punctuation">)</span><span class="token operator">/</span>$<span class="token punctuation">(</span>SDK_NAME<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/blogs/images/xcode-add-framework-search-path.png" class="[iOS项目集成KMM Module step4]" title="[iOS项目集成KMM Module step4]"></li><li><p>在Build Settings选项卡上，在Linking下指定Other Linker 标志</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 注意shared 为kmm module名称</span>$<span class="token punctuation">(</span>inherited<span class="token punctuation">)</span> <span class="token operator">-</span>framework shared<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/blogs/images/xcode-add-flag.png" class="[iOS项目集成KMM Module step5]" title="[iOS项目集成KMM Module step5]"></li></ol><blockquote><p>如果您的自定义构建配置不同于默认的Debugor Release，请在Build Settings选项卡上，在User-DefinedKOTLIN_FRAMEWORK_BUILD_TYPE下添加设置并将其设置为 Debug or DebugRelease</p></blockquote><ol start="6"><li>导入共享模块即可使用</li></ol><blockquote><p><a href="https://kotlinlang.org/docs/multiplatform-mobile-ios-dependencies.html#add-a-framework-without-cocoapods">关于iOS项目依赖配置说明</a></p></blockquote><h4 id="iOS集成过程中常见错误"><a href="#iOS集成过程中常见错误" class="headerlink" title="iOS集成过程中常见错误"></a>iOS集成过程中常见错误</h4><blockquote><p>kmm中使用了 kotlin协程 suspend 函数，则在swift&#x2F;Object-C在只能在主线程调用，否则报以下错误:</p></blockquote><img src="/blogs/images/kmm_suspend_error.png" class="[suspend function error in swift]" title="[suspend function error in swift]"><blockquote><p>在主线程执行 kmm suspend函数，注意 启动协程需要自定义CoroutineDispatcher，并且通过dispatch_async(dispatch_get_main_queue())来执行任务，<br>否则会报错：There is no event loop. Use runBlocking { … } to start one</p></blockquote><ul><li>解决方案：<a href="https://github.com/Kotlin/kotlinx.coroutines/issues/470">Default dispatcher and UI dispatcher support for iOS</a></li></ul><h3 id="四-连接到特定平台的API-expect-actual机制"><a href="#四-连接到特定平台的API-expect-actual机制" class="headerlink" title="四 连接到特定平台的API (expect-actual机制)"></a>四 连接到特定平台的API (expect-actual机制)</h3><blockquote><p>KMM 提供了一种expect-actual机制，使用这种机制，公共源集定义了预期声明，平台源集必须提供与预期声明相对应的实际声明。这适用于大多数 Kotlin 声明，例如函数、类、接口、枚举、属性和注释<br>编译器确保expect公共模块中的每个用关键字标记的声明actual在所有平台模块中都有相应的用关键字标记的声明</p></blockquote><img src="/blogs/images/expect-actual.png" class="[expect-actual机制]" title="[expect-actual机制]"><h4 id="expect-actual机制的一些原则："><a href="#expect-actual机制的一些原则：" class="headerlink" title="expect-actual机制的一些原则："></a>expect-actual机制的一些原则：</h4><ul><li><p>预期的声明用expect关键字标记；实际声明用actual关键字标记。</p></li><li><p>expect和actual声明具有相同的名称并位于同一个包中（具有相同的完全限定名称）。</p></li><li><p>expect声明从不包含任何实现代码，默认情况下是抽象的。</p></li><li><p>在接口中，expect声明中的函数不能有主体，但它们的actual对应物可以是非抽象的并且有主体。它允许继承者不实现特定功能。</p></li><li><p>表示普通继承者不需要实现函数，将其标记为open. 它的所有actual实现都需要有一个主体</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Common</span><span class="token keyword">expect</span> <span class="token keyword">interface</span> Mascot <span class="token punctuation">&#123;</span><span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token keyword">class</span> MascotImpl <span class="token operator">:</span> Mascot <span class="token punctuation">&#123;</span><span class="token comment">// it's ok not to implement `display()`: all `actual`s are guaranteed to have a default implementation</span><span class="token punctuation">&#125;</span><span class="token comment">// Platform-specific</span><span class="token keyword">actual</span> <span class="token keyword">interface</span> Mascot <span class="token punctuation">&#123;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>如果您想要在共享代码中使用特定于平台的库，同时为另一个平台提供您自己的实现，您可以提供一个typealias现有类作为实际声明</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Common</span><span class="token keyword">expect</span> <span class="token keyword">class</span> AtomicRef<span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token operator">:</span> V<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> V<span class="token keyword">fun</span> <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">getAndSet</span><span class="token punctuation">(</span>value<span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token operator">:</span> V<span class="token keyword">fun</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">expect</span><span class="token operator">:</span> V<span class="token punctuation">,</span> update<span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token operator">:</span> Boolean<span class="token punctuation">&#125;</span><span class="token comment">// Platform-Java</span><span class="token keyword">actual</span> <span class="token keyword">typealias</span> AtomicRef<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token operator">&lt;</span>V<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/blogs/images/expect-actual-example.png" class="[expect-actual示例]" title="[expect-actual示例]">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-KMM-项目结构&quot;&gt;&lt;a href=&quot;#一-KMM-项目结构&quot; class=&quot;headerlink&quot; title=&quot;一 KMM 项目结构&quot;&gt;&lt;/a&gt;一 KMM 项目结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;KMM工程结构&lt;img src=&quot;/blogs/images/k</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://allennzhang.github.io/blogs/categories/Kotlin/"/>
    
    
    <category term="kotlin" scheme="https://allennzhang.github.io/blogs/tags/kotlin/"/>
    
    <category term="跨平台" scheme="https://allennzhang.github.io/blogs/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="android" scheme="https://allennzhang.github.io/blogs/tags/android/"/>
    
    <category term="iOS" scheme="https://allennzhang.github.io/blogs/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Multiplatform Mobile简介</title>
    <link href="https://allennzhang.github.io/blogs/2022/05/24/kotlin-multiplatform-mobile-jian-jie/"/>
    <id>https://allennzhang.github.io/blogs/2022/05/24/kotlin-multiplatform-mobile-jian-jie/</id>
    <published>2022-05-24T10:02:00.000Z</published>
    <updated>2022-09-01T02:44:24.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-什么是KMM"><a href="#一-什么是KMM" class="headerlink" title="一 什么是KMM"></a>一 什么是KMM</h3><blockquote><p>Kotlin Multiplatform Mobile (KMM) 是 JetBrains 提供的跨平台移动开发 SDK。 它使用 Kotlin 的多平台功能 ，包含各种工具和功能，旨在使移动跨平台应用程序的端到端构建体验尽可能愉快和高效</p></blockquote><blockquote><p>应用程序的 Android 和 iOS 版本通常有很多共同点，但也会有很大不同 – 尤其在 UI 方面 – 无论是滚动行为的微妙变化，还是迥异的导航逻辑。 同时，应用程序的业务逻辑，包括数据管理、分析和认证等功能，往往是相同的。 因此，标准操作是跨平台共享应用程序的某些部分，同时保持其他部分完全相互独立</p></blockquote><blockquote><p>通过 KMM，您可以获得这种灵活性，并保留原生编程的优势。 将单个代码库用于 iOS 和 Android 应用的业务逻辑，只在实施原生 UI 有必要时或使用平台特定 API 时编写平台特定代码</p></blockquote><img src="/blogs/images/KMM-release-scheme_Blogpost.jpeg" class="[KMM共享]" title="[KMM共享]"><blockquote><p>KMM 与您的移动项目无缝集成。 Kotlin 编写的共享代码通过 Kotlin&#x2F;JVM 编译为 JVM 字节码，经 Kotlin&#x2F;Native 编译为原生二进制文件，因此您可以像使用其他常规移动库一样使用 KMM 业务逻辑模块</p></blockquote><blockquote><p><a href="https://blog.jetbrains.com/zh-hans/kotlin/2020/09/kotlin-multiplatform-mobile-alpha/">更多关于KMM的介绍</a></p></blockquote><h3 id="二-KMM-跨端原理"><a href="#二-KMM-跨端原理" class="headerlink" title="二 KMM 跨端原理"></a>二 KMM 跨端原理</h3><blockquote><p>Kotlin&#x2F;Native 是一种将 Kotlin 代码编译为无需虚拟机就可运行的原生二进制文件的技术。 它是一个基于 <a href="https://llvm.org/">LLVM</a> 的 Kotlin 编译器后端以及 Kotlin 标准库的原生实现<br><a href="https://www.jianshu.com/p/1367dad95445LLVM">深入浅出让你理解什么是LLVM</a></p></blockquote><img src="/blogs/images/LLVM.jpg" class="[LLVM架构]" title="[LLVM架构]"><blockquote><p><a href="https://www.kotlincn.net/docs/reference/native-overview.html">Kotlin&#x2F;Native原生开发</a></p></blockquote><h4 id="目标平台"><a href="#目标平台" class="headerlink" title="目标平台"></a>目标平台</h4><ul><li>iOS（arm32、 arm64、 模拟器 x86_64）</li><li>macOS（x86_64）</li><li>watchOS (arm32、 arm64、 x86)</li><li>tvOS (arm64、 x86_64)</li><li>Android（arm32、arm64、 x86、 x86_64）</li><li>Windows（mingw x86_64、 x86）</li><li>Linux（x86_64、 arm32、 arm64、 MIPS、 MIPS 小端次序）</li><li>WebAssembly（wasm32）</li></ul><img src="/blogs/images/kotlin-multiplatform.png" class="[Kotlin跨平台原理]" title="[Kotlin跨平台原理]"><h3 id="三-如何使用KMM进行开发"><a href="#三-如何使用KMM进行开发" class="headerlink" title="三 如何使用KMM进行开发"></a>三 如何使用KMM进行开发</h3><blockquote><p>环境要求</p></blockquote><ul><li>安装Android Studio 4.2 或 2020.3.1 Canary 8 或更高版本</li><li>安装Xcode – 11.3 或更高版本</li></ul><blockquote><p><a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile">适用于 Android Studio 的 KMM 插件</a></p></blockquote><blockquote><p>1.在Android Studio 中请选择 Preferences | Plugins，在 Marketplace 中搜索 Kotlin Multiplatform Mobile，然后进行安装，之后即可在Android Studio编写、运行、测试和调试共享代码，而无需切换到其他 IDE。</p></blockquote><blockquote><p>使用新插件，您可以直接在 Android Studio 中整合 iOS 设备和模拟器。 这将提供以下功能：</p></blockquote><ul><li>使用预定义运行配置，在模拟器或设备上运行和调试 iOS 应用程序。</li><li>在 iOS 模拟器上运行和调试常见测试和 iOS 特定测试</li></ul><blockquote><p>2.借助 New Kotlin Multiplatform Mobile Project 向导，就可以通过共享代码库创建随时可运行的移动应用程序项目。选择对应的品台(android&#x2F;iOS)点击Run即可运行和调试</p></blockquote><ul><li><p>step1 AndroidStudio—File—New—Project</p><img src="/blogs/images/multiplatform-mobile-project-wizard-1.png" class="[New KMM Project step1]" title="[New KMM Project step1]"></li><li><p>step2 工程名称及目录配置</p><img src="/blogs/images/multiplatform-mobile-project-wizard-2.png" class="[New KMM Project step2]" title="[New KMM Project step2]"></li><li><p>step3 kmm 名称及配置</p><img src="/blogs/images/multiplatform-mobile-project-wizard-3.png" class="[New KMM Project step3]" title="[New KMM Project step3]"></li><li><p>step4 运行与调试(android)</p><img src="/blogs/images/kmm_run_android.png" class="[New KMM Project step4]" title="[New KMM Project step4]"></li><li><p>step5 运行与调试(iOS)</p><blockquote><p>在AndroidStudio中运行iOS,如果xcode的安装位置不是&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer，可能识别不了，Could not detect version of installed Xcode<br>解决方案：<a href="https://stackoverflow.com/questions/69733017/kmm-kotlin-multiplatform-mobile-error-could-not-detect-version-of-installed-xco">stackoverflow</a></p></blockquote></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// in terminal</span>xcode<span class="token operator">-</span>select <span class="token operator">-</span>p<span class="token comment">// make sure reply with /Applications/Xcode.app/Contents/Developer</span><span class="token comment">// if not ,try this in terminal</span>xcode<span class="token operator">-</span>select <span class="token operator">-</span>s <span class="token operator">/</span>Applications<span class="token operator">/</span>Xcode<span class="token punctuation">.</span>app<span class="token operator">/</span>Contents<span class="token operator">/</span>Developer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="/blogs/images/kmm_run_iOS.png" class="[New KMM Project step5]" title="[New KMM Project step5]"><blockquote><p><a href="https://kotlinlang.org/docs/multiplatform-mobile-getting-started.html">Kotlin多平台官方教程</a></p></blockquote><h3 id="四-KMM-发展现状"><a href="#四-KMM-发展现状" class="headerlink" title="四 KMM 发展现状"></a>四 KMM 发展现状</h3><blockquote><p><a href="https://kotlinlang.org/docs/components-stability.html#stability-levels-explained">Kotlin 组件的稳定性</a></p></blockquote><blockquote><p><a href="https://blog.jetbrains.com/zh-hans/kotlin/2020/09/kotlin-multiplatform-mobile-alpha/">Kotlin 社区</a></p></blockquote><blockquote><p><a href="https://libs.kmp.icerock.dev/">KMM多平台支持库</a></p></blockquote><blockquote><p><a href="https://kotlinlang.org/docs/mpp-intro.html">KMM示例</a></p></blockquote><blockquote><p><a href="https://www.kotlincn.net/docs/reference/">Kotlin&#x2F;Native开发文档</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-什么是KMM&quot;&gt;&lt;a href=&quot;#一-什么是KMM&quot; class=&quot;headerlink&quot; title=&quot;一 什么是KMM&quot;&gt;&lt;/a&gt;一 什么是KMM&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Kotlin Multiplatform Mobile (KMM)</summary>
      
    
    
    
    <category term="Kotlin" scheme="https://allennzhang.github.io/blogs/categories/Kotlin/"/>
    
    
    <category term="kotlin" scheme="https://allennzhang.github.io/blogs/tags/kotlin/"/>
    
    <category term="跨平台" scheme="https://allennzhang.github.io/blogs/tags/%E8%B7%A8%E5%B9%B3%E5%8F%B0/"/>
    
    <category term="android" scheme="https://allennzhang.github.io/blogs/tags/android/"/>
    
    <category term="iOS" scheme="https://allennzhang.github.io/blogs/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Javassist简介与使用教程</title>
    <link href="https://allennzhang.github.io/blogs/2021/11/20/javassist-jian-jie-yu-shi-yong-jiao-cheng/"/>
    <id>https://allennzhang.github.io/blogs/2021/11/20/javassist-jian-jie-yu-shi-yong-jiao-cheng/</id>
    <published>2021-11-20T10:02:00.000Z</published>
    <updated>2022-05-24T03:51:14.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含一个 Java 类或接口。Javaassist 就是一个用来 处理 Java 字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以去生成一个新的类对象，通过完全手动的方式。</p></blockquote><h4 id="1-引用Javassist类库"><a href="#1-引用Javassist类库" class="headerlink" title="1 引用Javassist类库"></a>1 引用Javassist类库</h4><ul><li><p>Maven 方式</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.27</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>GA<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Gradle 方式</p></li></ul><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">repositories <span class="token punctuation">&#123;</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.javassist:javassist:3.27.0-GA'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Javassist主要API"><a href="#2-Javassist主要API" class="headerlink" title="2 Javassist主要API"></a>2 Javassist主要API</h4><ul><li><p>在 Javassist 中，类 <code>Javaassit.CtClass</code> 表示 class 文件。一个 CtClass (编译时类）对象可以处理一个 class 文件，<code>ClassPool</code>是 <code>CtClass</code> 对象的容器。它按需读取类文件来构造 <code>CtClass</code> 对象，并且保存 <code>CtClass</code> 对象以便以后使用</p></li><li><p>ClassPool</p><ul><li>ClassPool 会在内存中维护所有被它创建过的 CtClass</li><li>getDefault : 返回默认的<code>ClassPool</code> 是单例模式的，一般通过该方法创建我们的ClassPool</li><li>appendClassPath, insertClassPath : 将一个<code>ClassPath</code>加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬</li><li>get , getCtClass : 根据类路径名获取该类的CtClass对象，用于后续的编辑</li></ul></li><li><p>CtClass</p><ul><li><p>removeMethod： 移除方法</p></li><li><p>addMethod： 添加方法</p></li><li><p>removeField：移除成员变量</p></li><li><p>addField： 添加成员变量</p></li><li><p>freeze : 冻结一个类，使其不可修改</p></li><li><p>isFrozen : 判断一个类是否已被冻结</p></li><li><p>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用</p></li><li><p>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法</p></li><li><p>detach : 将该class从ClassPool中删除</p></li><li><p>toClass : 通过类加载器加载该CtClass将修改后的CtClass加载至当前线程的上下文类加载器中，CtClass的<code>toClass</code>方法是通过调用本方法实现。<strong>需要注意的是一旦调用该方法，则无法继续修改已经被加载的class</strong></p></li><li><p>writeFile : 根据CtClass生成 <code>.class</code> 文件</p></li></ul></li><li><p>CtMethod</p><ul><li>CtMthod代表类中的某个方法，可以通过CtClass提供的API获取或者CtNewMethod新建</li><li>insertBefore : 在方法的起始位置插入代码；</li><li>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception</li><li>insertAt : 在指定的位置插入代码</li><li>setBody : 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除</li><li>make : 创建一个新的方法</li></ul></li><li><p>CtField</p></li><li><p>CtField代表CtClass的成员变量</p></li><li><p>make: 生成新的成员变量</p></li></ul><h4 id="3注意事项"><a href="#3注意事项" class="headerlink" title="3注意事项"></a>3注意事项</h4><table><thead><tr><th align="left">符号</th><th>含义</th></tr></thead><tbody><tr><td align="left">$0, $1, $2, …</td><td>$0表示this，$1表示方法第一个参数 …</td></tr><tr><td align="left">$args</td><td>方法参数数组.它的类型为 Object[]，注意：$arg[0]对应$1</td></tr><tr><td align="left">$$</td><td>所有实参。例如, m($$) 等价于 m($1,$2,…)</td></tr><tr><td align="left">$cflow(…)</td><td>cflow 变量</td></tr><tr><td align="left">$r</td><td>返回结果的类型，用于强制类型转换</td></tr><tr><td align="left">$w</td><td>包装器类型，用于强制类型转换  ,eg: Integer i &#x3D; ($w)5;</td></tr><tr><td align="left">$_</td><td>返回值</td></tr><tr><td align="left">$sig</td><td>类型为 java.lang.Class 的参数类型数组</td></tr><tr><td align="left">$type</td><td>一个 java.lang.Class 对象，表示返回值类型</td></tr><tr><td align="left">$class</td><td>一个 java.lang.Class 对象，当前正在修改的类</td></tr></tbody></table><ul><li><p>在写入某些对象是要加上包全路径名称</p><blockquote><p>例如： Date，List，Map 或者自定义的类</p><p>classPool.importPackage(“java.util.List”)</p></blockquote></li><li><p>在使用泛型<E>时，泛型定义需要使用&#x2F;**&#x2F;将其包括起来</p><blockquote><p>例如：List<String> 需要写成 List&#x2F;<em><String></em>&#x2F;</p></blockquote></li><li><p>某些类型的定义不能使用 引用类型 只能 使用 基本类型</p><blockquote><p>例如：Float,Long</p><p>不能使用Float.valueOf(),只能使用Float.parseFloat() 转换</p></blockquote></li></ul><h4 id="4-示例代码"><a href="#4-示例代码" class="headerlink" title="4 示例代码"></a>4 示例代码</h4><ul><li><p>添加成员变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">/**     * 添加成员变量     */</span><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">addMemberVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 类库, jvm中所加载的class</span>        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 店家目标类搜索路径</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 导入 android.jar</span>            pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 导入目标类所在的路径</span>          pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取目标类</span>            <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span>pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 解冻</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 给目标类添加成员变量</span>            ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token class-name">CtField</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"private static String  TAG = \"PayecoPluginLoadingActivity\";"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移除成员变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 移除成员变量 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeMemberField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类移除成员变量 f</span>        <span class="token class-name">CtField</span> ctField <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">removeField</span><span class="token punctuation">(</span>ctField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加成员方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *添加成员方法 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addMemberMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导包</span>        pool<span class="token punctuation">.</span><span class="token function">importPackage</span><span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类添加成员方法</span>        <span class="token comment">// 注意在使用&lt;>这样的泛型定义 标识时 要使用 /* */ 将其包括起来</span>        <span class="token comment">// for-each 不支持，for in 是可以的，暂时不知道什么原因， for(Object o : data)&#123;</span>        <span class="token comment">//        System.out.println(o);</span>        <span class="token comment">//      &#125;</span>        <span class="token class-name">String</span> methodBody <span class="token operator">=</span> <span class="token string">"public  void sayHello() &#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"    java.util.List/*&lt;String>*/ data = new java.util.ArrayList();\n"</span> <span class="token operator">+</span>                <span class="token string">"    data.add(\"张三\");\n"</span> <span class="token operator">+</span>                <span class="token string">"    data.add(\"李四\");\n"</span> <span class="token operator">+</span>                <span class="token string">"    data.add(\"王五\");\n"</span> <span class="token operator">+</span>                <span class="token string">"    for(int i = 0; i&lt; data.size();i++)&#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"       System.out.println(data.get(i)+\" say hello\");\n"</span> <span class="token operator">+</span>                <span class="token string">"      &#125;\n"</span> <span class="token operator">+</span>                <span class="token string">"&#125;"</span><span class="token punctuation">;</span>        <span class="token class-name">CtMethod</span> newMethod <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>methodBody<span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>newMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移除成员方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 移除成员方法 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeMemberMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类移除成员方法 f</span>        <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctMethod <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在方法中插入代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 在方法中插入代码  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertCodeForMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 店家目标类搜索路径</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 导入 android.jar</span>         pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 导入目标类所在的路径</span>       pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取目标类</span>         <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 解冻</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// 给目标类成员方法 onCreate 添加代码</span>         <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"System.out.println($0+\"insert  onCreate() before\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"System.out.println($0+\"insert  onCreate() after\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 给c方法指定行插入代码</span>         <span class="token class-name">CtMethod</span> ctMethod1 <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ControlFlow</span> flow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControlFlow</span><span class="token punctuation">(</span>ctMethod1<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ControlFlow<span class="token punctuation">.</span>Block</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blocks <span class="token operator">=</span> flow<span class="token punctuation">.</span><span class="token function">basicBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ControlFlow<span class="token punctuation">.</span>Block</span> block <span class="token operator">:</span> blocks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">String</span> blockIndex <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> p1 <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//计算源代码的行号，Source code line position from binary line position</span>             <span class="token keyword">int</span> pos <span class="token operator">=</span> ctMethod1<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLineNumber</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"blockIndex="</span><span class="token operator">+</span>blockIndex<span class="token operator">+</span><span class="token string">",p1="</span><span class="token operator">+</span>p1<span class="token operator">+</span><span class="token string">",pos="</span><span class="token operator">+</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"block="</span><span class="token operator">+</span>block<span class="token punctuation">.</span>clientData<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>blockIndex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 ctMethod1<span class="token punctuation">.</span><span class="token function">insertAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span><span class="token string">"System.out.println($0+\"insert  a(\"+$1+\") at line num:"</span><span class="token operator">+</span>pos<span class="token operator">+</span><span class="token string">"\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">BadBytecode</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改方法体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *修改方法体 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMethodBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类成员方法 f 设置方法体</span>        <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodBody <span class="token operator">=</span> <span class="token string">" System.out.println(\"new methodBody\");"</span><span class="token punctuation">;</span>        ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>methodBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建和生成class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 创建一个类  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 创建一个类</span>         <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 新增字段 name</span>         <span class="token class-name">CtField</span> member1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         member1<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span>PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 设置初始值</span>         ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span><span class="token class-name">CtField<span class="token punctuation">.</span>Initializer</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//新增字段 age</span>         <span class="token class-name">CtField</span> member2 <span class="token operator">=</span> <span class="token class-name">CtField</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"private int age = 0 ;"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>member2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 生成getter setter</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span>member1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">,</span>member1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span>member2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">"getAge"</span><span class="token punctuation">,</span>member2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 添加无参构造函数</span>         <span class="token class-name">CtConstructor</span> cons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         cons<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">" &#123; name = \"小明\"; \n"</span> <span class="token operator">+</span>                 <span class="token string">"          age = 18;  \n"</span> <span class="token operator">+</span>                 <span class="token string">"        &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 添加有参构造函数</span>         cons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// $0=this, $1,$2,$3... 代表方法参数</span>         cons<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123; $0.name=$1;\n"</span> <span class="token operator">+</span>                 <span class="token string">"        $0.age=$2;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 创建一个 sayHello 方法 无参数，返回类型为void</span>         <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>voidType<span class="token punctuation">,</span><span class="token string">"sayHello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123;System.out.println($0.getName()+ \" sayHello\");&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取接口</span>         <span class="token class-name">CtClass</span> interfaceI <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 使代码生成的类，实现 Serializable 接口</span>         ctClass<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>interfaceI<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 创建实例</span>         <span class="token class-name">Class</span> clz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Object</span> instance <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Method</span> method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 保存class 文件</span>         ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5实战，修复易联支付sdk的crash"><a href="#5实战，修复易联支付sdk的crash" class="headerlink" title="5实战，修复易联支付sdk的crash"></a>5实战，修复易联支付sdk的crash</h4><blockquote><p>情景回放：由于项目的targetSdk升级到29，导致TelephonyManager.getDeviceId() 不可用，抛异常crash，由于沟通之后第三方暂未兼容，尝试自己修复,需要hook相应方法，修改代码逻辑</p></blockquote><ol><li><p>使用zip命令解压原始jar或则aar</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用unzip命令，将jar包 解压到指定目录unzip .&#x2F;FixBug&#x2F;lib&#x2F;eco_pay_classes.jar -d .&#x2F;FixBug&#x2F;lib&#x2F;fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用Javassist 进行字节码修改，修复问题</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fixEcoPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.d.k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取目标method</span>        <span class="token class-name">CtMethod</span> methodB <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"android.content.Context"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fixCode <span class="token operator">=</span> <span class="token string">"if(true)&#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"\treturn \"\";\n"</span> <span class="token operator">+</span>                <span class="token string">"&#125;"</span><span class="token punctuation">;</span>        methodB<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>fixCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token class-name">CtField</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"private static String aaa = \"12345\";"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CtMethod</span> methodC <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"android.content.Context"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodC<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>fixCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>将修改之后的class对第一步解压之后的class文件进行替换，并使用zip命令重新生成jar包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用zip -r 将解压缩之后的所有class文件，压缩到eco_pay_classes_fix.jarzip -r ..&#x2F;eco_pay_classes_fix.jar .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将修复之后的jar在工程中进行替换即可</p></li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/rickiyang/p/11336268.html">https://www.cnblogs.com/rickiyang/p/11336268.html</a></li><li><a href="https://blog.csdn.net/qq_42426159/article/details/109156048">https://blog.csdn.net/qq_42426159/article/details/109156048</a></li><li><a href="http://cn.voidcc.com/question/p-cpcynmot-tb.html">http://cn.voidcc.com/question/p-cpcynmot-tb.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含一个 Java 类或接口。Javaassist 就是一个用来 处理 Java 字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，</summary>
      
    
    
    
    <category term="Java" scheme="https://allennzhang.github.io/blogs/categories/Java/"/>
    
    
    <category term="AOP" scheme="https://allennzhang.github.io/blogs/tags/AOP/"/>
    
    <category term="字节码" scheme="https://allennzhang.github.io/blogs/tags/%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    
    <category term="Java" scheme="https://allennzhang.github.io/blogs/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 文件存储兼容方案</title>
    <link href="https://allennzhang.github.io/blogs/2021/09/26/android-q-wen-jian-cun-chu-jian-rong-fang-an/"/>
    <id>https://allennzhang.github.io/blogs/2021/09/26/android-q-wen-jian-cun-chu-jian-rong-fang-an/</id>
    <published>2021-09-26T09:24:24.000Z</published>
    <updated>2022-09-01T02:39:12.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了让用户更好地控制自己的文件，并限制文件混乱的情况，Android Q修改了APP访问外部存储中文件的方法。外部存储的新特性被称为Scoped Storage。</p><p>Android Q仍然使用READ_EXTERNAL_STORAGE和WRITE_EXTERNAL_STORAGE作为面向用户的存储相关运行时权限，但现在即使获取了这些权限，访问外部存储也受到了限制。</p><p>APP需要这些运行时权限的情景发生了变化，且各种情况下外部存储对APP的可见性也发生了变化。</p><p>在Scoped Storage新特性中，外部存储空间被分为两部分：</p><ul><li>公共目录：Downloads、Documents、Pictures 、DCIM、Movies、Music、Ringtones等<br>公共目录下的文件在APP卸载后，不会删除。<br>APP可以通过SAF(System Access Framework)、MediaStore接口访问其中的文件。</li><li>App-specific目录<br>APP卸载后，数据会清除。<br>APP的私密目录，APP访问自己的App-specific目录时无需任何权限</li><li><a href="https://open.oppomobile.com/wiki/doc#id=10432">OPPO关于android Q文件储存变更描述</a></li><li><a href="https://developer.android.google.cn/about/versions/10/privacy/changes?hl=zh#scoped-storage">Google关于android Q文件存储变更描述</a></li></ul><h2 id="一、Android-Q-文件存储行为变更"><a href="#一、Android-Q-文件存储行为变更" class="headerlink" title="一、Android Q 文件存储行为变更"></a>一、Android Q 文件存储行为变更</h2><ul><li><p>无法直接在SD卡创建文件夹</p></li><li><p>无法直接访问SD公有目录（Downloads、Documents、Pictures 、DCIM、Movies、Music、Ringtones等）的文件</p></li><li><p>API变更，Environment.getExternalStorageDirectory() 在android Q及以上版本不再适用，需要使用MediaStore接口</p></li></ul><h2 id="二、文件操作API示例："><a href="#二、文件操作API示例：" class="headerlink" title="二、文件操作API示例："></a>二、文件操作API示例：</h2><ul><li>更多用法参考：com.yt.utils.MediaStoreUtils ,已经对MediaStore接口做了相应封装，另外，由于api限制，保存文件时需要对 Build.VERSION.SDK_INT进行判断（android 10 以上走MediaStore，10以下直接通过File IO操作</li><li>如果不需要共享的文件，尽量使用context.getExternalCacheDir();获取公共缓存目录，需要申请sd卡存储权限）</li></ul><h3 id="2-1-查询文件URI"><a href="#2-1-查询文件URI" class="headerlink" title="2.1 查询文件URI"></a>2.1 查询文件URI</h3> <pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Uri</span> <span class="token function">queryMediaStoreImageUri</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">MediaQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> query <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>query<span class="token punctuation">.</span><span class="token function">validRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查询video文件 请使用 MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span>    <span class="token class-name">Uri</span> externalUri <span class="token operator">=</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">;</span>    <span class="token class-name">ContentResolver</span> resolver <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>externalUri<span class="token punctuation">,</span> query<span class="token punctuation">.</span>projection<span class="token punctuation">,</span> query<span class="token punctuation">.</span>selection<span class="token punctuation">,</span>query<span class="token punctuation">.</span>args<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Uri</span> imageUri <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cursor<span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        imageUri <span class="token operator">=</span> <span class="token class-name">ContentUris</span><span class="token punctuation">.</span><span class="token function">withAppendedId</span><span class="token punctuation">(</span>externalUri<span class="token punctuation">,</span>cursor<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> imageUri<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-读取文件"><a href="#2-2-读取文件" class="headerlink" title="2.2 读取文件"></a>2.2 读取文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">copyMediaStoreToExternalCache</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">Uri</span> imageUri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> imageUri <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> dateStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd_HHmmss"</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> mills <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> dir <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getExternalCacheDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> mimeType <span class="token operator">=</span> <span class="token function">getMime</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>imageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"hipac_cache_"</span><span class="token operator">+</span>dateStamp<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>mills<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>mimeType<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">"hipac_cache_"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token operator">+</span>mimeType<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ioException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 打开文件输入流</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openInputStream</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> outBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            outBuffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        outBuffer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"readMediaStoreImage() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> file<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-将图片文件转成Bitmap"><a href="#2-3-将图片文件转成Bitmap" class="headerlink" title="2.3 将图片文件转成Bitmap"></a>2.3 将图片文件转成Bitmap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">readMediaStoreImage</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Uri</span> imageUri<span class="token punctuation">,</span> <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span> options<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> imageUri <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// "r" 表示读，"w"表示写，</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ParcelFileDescriptor</span> pdf <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openFileDescriptor</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeFileDescriptor</span><span class="token punctuation">(</span>pdf<span class="token punctuation">.</span><span class="token function">getFileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"readMediaStoreImage() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-保存图片-x2F-视频到相册"><a href="#2-4-保存图片-x2F-视频到相册" class="headerlink" title="2.4 保存图片&#x2F;视频到相册"></a>2.4 保存图片&#x2F;视频到相册</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertImageToMediaStore</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">File</span> sourceFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sourceFile <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>sourceFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">String</span> fileName <span class="token operator">=</span> sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> suffix <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> mimePair <span class="token operator">=</span> <span class="token function">getMime</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> mime <span class="token operator">=</span> mimePair<span class="token punctuation">.</span>first<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isVideo <span class="token operator">=</span> <span class="token string">"video"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mimePair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ContentValues</span> contentValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DISPLAY_NAME<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>TITLE<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATE_TAKEN<span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mime<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>MIME_TYPE<span class="token punctuation">,</span>mime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>Q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">// android Q 不再使用DATA字段，应该使用RELATIVE_PATH代替，相对于系统公有目录的路径,eg: "Pictures/hipac"</span>          <span class="token class-name">String</span> relativePath <span class="token operator">=</span> isVideo <span class="token operator">?</span> <span class="token string">"DCIM"</span> <span class="token operator">:</span> <span class="token string">"Pictures/hipac"</span><span class="token punctuation">;</span>          contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>RELATIVE_PATH<span class="token punctuation">,</span>relativePath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Uri</span> externalUri <span class="token operator">=</span> isVideo <span class="token operator">?</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Video<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI <span class="token operator">:</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">;</span>          <span class="token class-name">Uri</span> insertUri <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>externalUri<span class="token punctuation">,</span>contentValues<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>insertUri <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openOutputStream</span><span class="token punctuation">(</span>insertUri<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">BufferedOutputStream</span> bufferWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      bufferWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  bufferWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"insertImageToMediaStore() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// android 10 以下用insert方法，是直接插入到/storage/sdcard0，相册选择可能有问题</span>          contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATA<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">File</span> externalDir <span class="token operator">=</span> isVideo <span class="token operator">?</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStoragePublicDirectory</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>DIRECTORY_DCIM<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStoragePublicDirectory</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>DIRECTORY_PICTURES<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">File</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>externalDir<span class="token punctuation">,</span><span class="token string">"hipac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  destFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"insertImageToMediaStore() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">BufferedOutputStream</span> outBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  outBuffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              outBuffer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              context<span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_MEDIA_SCANNER_SCAN_FILE<span class="token punctuation">,</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"insertImageToMediaStore() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;为了让用户更好地控制自己的文件，并限制文件混乱的情况，Android Q修改了APP访问外部存储中文件的方法。外部存储的新特性被称为Scop</summary>
      
    
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/categories/Android/"/>
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/tags/Android/"/>
    
    <category term="文件存储" scheme="https://allennzhang.github.io/blogs/tags/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android简单数据存储方式浅析</title>
    <link href="https://allennzhang.github.io/blogs/2020/12/01/android-jian-dan-shu-ju-cun-chu-fang-shi-qian-xi/"/>
    <id>https://allennzhang.github.io/blogs/2020/12/01/android-jian-dan-shu-ju-cun-chu-fang-shi-qian-xi/</id>
    <published>2020-12-01T09:45:48.000Z</published>
    <updated>2022-04-03T10:22:57.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>android开发中，对于简单数据(int,float,boolean,String)键值对的存储，相信大家对于SharedPreferences一定不陌生，是Android官方提供的一个基础组件，使用简单方便，但是也有一些缺陷，如主线程阻塞ANR，<br>不能保证类型安全，加载的数据会保留在内存造成内存浪费。针对此优化，最新的JetPack组件库中提供了DataStore组件来避免这些问题，并提供了SharedPreferences迁移的可能性。当然除此之外，腾讯也提供了一款<br>比较优秀的数据存储组件MMKV,开发者也可以从SharedPreferences迁移到MMKV。</p><p>SharedPreferences DataStore MMKV对比：<img src="/blogs/images/mmkv_sp_data_store.jpg" class="[图一]" title="[图一]"> </p><p>SharedPreferences DataStore 差异：<img src="/blogs/images/sp_vs_data_store.png" class="[图二]" title="[图二]"> </p><h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h3><ul><li>SharedPreferences是一种轻量级的数据存储方式，采用键值对的存储方式。</li><li>SharedPreferences只能存储少量数据，大量数据不能使用该方式存储，支持存储的数据类型有boolean, float, int, long,  String。</li><li>SharedPreferences存储到一个XML文件中的，路径在&#x2F;data&#x2F;data&#x2F;<packagename>&#x2F;shared_prefs&#x2F;下</li></ul><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取sp对象</span>        <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"user_info"</span><span class="token punctuation">,</span><span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取键值对</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> userAge <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"userAge"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Float</span> userHeight <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"userHeight"</span><span class="token punctuation">,</span><span class="token number">0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span>  single <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">// 获取sp对象</span>         <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"user_info"</span><span class="token punctuation">,</span><span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//更新数据</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Float</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putFloat</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重识SharedPreferences"><a href="#2-重识SharedPreferences" class="headerlink" title="2. 重识SharedPreferences"></a>2. 重识SharedPreferences</h4><ul><li>通过 getXXX() 方法获取数据，可能会导致主线程阻塞</li><li>SharedPreference 不能保证类型安全</li><li>SharedPreference 加载的数据会一直留在内存中，浪费内存</li><li>apply() 方法虽然是异步的，可能会发生 ANR，在 8.0 之前和 8.0 之后实现各不相同</li><li>apply() 方法无法获取到操作成功或者失败的结果</li></ul><p>getXXX() 方法可能会导致主线程阻塞</p><blockquote><p>调用 getSharedPreferences() 方法，最终会调用  SharedPreferencesImpl#startLoadFromDisk() 方法开启一个线程异步读取数据</p></blockquote><blockquote><p> frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;SharedPreferencesImpl.java</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SharedPreferencesImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> mLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mLoaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startLoadFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mLoaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"SharedPreferencesImpl-load"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> defValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">awaitLoadedLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>mMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> v <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> v <span class="token operator">:</span> defValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">awaitLoadedLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mLoaded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                mLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>正如你所看到的，开启一个线程异步读取数据，当我们正在读取一个比较大的数据，还没读取完，接着调用 getXXX() 方法。<br>在同步方法内调用了 wait() 方法，会一直等待 getSharedPreferences() 方法开启的线程读取完数据才能继续往下执行，如果读取几 KB 的数据还好，假设读取一个大的文件，势必会造成主线程阻塞。</p></blockquote><p>SP 不能保证类型安全</p><blockquote><p>调用 getXXX() 方法的时候，可能会出现 ClassCastException 异常，因为使用相同的 key 进行操作的时候，putXXX 方法可以使用不同类型的数据覆盖掉相同的 key。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkTypeSafe</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"userAge"</span><span class="token punctuation">;</span>        <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"user_info"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 Int 类型的数据覆盖相同的 key</span>        sp<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用相同的 key 读取 Sting 类型的数据</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// throw Exception</span>    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> cannot be cast <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SP 加载的数据会一直留在内存中</p><blockquote><p>通过 getSharedPreferences() 方法加载的数据，最后会将数据存储在静态的成员变量中。<br>通过静态的 ArrayMap 缓存每一个 SP 文件，而每个 SP 文件内容通过 Map 缓存键值对数据，这样数据会一直留在内存中，浪费内存。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 调用 getSharedPreferences 方法，最后会调用 getSharedPreferencesCacheLocked 方法</span> <span class="token keyword">public</span> <span class="token class-name">SharedPreferences</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">final</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token function">getSharedPreferencesCacheLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> sp<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 通过静态的 ArrayMap 缓存 SP 加载的数据</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ArrayMap</span><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span><span class="token punctuation">></span></span> sSharedPrefsCache<span class="token punctuation">;</span> <span class="token comment">// 将数据保存在 sSharedPrefsCache 中</span> <span class="token keyword">private</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span></span> <span class="token function">getSharedPreferencesCacheLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span></span> packagePrefs <span class="token operator">=</span> sSharedPrefsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>packagePrefs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         packagePrefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sSharedPrefsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> packagePrefs<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> packagePrefs<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    <p>apply() 方法是异步的，可能会发生 ANR</p><blockquote><p>apply() 方法是异步的，本身是不会有任何问题，但是当生命周期处于  handleStopService() 、 handlePauseActivity() 、 handleStopActivity()<br>的时候会一直等待 apply() 方法将数据保存成功，否则会一直等待，从而阻塞主线程造成 ANR，一起来分析一下为什么异步方法还会阻塞主线程，先来看看 apply() 方法的实现。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">MemoryCommitResult</span> mcr <span class="token operator">=</span> <span class="token function">commitToMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Runnable</span> awaitCommit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mcr<span class="token punctuation">.</span>writtenToDiskLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 将 awaitCommit 添加到队列 QueuedWork 中</span>    <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">addFinisher</span><span class="token punctuation">(</span>awaitCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Runnable</span> postWriteRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                awaitCommit<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">removeFinisher</span><span class="token punctuation">(</span>awaitCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 8.0 之前加入到一个单线程的线程池中执行</span>    <span class="token comment">// 8.0 之后加入 HandlerThread 中执行写入任务</span>    <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enqueueDiskWrite</span><span class="token punctuation">(</span>mcr<span class="token punctuation">,</span> postWriteRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <ul><li>将一个 awaitCommit 的  Runnable 任务，添加到队列 QueuedWork 中，在 awaitCommit 中会调用 await() 方法等待，<br>在 handleStopService 、 handleStopActivity 等等生命周期会以这个作为判断条件，等待任务执行完毕</li><li>将一个 postWriteRunnable 的  Runnable 写任务，通过 enqueueDiskWrite 方法，将写入任务加入到队列中，而写入任务在一个线程中执行</li></ul><p>注意：在 8.0 之前和 8.0 之后 enqueueDiskWrite() 方法实现逻辑各不相同。</p><blockquote><p>在 8.0 之前调用 enqueueDiskWrite() 方法，将写入任务加入到 单个线程的线程池 中执行，如果 apply() 多次的话，任务将会依次执行，效率很低，android-7.0.0_r34 源码如下所示。<br>通过 Executors.newSingleThreadExecutor() 方法创建了一个 单个线程的线程池，因此任务是串行的，通过 apply() 方法创建的任务，都会添加到这个线程池内。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/SharedPreferencesImpl.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueueDiskWrite</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MemoryCommitResult</span> mcr<span class="token punctuation">,</span>                              <span class="token keyword">final</span> <span class="token class-name">Runnable</span> postWriteRunnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">singleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>writeToDiskRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/QueuedWork.java</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">singleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sSingleThreadExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sSingleThreadExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sSingleThreadExecutor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <p>在 8.0 之后将写入任务加入到 LinkedList 链表中，在 HandlerThread 中执行写入任务，android-10.0.0_r14 源码如下所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">// android-10.0.0_r14: frameworks/base/core/java/android/app/SharedPreferencesImpl.java</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueueDiskWrite</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MemoryCommitResult</span> mcr<span class="token punctuation">,</span>                                  <span class="token keyword">final</span> <span class="token class-name">Runnable</span> postWriteRunnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>writeToDiskRunnable<span class="token punctuation">,</span> <span class="token operator">!</span>isFromSyncCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// android-10.0.0_r14: frameworks/base/core/java/android/app/QueuedWork.java</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> sWork <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> work<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shouldDelay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 handlerThread.getLooper() 生成 Handler 对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sWork<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将写入任务加入到 LinkedList 链表中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldDelay <span class="token operator">&amp;&amp;</span> sCanDelay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token class-name">QueuedWorkHandler</span><span class="token punctuation">.</span>MSG_RUN<span class="token punctuation">,</span> DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token class-name">QueuedWorkHandler</span><span class="token punctuation">.</span>MSG_RUN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <blockquote><p>在 8.0 之后通过调用 handlerThread.getLooper() 方法生成 Handler，任务都会在 HandlerThread 中执行，所有通过 apply() 方法创建的任务，都会添加到 LinkedList 链表中。<br>  当生命周期处于 handleStopService() 、 handlePauseActivity() 、 handleStopActivity() 的时候会调用 QueuedWork.waitToFinish() 会等待写入任务执行完毕，我们以其中  handlePauseActivity() 方法为例。<br>  正如你所看到的在 handlePauseActivity() 方法中，调用了 QueuedWork.waitToFinish() 方法，会等待所有的写入执行完毕，Google 在 8.0 之后对这个方法做了很大的优化，一起来看一下 8.0 之前和 8.0 之后的区别。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/ActivityThread.java</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePauseActivity</span><span class="token punctuation">(</span><span class="token class-name">IBinder</span> token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finished<span class="token punctuation">,</span> <span class="token keyword">boolean</span> userLeaving<span class="token punctuation">,</span>                                <span class="token keyword">int</span> configChanges<span class="token punctuation">,</span> <span class="token class-name">PendingTransactionActions</span> pendingActions<span class="token punctuation">,</span> <span class="token class-name">String</span> reason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 确保写任务都已经完成</span>    <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <p>在 8.0 之前 waitToFinish() 方法只做了一件事，会一直等待写入任务执行完毕， android-7.0.0_r34 源码实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/QueuedWork.java</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> sPendingWorkFinishers <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Runnable</span> toFinish<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>toFinish <span class="token operator">=</span> sPendingWorkFinishers<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toFinish<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于调用 `mcr.writtenToDiskLatch.await()` 方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>     <blockquote><p>sPendingWorkFinishers 是 ConcurrentLinkedQueue 实例，apply 方法会将写入任务添加到 sPendingWorkFinishers 队列中，在 单个线程的线程池 中执行写入任务，线程的调度并不由程序来控制，也就是说当生命周期切换的时候，任务不一定处于执行状态<br>  toFinish.run() 方法，相当于调用 mcr.writtenToDiskLatch.await() 方法，会一直等待.<br>  waitToFinish() 方法就做了一件事，会一直等待写入任务执行完毕，其它什么都不做，当有很多写入任务，会依次执行，当文件很大时，效率很低，造成 ANR 就不奇怪了</p></blockquote><p>在 8.0 之后 waitToFinish() 方法做了很大的优化，当生命周期切换的时候，会主动触发任务的执行，而不是一直在等着，我们来看看 android-10.0.0_r14 源码实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-10.0.0_r14: frameworks/base/core/java/android/app/QueuedWork.java</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> sFinishers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">processPendingWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主动触发任务的执行</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StrictMode</span><span class="token punctuation">.</span><span class="token function">setThreadPolicy</span><span class="token punctuation">(</span>oldPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 等待任务执行完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runnable</span> finisher<span class="token punctuation">;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                finisher <span class="token operator">=</span> sFinishers<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 LinkedList 中取出任务</span>            <span class="token punctuation">&#125;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>finisher <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 当 LinkedList 中没有任务时会跳出循环</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>              finisher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于调用 `mcr.writtenToDiskLatch.await()`</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <blockquote><p>在 waitToFinish() 方法中会主动调用 processPendingWork() 方法触发任务的执行，在 HandlerThread 中执行写入任务。<br>  另外还做了一个很重要的优化，当调用 apply() 方法的时候，执行磁盘写入，都是全量写入，在 8.0 之前，调用 N 次 apply() 方法，就会执行 N 次磁盘写入，<br>  在 8.0 之后，apply() 方法调用了多次，只会执行最后一次写入，通过版本号来控制的。</p></blockquote><h3 id="DataStore"><a href="#DataStore" class="headerlink" title="DataStore"></a>DataStore</h3><h4 id="1-DataStore简介"><a href="#1-DataStore简介" class="headerlink" title="1. DataStore简介"></a>1. DataStore简介</h4><p>Preferences DataStore 是JetPack最新提供的简单数据键值对数据存储组件，主要用来替换 SharedPreferences。Preferences DataStore 只支持 Int , Long , Boolean , Float , String 键值对数据，<br>适合存储简单、小型的数据，并且不支持局部更新，如果修改了其中一个值，整个文件内容将会被重新序列化，<br>可以运行 AndroidX-Jetpack-Practice&#x2F;DataStoreSimple 体验一下，如果需要局部更新，建议使用 Room。<br>另外 Jetpack DataStore 提供了 Proto DataStore 方式，用于存储类的对象（typed objects ），通过 protocol buffers 将对象序列化存储在本地</p><p>Preferences DataStore的优点</p><ul><li>DataStore 是基于 Flow 实现的，所以保证了在主线程的安全性</li><li>以事务方式处理更新数据，事务有四大特性（原子性、一致性、 隔离性、持久性）</li><li>没有 apply() 和 commit() 等等数据持久的方法</li><li>自动完成 SharedPreferences 迁移到 DataStore，保证数据一致性，不会造成数据损坏</li><li>可以监听到操作成功或者失败结果</li></ul><h4 id="2-DataStore基本用法"><a href="#2-DataStore基本用法" class="headerlink" title="2. DataStore基本用法"></a>2. DataStore基本用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 项目module下的build.gradle添加依赖</span>dependencies <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// Preferences DataStore</span>    implementation <span class="token string">"androidx.datastore:datastore-preferences:1.0.0-alpha01"</span>    <span class="token comment">// Proto DataStore</span>    implementation <span class="token string">"androidx.datastore:datastore-core:1.0.0-alpha01"</span>       implementation 'com<span class="token punctuation">.</span>tencent<span class="token operator">:</span>mmkv<span class="token operator">:</span><span class="token number">1.0</span><span class="token number">.23</span>'<span class="token punctuation">&#125;</span><span class="token comment">// 读取数据</span><span class="token comment">// 这里和我们之前使用 SharedPreferences 的有点不一样，在 Preferences DataStore 中 Key 是一个 Preferences.Key&lt;T> 类型，只支持 Int , Long , Boolean , Float , String</span>fun <span class="token function">readFromDataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          btn_data_store_read<span class="token operator">?</span><span class="token punctuation">.</span>setOnClickListener <span class="token punctuation">&#123;</span>              val startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 获取datastore实例</span>              val dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span> <span class="token operator">=</span>                  <span class="token keyword">this</span><span class="token annotation punctuation">@MainActivity.createDataStore</span><span class="token punctuation">(</span>name <span class="token operator">=</span> dataStoreName<span class="token punctuation">)</span>              <span class="token comment">//     </span>              val nameKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span>              <span class="token comment">// 基于Flow实现</span>              val dataFlow<span class="token operator">:</span> <span class="token class-name">Flow</span><span class="token operator">&lt;</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Preferences<span class="token punctuation">.</span>Key</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">Any</span><span class="token operator">>></span> <span class="token operator">=</span> dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> is <span class="token class-name">IOException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> is <span class="token class-name">Throwable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">throw</span> <span class="token keyword">this</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> preferences <span class="token operator">-></span>                 <span class="token comment">// 获取名为userName 的建值</span>                 <span class="token comment">// preferences[nameKey] ?: ""</span>                  preferences<span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">// 启动协程</span>              <span class="token class-name">GlobalScope</span><span class="token punctuation">.</span>launch <span class="token punctuation">&#123;</span>                  dataFlow<span class="token punctuation">.</span>collect <span class="token punctuation">&#123;</span> pairs <span class="token operator">-></span>                      val endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"从data store读取，cost time = $&#123;endTime - startTime&#125; ms"</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>pair in pairs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">// 打印获取到的键值对</span>                          <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"key=$&#123;pair.key&#125;,value=$&#123;pair.value&#125;"</span><span class="token punctuation">)</span>                      <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写入数据</span>fun <span class="token function">writeToDataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        btn_data_store_write<span class="token operator">?</span><span class="token punctuation">.</span>setOnClickListener <span class="token punctuation">&#123;</span>           <span class="token comment">// 获取datastore实例</span>            val dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span> <span class="token operator">=</span>                <span class="token keyword">this</span><span class="token annotation punctuation">@MainActivity.createDataStore</span><span class="token punctuation">(</span>name <span class="token operator">=</span> dataStoreName<span class="token punctuation">)</span>             <span class="token comment">// 启动协程     </span>            <span class="token class-name">GlobalScope</span><span class="token punctuation">.</span>launch <span class="token punctuation">&#123;</span>                <span class="token function">saveData</span><span class="token punctuation">(</span>dataStore<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    suspend fun <span class="token function">saveData</span><span class="token punctuation">(</span>dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"save data..."</span><span class="token punctuation">)</span>        val nameKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span>        val ageKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userAge"</span><span class="token punctuation">)</span>        val introductionKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userIntroduction"</span><span class="token punctuation">)</span>        <span class="token comment">// 更新键值对</span>        dataStore<span class="token punctuation">.</span>edit <span class="token punctuation">&#123;</span> settings <span class="token operator">-></span>            settings<span class="token punctuation">[</span>nameKey<span class="token punctuation">]</span> <span class="token operator">=</span> userName            settings<span class="token punctuation">[</span>ageKey<span class="token punctuation">]</span> <span class="token operator">=</span> userAge            settings<span class="token punctuation">[</span>introductionKey<span class="token punctuation">]</span> <span class="token operator">=</span> userIntroduction            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"save data done"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h4 id="3-从SharedPreferences迁移到Preferences-DataStore"><a href="#3-从SharedPreferences迁移到Preferences-DataStore" class="headerlink" title="3. 从SharedPreferences迁移到Preferences DataStore"></a>3. 从SharedPreferences迁移到Preferences DataStore</h4><p>在使用DataStore之前，保证完成迁移.<br>当 DataStore 对象构建完了之后，需要执行一次读取或者写入操作，即可完成 SharedPreferences 迁移到  DataStore，当迁移成功之后，会自动删除 SharedPreferences 使用的文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 迁移到Preferences DataStore</span>fun <span class="token function">migration</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    val dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createDataStore</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token string">"settings"</span><span class="token punctuation">,</span>        migrations <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token class-name">SharedPreferencesMigration</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"settings_preferences"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 迁移到Proto DataStore</span> fun <span class="token function">migration</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     val settingsDataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Settings</span><span class="token punctuation">></span></span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createDataStore</span><span class="token punctuation">(</span>         produceFile <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token class-name">File</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>filesDir<span class="token punctuation">,</span> <span class="token string">"settings.preferences_pb"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         serializer <span class="token operator">=</span> <span class="token class-name">SettingsSerializer</span><span class="token punctuation">,</span>         migrations <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>             <span class="token class-name">SharedPreferencesMigration</span><span class="token punctuation">(</span>                 context<span class="token punctuation">,</span>                 <span class="token string">"settings_preferences"</span>             <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> sharedPrefs<span class="token operator">:</span> <span class="token class-name">SharedPreferencesView</span><span class="token punctuation">,</span> currentData<span class="token operator">:</span> <span class="token class-name">UserPreferences</span> <span class="token operator">-></span>                 <span class="token comment">// Map your sharedPrefs to your type here</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h4 id="3-DataStore工作流程"><a href="#3-DataStore工作流程" class="headerlink" title="3. DataStore工作流程"></a>3. DataStore工作流程</h4><img src="/blogs/images/DataStore%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png" class="[图三]" title="[图三]"> <h3 id="MMKV"><a href="#MMKV" class="headerlink" title="MMKV"></a>MMKV</h3><h5 id="1-MMKV简介"><a href="#1-MMKV简介" class="headerlink" title="1. MMKV简介"></a>1. MMKV简介</h5><p>MMKV 是腾讯开源的一款基于 mmap 内存映射的 key-value 组件，底层序列化&#x2F;反序列化使用 protobuf 实现，性能高，稳定性强，<br>从 2015 年中至今在微信上使用，其性能和稳定性经过了时间的验证。<a href="https://github.com/Tencent/MMKV">GitHub地址</a></p><p>MMKV 优点</p><ul><li>数据加密。 在 Android 环境里，数据加密是非常必须的，SP实际上是把键值对放到本地文件中进行存储。如果要保证数据安全需要自己加密，MMKV 使用了 AES CFB-128 算法来加密&#x2F;解密。</li><li>多进程共享。系统自带的 SharedPreferences 对多进程的支持不好。现有基于 ContentProvider 封装的实现，虽然多进程是支持了，但是性能低下，经常导致 ANR。考虑到 mmap 共享内存本质上是多进程共享的，MMKV 在这个基础上，深入挖掘了 Android 系统的能力，提供了可能是业界最高效的多进程数据共享组件。</li><li>匿名内存。 在多进程共享的基础上，考虑到某些敏感数据(例如密码)需要进程间共享，但是不方便落地存储到文件上，直接用 mmap 不合适。而Android 系统提供了 Ashmem 匿名共享内存的能力，它在进程退出后就会消失，不会落地到文件上，非常适合这个场景。MMKV 基于此也提供了 Ashmem(匿名共享内存) MMKV 的功能。</li><li>效率更高。MMKV 使用protobuf进行序列化和反序列化，比起SP的xml存放方式，更加高效。</li><li>支持从 SP迁移，如果你之前项目里面都是使用SP，现在想改为使用MMKV，只需几行代码即可将之前的SP实现迁移到MMKV。</li></ul><p>支持的数据类型</p><ul><li><p>支持以下 Java 语言基础类型：</p><blockquote><p>boolean、int、long、float、double、byte[]</p></blockquote></li><li><p>支持以下 Java 类和容器：</p><blockquote><p>String、Set&lt; String &gt;<br>任何实现了Parcelable的类型</p></blockquote></li></ul><h5 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">// 项目module下的build.gradle添加依赖</span> dependencies <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// mmkv</span>    implementation 'com<span class="token punctuation">.</span>tencent<span class="token operator">:</span>mmkv<span class="token operator">:</span><span class="token number">1.0</span><span class="token number">.23</span>' <span class="token punctuation">&#125;</span>  <span class="token comment">// 在Application中初始化</span> MMKV<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MMKV</span> kv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储数据很简单了，只需要调用如下一行代码即可，不用再如prefences一样调用apply或commit：</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取存储的信息</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bool: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeBool</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeInt</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeLong</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"float: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeFloat</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"double: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeDouble</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"Hello from mmkv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"string: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token char">'k'</span><span class="token punctuation">,</span> <span class="token char">'v'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bytes: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">decodeBytes</span><span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查询与删除</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">MMKV</span> kv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">MMKV</span> kv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       kv<span class="token punctuation">.</span><span class="token function">removeValueForKey</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bool: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeBool</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       kv<span class="token punctuation">.</span><span class="token function">removeValuesForKeys</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"allKeys: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">allKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       kv<span class="token punctuation">.</span><span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> hasBool <span class="token operator">=</span> kv<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">// 业务区分，分别存储</span>   <span class="token class-name">MMKV</span> mmkv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"MyID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//支持多进程 </span>   <span class="token class-name">MMKV</span> mmkv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"InterProcessKV"</span><span class="token punctuation">,</span> MMKV<span class="token punctuation">.</span>MULTI_PROCESS_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>   mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h4 id="3-从SharedPreferences迁移到MMKV"><a href="#3-从SharedPreferences迁移到MMKV" class="headerlink" title="3. 从SharedPreferences迁移到MMKV"></a>3. 从SharedPreferences迁移到MMKV</h4> <pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testImportSharedPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//SharedPreferences preferences = getSharedPreferences("myData", MODE_PRIVATE);</span>    <span class="token class-name">MMKV</span> preferences <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"myData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 迁移旧数据</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SharedPreferences</span> old_man <span class="token operator">=</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"myData"</span><span class="token punctuation">,</span> MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        preferences<span class="token punctuation">.</span><span class="token function">importFromSharedPreferences</span><span class="token punctuation">(</span>old_man<span class="token punctuation">)</span><span class="token punctuation">;</span>        old_man<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 跟以前用法一样</span>    <span class="token class-name">SharedPreferences<span class="token punctuation">.</span>Editor</span> editor <span class="token operator">=</span> preferences<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putFloat</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"hello, imported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"W"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putStringSet</span><span class="token punctuation">(</span><span class="token string">"string-set"</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 无需调用 commit()</span>    <span class="token comment">//editor.commit();</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> ]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;android开发中，对于简单数据(int,float,boolean,String)键值对的存储，相信大家对于SharedPreferen</summary>
      
    
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/categories/Android/"/>
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/tags/Android/"/>
    
    <category term="数据存储" scheme="https://allennzhang.github.io/blogs/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
    <category term="SharedPreferences" scheme="https://allennzhang.github.io/blogs/tags/SharedPreferences/"/>
    
    <category term="DataStore" scheme="https://allennzhang.github.io/blogs/tags/DataStore/"/>
    
    <category term="MMKV" scheme="https://allennzhang.github.io/blogs/tags/MMKV/"/>
    
  </entry>
  
  <entry>
    <title>JNI动态链接库so逆向反编译学习技巧</title>
    <link href="https://allennzhang.github.io/blogs/2020/09/18/jni-dong-tai-lian-jie-ku-so-ni-xiang-fan-bian-yi-xue-xi-ji-qiao/"/>
    <id>https://allennzhang.github.io/blogs/2020/09/18/jni-dong-tai-lian-jie-ku-so-ni-xiang-fan-bian-yi-xue-xi-ji-qiao/</id>
    <published>2020-09-18T10:45:48.000Z</published>
    <updated>2022-04-03T08:35:38.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信大多数Android开发者，在日常工作中多多少少都会接触到三方库的集成，其中包括jar包，so库，如果开发者希望在使用库方法的同时，也能够学习到其中的方法实现，那么就需求对这些库进行反编译，对于jar包而言，可以使用GD—GUI开源工具进行查看class文件。而对于so库来说，因为一般是通过C,C++语言实现，经过编译生成的动态链接库二进制文件，反编译难度很大，常规方式成本很高，今天主要介绍如何通过三方软件来实现对so库的反编译。</p><p>so编译：<img src="/blogs/images/so%E5%BA%93%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" class="[图一]" title="[图一]"> </p><h3 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h3><p>这里推荐两款so反编译工具：</p><ul><li>1、Hopper(收费，提供试用期)<blockquote><p><a href="https://www.hopperapp.com/">官方地址</a></p></blockquote></li></ul><blockquote><p>Hopper 是一种适用于 OS X 和 Linux 的逆向工程工具，可以用于反汇编、反编译和调试 32位&#x2F;64位英特尔处理器的 Mac、Linux、Windows 和 iOS 可执行程序！”用更简洁的话来说，这代表我们可以用一个编译二进制（你的 iOS app，UIKit 二进制等等）生成你之前看到的伪代码！</p></blockquote><ul><li>2、IDA Pro(收费，提供试用期)<blockquote><p><a href="https://www.hex-rays.com/products/ida/">官方地址</a></p></blockquote></li></ul><blockquote><p>IDA Pro全称是交互式反汇编器专业版（Interactive Disassembler Professional），简称IDA，它是一种典型的递归下降反汇编器。IDA并非免费软件，但Hex-Rays公司提供了一个功能有限的免费版本。IDA是Windows，Linux或Mac OS X托管的多处理器反汇编程序 和调试程序，它提供了许多功能，是一款很强大的静态反编译工具。支持很多插件和python，利用一些插件可以提供很多方便的功能大大减少工作量，在CTF中，逆向和pwn都少不了它，更多强大的功能等待童鞋们自己去学习挖掘，三言两语讲不完。它支持数十种CPU指令集其中包括Intel x86，x64，MIPS，PowerPC，ARM，Z80，68000，c8051等等</p></blockquote><p>这里我们选择IDA Pro为例进行进行分析，理由就是强大，成熟，好用。单由于mac os 10.15.x系统限制，可能装不上或者有其他问题，这里提供一种解决方案：<a href="https://blog.csdn.net/u010953692/article/details/94907317">IDA Pro 7.0 macOS 安装</a></p><h3 id="IDA-Pro工具基本使用技巧"><a href="#IDA-Pro工具基本使用技巧" class="headerlink" title="IDA Pro工具基本使用技巧"></a>IDA Pro工具基本使用技巧</h3><ul><li>1、IDA Pro 加载so库（dex文件）<blockquote><p>目前做的比较成熟，7.0版本已经支持android dex文件分析。首先打开IDA Pro启动器（可选择32位，64位）<br>启动界面，提供New(新建)，GO(运行)，Previous（上一个）三种方式，直接选择GO打开<br>接下来，直接拖拽so库到窗口面板中，选择相应匹配的ABI架构，后软件会自动进行分析直到完成，会出现5个窗口视图</p></blockquote></li></ul><p>IDA Pro 加载so库：<img src="/blogs/images/IDA_Pro_Open.png" class="[图二]" title="[图二]"></p><p>IDA Pro 分析完成：<img src="/blogs/images/IDA_Pro_analysis.png" class="[图三]" title="[图三]"></p><ul><li><p>2、IDA Pro 常用视图介绍</p><blockquote><ul><li>IDA View-A是反汇编窗口</li><li>HexView-A是十六进制格式显示的窗口</li><li>Structures是结构</li><li>Enums是枚举</li><li>Imports是导入表（程序中调用到的外面的函数）</li><li>Exports是导出表（共外界调用的函数）</li><li>Functions是函数表（这个程序中的函数）</li></ul></blockquote></li><li><p>3、如何分析函数</p><blockquote><ul><li>在Functions 窗口，任意选中一列函数，按Command+F 搜索模式，输入函数名进行索引，双击到达IDA View-A视图，光标会指向内存地址</li><li>在菜单栏，选择View – Open subviews – Generate pseduocode 生成函数对应伪代码 （快捷键F5,mac os可能因为某些原因失效）</li></ul></blockquote></li></ul><p>IDA Pro 生成函数伪代码：<img src="/blogs/images/IDA_Pro_pseduocode.png" class="[图四]" title="[图四]"></p><p>IDA Pro 函数伪代码：<img src="/blogs/images/IDA_Pro_pseduocode_2.png" class="[图五]" title="[图五]"></p><ul><li>4、查看字符串常量<blockquote><ul><li>在菜单栏，选择View – Open subviews – Strings</li></ul></blockquote></li></ul><p>至此我们基本上可以看到原本java代码声明的native关键字的本地方法在so的实现，其他IDA Pro相关知识技巧，可参考：<br><a href="https://juejin.im/post/6844903550460362766">IDA Pro 逆向速参</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;相信大多数Android开发者，在日常工作中多多少少都会接触到三方库的集成，其中包括jar包，so库，如果开发者希望在使用库方法的同时，也能</summary>
      
    
    
    
    <category term="逆向安全" scheme="https://allennzhang.github.io/blogs/categories/%E9%80%86%E5%90%91%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/tags/Android/"/>
    
    <category term="JNI" scheme="https://allennzhang.github.io/blogs/tags/JNI/"/>
    
    <category term="so反编译" scheme="https://allennzhang.github.io/blogs/tags/so%E5%8F%8D%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Android轻量级水印实现</title>
    <link href="https://allennzhang.github.io/blogs/2019/07/12/android-qing-liang-ji-shui-yin-shi-xian/"/>
    <id>https://allennzhang.github.io/blogs/2019/07/12/android-qing-liang-ji-shui-yin-shi-xian/</id>
    <published>2019-07-12T10:19:24.000Z</published>
    <updated>2022-04-03T10:23:53.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>水印作为产品版权保护常见于图片，文本之中，水印根据可见性类别又分为可见水印和盲水印(也称为数字水印)，我们通常见到的是可见水印，即在原始图片上加上标识的logo文字。<br>而盲水印以下简称数字水印是通过算法将信息嵌入到随机选择的图像点中最不重要的像素位 (LSB:least significant bits)上，这可保证嵌入的水印是不可见的。本文主要讲解<br>可见水印在android上的实现。</p><h3 id="android可见水印实现"><a href="#android可见水印实现" class="headerlink" title="android可见水印实现"></a>android可见水印实现</h3><p>通常可见水印是在原图上添加logo文字，android中通过操作view的画布Canvas 来添加文字或者图案。经研究发现android系统在6.0时View类提供了设置前景色的方法，而通常我们<br>不会设置View的前景色，因此用该方法不会与View自身的视图设置冲突，并且不影响用户视图操作。另一方面，我们通常见到的水印是整个屏幕可见的，因此只需要对视图的根布局设置前景色即可。<br>因此我们设置的目标View是DecorView的子View,通过</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">View</span> view <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果图：<img src="/blogs/images/water_maker_sample.png" class="[图一]" title="[图一]"> </p><ul><li>一 自定义水印Drawable</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaterMarker</span> <span class="token keyword">extends</span> <span class="token class-name">Drawable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> screenHeight<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> screenWidth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Paint</span> paint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> markText<span class="token punctuation">;</span> <span class="token comment">//水印文字</span>    <span class="token keyword">private</span> <span class="token class-name">RectF</span> rectF<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> textColor <span class="token operator">=</span> <span class="token number">0x0D000000</span><span class="token punctuation">;</span> <span class="token comment">//95%透明度，默认水印文字颜色</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> degree <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">//旋转角度，默认 -30°</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> fontSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WaterMarker</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> markText<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        screenHeight <span class="token operator">=</span> <span class="token class-name">DeviceUtils</span><span class="token punctuation">.</span><span class="token function">getScreenHeight</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        screenWidth <span class="token operator">=</span> <span class="token class-name">DeviceUtils</span><span class="token punctuation">.</span><span class="token function">getScreenWidth</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        fontSize <span class="token operator">=</span> <span class="token class-name">TypedValue</span><span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span><span class="token class-name">TypedValue</span><span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>markText <span class="token operator">=</span> markText<span class="token punctuation">;</span>        paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span>FILL_AND_STROKE<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setTextAlign</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Align</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置水印文字颜色     * @param color     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textColor <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 水印文字大小 px     * @param fontSize     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token keyword">float</span> fontSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize <span class="token operator">=</span> fontSize<span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置旋转角度，正数顺时针，负数逆时针     * @param degree     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRotateDegree</span><span class="token punctuation">(</span><span class="token keyword">int</span> degree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>degree <span class="token operator">=</span> degree<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>        rectF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RectF</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        canvas<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rectF<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Paint<span class="token punctuation">.</span>FontMetrics</span> fontMetrics <span class="token operator">=</span> paint<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> distance <span class="token operator">=</span> <span class="token punctuation">(</span>fontMetrics<span class="token punctuation">.</span>bottom <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>        <span class="token keyword">int</span> textHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fontMetrics<span class="token punctuation">.</span>bottom <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalColumns <span class="token operator">=</span> screenHeight <span class="token operator">/</span> <span class="token punctuation">(</span>textHeight <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalColumns <span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>markText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">float</span> baseline <span class="token operator">=</span> screenHeight <span class="token operator">*</span><span class="token number">1.0F</span> <span class="token operator">/</span> totalColumns <span class="token operator">+</span> distance<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalColumns<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>markText<span class="token punctuation">,</span> screenWidth <span class="token operator">*</span><span class="token number">1.0F</span> <span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">,</span>baseline <span class="token operator">*</span> i <span class="token operator">+</span> textHeight<span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token keyword">int</span> alpha<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColorFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ColorFilter</span> colorFilter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOpacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">PixelFormat</span><span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二设置水印</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaterMarkerUtil</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequiresApi</span><span class="token punctuation">(</span>api <span class="token operator">=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> activity<span class="token punctuation">.</span><span class="token function">isFinishing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">View</span> view <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                view<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaterMarker</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateMarkText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"测试用户  "</span> <span class="token operator">+</span><span class="token string">"张三"</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> time<span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">WaterMarkerUtil</span><span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">WaterMarkerUtil</span><span class="token punctuation">.</span><span class="token function">generateMarkText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于数字水印"><a href="#关于数字水印" class="headerlink" title="关于数字水印"></a>关于数字水印</h3><p>添加印过程：<img src="/blogs/images/digital_watermarking1.jpg" class="[图一]" title="[图一]"> </p><p>提取水印过程：<img src="/blogs/images/digital_watermarking2.jpg" class="[图二]" title="[图二]"></p><ul><li>具体实现参考：<a href="https://www.cnblogs.com/zkwarrior/p/5980191.html">阿里根据截图查到泄露者,用的什么黑科技？(数字盲水印)</a></li><li>参考        <a href="https://www.jianshu.com/p/77c2e59585cd">Android 实现图片水印与隐形数字水印</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;水印作为产品版权保护常见于图片，文本之中，水印根据可见性类别又分为可见水印和盲水印(也称为数字水印)，我们通常见到的是可见水印，即在原始图片</summary>
      
    
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/categories/Android/"/>
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/tags/Android/"/>
    
    <category term="水印" scheme="https://allennzhang.github.io/blogs/tags/%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android埋点方案实现与总结</title>
    <link href="https://allennzhang.github.io/blogs/2019/07/12/android-mai-dian-fang-an-yu-shi-xian-zong-jie/"/>
    <id>https://allennzhang.github.io/blogs/2019/07/12/android-mai-dian-fang-an-yu-shi-xian-zong-jie/</id>
    <published>2019-07-12T06:44:23.000Z</published>
    <updated>2022-04-03T10:23:37.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h3><p>目前统计打点已经是一个产品常见的需求，特别是商业性的APP和金融类的APP都会对用户的行为进行采集，基于PV,UV，事件转化率等角度分进行分析，从而进行千人千面和业务定制化与个性化推荐，所以在APP中集成大数据的收集就显得很重要。</p><h3 id="二-现阶段埋点方案现状"><a href="#二-现阶段埋点方案现状" class="headerlink" title="二 现阶段埋点方案现状"></a>二 现阶段埋点方案现状</h3><p>当前数据采集方案按采集方式的实现形式主要分为：手动埋点，可视化埋点，无痕埋点。</p><ul><li><p>手动埋点： 传统的埋点方式，需要开发人员编写大量的埋点代码(点击事件里绑定)，调用SDK API进行采集和上报，如早期的友盟统计和百度统计。</p><ul><li>优点： 可以采集更多的业务数据，更加直观。</li><li>缺点： 开发量大，后期维护成本高，业务入侵性强</li></ul></li><li><p>可视化埋点： 可视化交互，第一步：APP接入可视化埋点SDK,与服务器通信，对需要统计的页面截屏进行元素分析，对需要统计的事件进行长按配置信息。第二步：SDK接受到服务器的配置下发，对用户点击事件进行分析符合规则的事件进行采集。<br>如国外的Mixpanel，国内的 TalkingData、诸葛IO ，Sensors Analytics ，后期百度和腾讯也相继推出可视化埋点SDK</p><ul><li>优点： 使用简单，不依赖大量的埋点代码，通过配置下发进行采集</li><li>缺点： 依赖视图结构，页面改版视图变化后无法采集已有配置的埋点数据，需要重新配置</li></ul><p>可视化埋点流程：<img src="/blogs/images/visible_statistics1.png" class="[图一]" title="[图一]"><br>可视化埋点流程：<img src="/blogs/images/visible_statistics2.jpg" class="[图二]" title="[图二]"></p></li><li><p>无痕埋点：通过Aop的方式hook App的点击事件，采集ViewPath，上报服务器，生成ViewPath–Event映射配置文件，下发到客户端，进行数据采集，基本上只需很少的代码开发，无业务入侵。<br>如：GrowingIO</p><ul><li>优点：能够全面采集事件(PV，UV)，无业务入侵</li><li>缺点：对于业务数据需求较高的场景不适用</li></ul></li></ul><h3 id="无痕埋点方案实现"><a href="#无痕埋点方案实现" class="headerlink" title="无痕埋点方案实现"></a>无痕埋点方案实现</h3><p>结合公司业务发展，目前采用无痕埋点方式与业务数据手动绑定结合实现埋点数据的采集。</p><ul><li><p>无痕埋实现的原理：</p><p>android原生Activity，Fragment页面有相应的生命周期，曝光会走onResume()方法，</p><p>android原生控件点击事件大多通过系统的View.OnClickListener等的回调方法响应。</p><p>基于这些特性可以想办法Hook这些系统API方法，从而达到动态代理，在代理方法里面实现业务埋点统计功能</p><p>Aop框架：AspectJ,Javassist,ASM,本文以ASM5.0实现</p></li><li><p>无痕埋点SDK Hook工作流程：<br>考虑目前android应用基本上通过AndroidStudio Gradle构建和打包，我们通过自定义Gradle插件，实现在编译期间对class文件进行修改，对所有view点击和触摸事件的回调函数进行hook。</p><pre class="line-numbers language-none"><code class="language-none">eg：onClick(Landroid&#x2F;view&#x2F;View;)VonClick(Landroid&#x2F;content&#x2F;DialogInterface;I)VonItemClick(Landroid&#x2F;widget&#x2F;AdapterView;Landroid&#x2F;view&#x2F;View;IJ)VonItemSelected(Landroid&#x2F;widget&#x2F;AdapterView;Landroid&#x2F;view&#x2F;View;IJ)VonGroupClick(Landroid&#x2F;widget&#x2F;ExpandableListView;Landroid&#x2F;view&#x2F;View;IJ)ZonChildClick(Landroid&#x2F;widget&#x2F;ExpandableListView;Landroid&#x2F;view&#x2F;View;IIJ)ZonRatingChanged(Landroid&#x2F;widget&#x2F;RatingBar;FZ)VonStopTrackingTouch(Landroid&#x2F;widget&#x2F;SeekBar;)VonCheckedChanged(Landroid&#x2F;widget&#x2F;CompoundButton;Z)VonCheckedChanged(Landroid&#x2F;widget&#x2F;RadioGroup;I)V...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从而植入代理方法，进行拦截。</p><p>android 打包工作流程：<img src="/blogs/images/android_compile1.png" class="[图一]" title="[图一]"><br>android 打包工作流程：<img src="/blogs/images/android_compile2.png" class="[图二]" title="[图二]"></p></li></ul><ul><li>编译产物：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">,</span>     <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span>DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnItemClickListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnItemSelectedListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnRatingBarChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnSeekBarChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnCheckedChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span>RadioGroup<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnGroupClickListener</span><span class="token punctuation">,</span> <span class="token class-name">OnChildClickListener</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 植入代理方法</span>      <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onActivityResume</span><span class="token punctuation">(</span><span class="token class-name">BaseActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 植入代理方法</span>        <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> var1<span class="token punctuation">,</span> <span class="token keyword">int</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 植入代理方法</span>        <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token class-name">AdapterView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> var1<span class="token punctuation">,</span> <span class="token class-name">View</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var3<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 植入代理方法</span>        <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var3<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Github: <a href="https://github.com/AllennZhang/AndroidAutoStatistics.git">android字节码插桩与无痕埋点的实现</a></p></li><li><p>无痕埋点SDK 数据采集工作流程：<br>基于第一步字节码插桩会植入我们的代理方法，在代理方法中我们通过当前事件的View生成ViewPath,组织埋点格式的数据，进行本地存储，在合适时机下进行上报。<br>早期我们采集的数据基本基于PV,UV的统计维度进行采集，后期我们进行了扩展满足对业务数据的采集。这里为采集业务数据，我们需要在项目开发阶段，实现业务数据预埋，<br>即View和业务数据绑定，通过view.setTag(id,tag)即可实现。采集的时候通过view.getTag(id) 获取。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据预埋</span><span class="token class-name">DataPairs</span> pairs1 <span class="token operator">=</span> <span class="token class-name">DataPairs</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pairs1<span class="token punctuation">.</span><span class="token function">eventName</span><span class="token punctuation">(</span><span class="token string">"广告跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pairs1<span class="token punctuation">.</span><span class="token function">eventId</span><span class="token punctuation">(</span><span class="token class-name">NewStatisticsCode</span><span class="token punctuation">.</span>跳过<span class="token punctuation">)</span><span class="token punctuation">;</span>pairs1<span class="token punctuation">.</span><span class="token function">eventType</span><span class="token punctuation">(</span><span class="token class-name">StatisticsLogger</span><span class="token punctuation">.</span>ELEMENT_CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TraceCarrier</span><span class="token punctuation">.</span><span class="token function">bindDataPairs</span><span class="token punctuation">(</span>skipBtn<span class="token punctuation">,</span>pairs1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  数据采集</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Object</span> target <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>EVENT_ATTRS_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Object</span> viewTag <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> viewPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> page <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> redpilId <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//redpil埋点id</span>       <span class="token class-name">String</span> eventName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//redpil埋点名称</span>       <span class="token class-name">String</span> extendFileds <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//redpil埋点扩展字段</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">DataPairs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">DataPairs</span> dataPairs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataPairs</span><span class="token punctuation">)</span> target<span class="token punctuation">;</span>           <span class="token class-name">TraceService</span><span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>dataPairs<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 至此，目前通过手动埋点，可视化埋点，无痕埋点的方式都能实现埋点统计和数据采集，但是针对不同的业务，需要采取合理方式，三种方案是互补相辅相成的。<br> 基于埋点方式采集的用户行为进行大数据分析，可以进行千人千面和业务定制化与个性化推荐，带来期望的商业价值。<br> 更多关于无痕埋点方案的介绍，后续会持续完善。这里推荐两篇不错的博文，作为参考。</p><ul><li><a href="https://www.jianshu.com/p/7a59e9384bef">得到Android团队无埋点方案</a></li><li><a href="https://www.jianshu.com/p/8459a75ce5ca">网易HubbleData之Android无埋点实践</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一-前言&quot;&gt;&lt;a href=&quot;#一-前言&quot; class=&quot;headerlink&quot; title=&quot;一 前言&quot;&gt;&lt;/a&gt;一 前言&lt;/h3&gt;&lt;p&gt;目前统计打点已经是一个产品常见的需求，特别是商业性的APP和金融类的APP都会对用户的行为进行采集，基于PV,UV，事件转化</summary>
      
    
    
    
    <category term="埋点" scheme="https://allennzhang.github.io/blogs/categories/%E5%9F%8B%E7%82%B9/"/>
    
    
    <category term="Android" scheme="https://allennzhang.github.io/blogs/tags/Android/"/>
    
    <category term="埋点" scheme="https://allennzhang.github.io/blogs/tags/%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
</feed>
