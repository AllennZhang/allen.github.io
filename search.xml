<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kotlin Multiplatform Mobile基础入门(一)</title>
      <link href="/blogs/2022/05/25/kotlin-multiplatform-mobile-ji-chu-ru-men-yi/"/>
      <url>/blogs/2022/05/25/kotlin-multiplatform-mobile-ji-chu-ru-men-yi/</url>
      
        <content type="html"><![CDATA[<h3 id="一-KMM-项目结构"><a href="#一-KMM-项目结构" class="headerlink" title="一 KMM 项目结构"></a>一 KMM 项目结构</h3><ul><li>KMM工程结构<img src="/blogs/images/kmm_project.png" class="[KMM工程结构]" title="[KMM工程结构]"></li></ul><p>一个基本的 Kotlin 移动多平台项目由三个组件组成：</p><ul><li><p>共享模块——一个 Kotlin 模块，包含 Android 和 iOS 应用程序的通用逻辑。内置于 Android 库和 iOS 框架中。使用 Gradle 作为构建系统。</p></li><li><p>Android 应用程序– 一个内置于 Android 应用程序的 Kotlin 模块。使用 Gradle 作为构建系统。</p></li><li><p>iOS 应用程序– 一个内置到 iOS 应用程序中的 Xcode 项目</p></li><li><p>KMM工程依赖关系</p></li></ul><img src="/blogs/images/kmm_project_struct.png" class="[KMM工程依赖关系]" title="[KMM工程依赖关系]"><h3 id="二共享模块"><a href="#二共享模块" class="headerlink" title="二共享模块"></a>二共享模块</h3><img src="/blogs/images/kotlin-multiplatofrm-hierarchical-structure.png" class="[KMM共享库多平台配置]" title="[KMM共享库多平台配置]"><blockquote><p>共享模块包含两个目标平台中使用的核心应用程序逻辑：类、函数等。这是一个编译成 Android 库和 iOS 框架的Kotlin 多平台模块。它使用 Gradle 并应用了 Kotlin 多平台插件，并具有适用于 Android 和 iOS 的目标</p></blockquote><img src="/blogs/images/kmm_common_gradle.png" class="[KMM共享库gradle配置]" title="[KMM共享库gradle配置]"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// kmm module build.gradle.kts</span>plugins <span class="token punctuation">&#123;</span><span class="token comment">// kmm插件，用于跨平台构建</span><span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"multiplatform"</span></span><span class="token punctuation">)</span><span class="token comment">// 生成android依赖库aar</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.library"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="源集"><a href="#源集" class="headerlink" title="源集"></a>源集</h4><blockquote><p>共享模块包含 Android 和 iOS 应用程序通用的代码。但是，要在 Android 和 iOS 上实现相同的逻辑，您有时需要编写两个特定于平台的版本。为了处理这种情况，Kotlin 提供了期望&#x2F;实际机制。共享模块的源代码相应地组织在三个源集中：</p></blockquote><ul><li><p>commonMain存储适用于两个平台的代码，包括expect声明</p></li><li><p>androidMain存储特定于 Android 的部分，包括actual实现</p></li><li><p>iosMain存储 iOS 特定的部分，包括actual实现</p></li></ul><p>每个源集都有自己的依赖项。Kotlin 标准库会自动添加到所有源代码集中，您无需在构建脚本中声明它</p><h4 id="测试源集"><a href="#测试源集" class="headerlink" title="测试源集"></a>测试源集</h4><p>除了*Main源集，还有三个匹配的测试源集：</p><ul><li><p>commonTest</p></li><li><p>androidTest</p></li><li><p>iosTest</p></li></ul><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><h4 id="android"><a href="#android" class="headerlink" title="android"></a>android</h4><blockquote><p>androidApp中通过直接配置shared module作为依赖项，引入并参与android项目构建</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// app.gradle</span>dependencies <span class="token punctuation">&#123;</span><span class="token comment">// 引入共享模块</span>implementation <span class="token function">project</span><span class="token punctuation">(</span>'<span class="token operator">:</span>shared'<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><img src="/blogs/images/basic-xcode-project.png" class="[KMM-iOSApp结构]" title="[KMM-iOSApp结构]"><blockquote><p>对于 iOS 应用程序的每次构建，项目都会获取最新版本的框架。为此，它使用了一个运行脚本embedAndSignAppleFrameworkForXcode构建阶段，该阶段从共享模块执行Gradle 任务。此任务.framework根据 Xcode 环境设置生成具有所需配置的文件，并将工件放入DerivedDataXcode 目录</p></blockquote><ul><li><p>如果您有 Apple 框架的自定义名称，请embedAndSign<Custom-name>AppleFrameworkForXcode用作此 Gradle 任务的名称。</p></li><li><p>如果您的自定义构建配置不同于默认的Debug or Release，请在Build Settings选项卡上，在User-DefinedKOTLIN_FRAMEWORK_BUILD_TYPE下添加设置并将其设置为 Debug  or Release</p></li></ul><h3 id="三-在已有项目中添加KMM共享模块"><a href="#三-在已有项目中添加KMM共享模块" class="headerlink" title="三 在已有项目中添加KMM共享模块"></a>三 在已有项目中添加KMM共享模块</h3><blockquote><p>在AndroidStudio 中新建一个KMM Module: File—New—Module—Kotlin Multiplatform Shared Module</p></blockquote><img src="/blogs/images/multiplatform-mobile-module-wizard.png" class="[新建KMM Module]" title="[新建KMM Module]"><h4 id="android项目中集成kmm"><a href="#android项目中集成kmm" class="headerlink" title="android项目中集成kmm"></a>android项目中集成kmm</h4><ol><li><p>在业务模块引入共享库依赖</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// app.gradle</span>dependencies <span class="token punctuation">&#123;</span><span class="token comment">// 引入共享模块</span>implementation <span class="token function">project</span><span class="token punctuation">(</span>'<span class="token operator">:</span>shared'<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导包即可使用</p></li></ol><h4 id="iOS项目中集成kmm"><a href="#iOS项目中集成kmm" class="headerlink" title="iOS项目中集成kmm"></a>iOS项目中集成kmm</h4><ol><li><p>在项目设置的Build Phases选项卡上，单击+并添加New Run Script Phase</p><img src="/blogs/images/xcode-run-script-phase-1.png" class="[iOS项目集成KMM Module step1]" title="[iOS项目集成KMM Module step1]"></li><li><p>添加以下脚本：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">cd <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">SRCROOT</span></span><span class="token string">/.."</span></span> <span class="token comment">// 注意这里如果是以cocoapods 方式新建的kmm，此处需要修改为：embedAndSignPodAppleFrameworkForXcode</span><span class="token punctuation">.</span><span class="token operator">/</span>gradlew <span class="token operator">:</span>shared<span class="token operator">:</span>embedAndSignAppleFrameworkForXcode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/blogs/images/xcode-add-run-phase-2.png" class="[iOS项目集成KMM Module step2]" title="[iOS项目集成KMM Module step2]"></li><li><p>将Run Script阶段移到 Compile Sources阶段之前</p><img src="/blogs/images/xcode-run-script-phase-3.png" class="[iOS项目集成KMM Module step3]" title="[iOS项目集成KMM Module step3]"></li><li><p>在Build Settings选项卡上，切换到All build settings 并在Search Paths下指定Framework Search Path</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 注意shared 为kmm module名称</span>$<span class="token punctuation">(</span>SRCROOT<span class="token punctuation">)</span><span class="token operator">/</span><span class="token operator">..</span><span class="token operator">/</span>shared<span class="token operator">/</span>build<span class="token operator">/</span>xcode<span class="token operator">-</span>frameworks<span class="token operator">/</span>$<span class="token punctuation">(</span>CONFIGURATION<span class="token punctuation">)</span><span class="token operator">/</span>$<span class="token punctuation">(</span>SDK_NAME<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/blogs/images/xcode-add-framework-search-path.png" class="[iOS项目集成KMM Module step4]" title="[iOS项目集成KMM Module step4]"></li><li><p>在Build Settings选项卡上，在Linking下指定Other Linker 标志</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// 注意shared 为kmm module名称</span>$<span class="token punctuation">(</span>inherited<span class="token punctuation">)</span> <span class="token operator">-</span>framework shared<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/blogs/images/xcode-add-flag.png" class="[iOS项目集成KMM Module step5]" title="[iOS项目集成KMM Module step5]"></li></ol><blockquote><p>如果您的自定义构建配置不同于默认的Debugor Release，请在Build Settings选项卡上，在User-DefinedKOTLIN_FRAMEWORK_BUILD_TYPE下添加设置并将其设置为 Debug or DebugRelease</p></blockquote><ol start="6"><li>导入共享模块即可使用</li></ol><blockquote><p><a href="https://kotlinlang.org/docs/multiplatform-mobile-ios-dependencies.html#add-a-framework-without-cocoapods">关于iOS项目依赖配置说明</a></p></blockquote><h4 id="iOS集成过程中常见错误"><a href="#iOS集成过程中常见错误" class="headerlink" title="iOS集成过程中常见错误"></a>iOS集成过程中常见错误</h4><blockquote><p>kmm中使用了 kotlin协程 suspend 函数，则在swift&#x2F;Object-C在只能在主线程调用，否则报以下错误:</p></blockquote><img src="/blogs/images/kmm_suspend_error.png" class="[suspend function error in swift]" title="[suspend function error in swift]"><blockquote><p>在主线程执行 kmm suspend函数，注意 启动协程需要自定义CoroutineDispatcher，并且通过dispatch_async(dispatch_get_main_queue())来执行任务，<br>否则会报错：There is no event loop. Use runBlocking { … } to start one</p></blockquote><ul><li>解决方案：<a href="https://github.com/Kotlin/kotlinx.coroutines/issues/470">Default dispatcher and UI dispatcher support for iOS</a></li></ul><h3 id="四-连接到特定平台的API-expect-actual机制"><a href="#四-连接到特定平台的API-expect-actual机制" class="headerlink" title="四 连接到特定平台的API (expect-actual机制)"></a>四 连接到特定平台的API (expect-actual机制)</h3><blockquote><p>KMM 提供了一种expect-actual机制，使用这种机制，公共源集定义了预期声明，平台源集必须提供与预期声明相对应的实际声明。这适用于大多数 Kotlin 声明，例如函数、类、接口、枚举、属性和注释<br>编译器确保expect公共模块中的每个用关键字标记的声明actual在所有平台模块中都有相应的用关键字标记的声明</p></blockquote><img src="/blogs/images/expect-actual.png" class="[expect-actual机制]" title="[expect-actual机制]"><h4 id="expect-actual机制的一些原则："><a href="#expect-actual机制的一些原则：" class="headerlink" title="expect-actual机制的一些原则："></a>expect-actual机制的一些原则：</h4><ul><li><p>预期的声明用expect关键字标记；实际声明用actual关键字标记。</p></li><li><p>expect和actual声明具有相同的名称并位于同一个包中（具有相同的完全限定名称）。</p></li><li><p>expect声明从不包含任何实现代码，默认情况下是抽象的。</p></li><li><p>在接口中，expect声明中的函数不能有主体，但它们的actual对应物可以是非抽象的并且有主体。它允许继承者不实现特定功能。</p></li><li><p>表示普通继承者不需要实现函数，将其标记为open. 它的所有actual实现都需要有一个主体</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Common</span><span class="token keyword">expect</span> <span class="token keyword">interface</span> Mascot <span class="token punctuation">&#123;</span><span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token punctuation">&#125;</span><span class="token keyword">class</span> MascotImpl <span class="token operator">:</span> Mascot <span class="token punctuation">&#123;</span><span class="token comment">// it's ok not to implement `display()`: all `actual`s are guaranteed to have a default implementation</span><span class="token punctuation">&#125;</span><span class="token comment">// Platform-specific</span><span class="token keyword">actual</span> <span class="token keyword">interface</span> Mascot <span class="token punctuation">&#123;</span><span class="token keyword">actual</span> <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>如果您想要在共享代码中使用特定于平台的库，同时为另一个平台提供您自己的实现，您可以提供一个typealias现有类作为实际声明</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// Common</span><span class="token keyword">expect</span> <span class="token keyword">class</span> AtomicRef<span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token operator">:</span> V<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> V<span class="token keyword">fun</span> <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">getAndSet</span><span class="token punctuation">(</span>value<span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token operator">:</span> V<span class="token keyword">fun</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">expect</span><span class="token operator">:</span> V<span class="token punctuation">,</span> update<span class="token operator">:</span> V<span class="token punctuation">)</span><span class="token operator">:</span> Boolean<span class="token punctuation">&#125;</span><span class="token comment">// Platform-Java</span><span class="token keyword">actual</span> <span class="token keyword">typealias</span> AtomicRef<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReference<span class="token operator">&lt;</span>V<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/blogs/images/expect-actual-example.png" class="[expect-actual示例]" title="[expect-actual示例]">]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 跨平台 </tag>
            
            <tag> android </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Multiplatform Mobile简介</title>
      <link href="/blogs/2022/05/24/kotlin-multiplatform-mobile-jian-jie/"/>
      <url>/blogs/2022/05/24/kotlin-multiplatform-mobile-jian-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-什么是KMM"><a href="#一-什么是KMM" class="headerlink" title="一 什么是KMM"></a>一 什么是KMM</h3><blockquote><p>Kotlin Multiplatform Mobile (KMM) 是 JetBrains 提供的跨平台移动开发 SDK。 它使用 Kotlin 的多平台功能 ，包含各种工具和功能，旨在使移动跨平台应用程序的端到端构建体验尽可能愉快和高效</p></blockquote><blockquote><p>应用程序的 Android 和 iOS 版本通常有很多共同点，但也会有很大不同 – 尤其在 UI 方面 – 无论是滚动行为的微妙变化，还是迥异的导航逻辑。 同时，应用程序的业务逻辑，包括数据管理、分析和认证等功能，往往是相同的。 因此，标准操作是跨平台共享应用程序的某些部分，同时保持其他部分完全相互独立</p></blockquote><blockquote><p>通过 KMM，您可以获得这种灵活性，并保留原生编程的优势。 将单个代码库用于 iOS 和 Android 应用的业务逻辑，只在实施原生 UI 有必要时或使用平台特定 API 时编写平台特定代码</p></blockquote><img src="/blogs/images/KMM-release-scheme_Blogpost.jpeg" class="[KMM共享]" title="[KMM共享]"><blockquote><p>KMM 与您的移动项目无缝集成。 Kotlin 编写的共享代码通过 Kotlin&#x2F;JVM 编译为 JVM 字节码，经 Kotlin&#x2F;Native 编译为原生二进制文件，因此您可以像使用其他常规移动库一样使用 KMM 业务逻辑模块</p></blockquote><blockquote><p><a href="https://blog.jetbrains.com/zh-hans/kotlin/2020/09/kotlin-multiplatform-mobile-alpha/">更多关于KMM的介绍</a></p></blockquote><h3 id="KMM-跨端原理"><a href="#KMM-跨端原理" class="headerlink" title="KMM 跨端原理"></a>KMM 跨端原理</h3><blockquote><p>Kotlin&#x2F;Native 是一种将 Kotlin 代码编译为无需虚拟机就可运行的原生二进制文件的技术。 它是一个基于 <a href="https://llvm.org/">LLVM</a> 的 Kotlin 编译器后端以及 Kotlin 标准库的原生实现<br><a href="https://www.jianshu.com/p/1367dad95445LLVM">深入浅出让你理解什么是LLVM</a></p></blockquote><img src="/blogs/images/LLVM.jpg" class="[LLVM架构]" title="[LLVM架构]"><blockquote><p><a href="https://www.kotlincn.net/docs/reference/native-overview.html">Kotlin&#x2F;Native原生开发</a></p></blockquote><h4 id="目标平台"><a href="#目标平台" class="headerlink" title="目标平台"></a>目标平台</h4><ul><li>iOS（arm32、 arm64、 模拟器 x86_64）</li><li>macOS（x86_64）</li><li>watchOS (arm32、 arm64、 x86)</li><li>tvOS (arm64、 x86_64)</li><li>Android（arm32、arm64、 x86、 x86_64）</li><li>Windows（mingw x86_64、 x86）</li><li>Linux（x86_64、 arm32、 arm64、 MIPS、 MIPS 小端次序）</li><li>WebAssembly（wasm32）</li></ul><img src="/blogs/images/kotlin-multiplatform.png" class="[Kotlin跨平台原理]" title="[Kotlin跨平台原理]"><h3 id="如何使用KMM进行开发"><a href="#如何使用KMM进行开发" class="headerlink" title="如何使用KMM进行开发"></a>如何使用KMM进行开发</h3><blockquote><p>环境要求</p></blockquote><ul><li>安装Android Studio 4.2 或 2020.3.1 Canary 8 或更高版本</li><li>安装Xcode – 11.3 或更高版本</li></ul><blockquote><p><a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile">适用于 Android Studio 的 KMM 插件</a></p></blockquote><blockquote><p>1.在Android Studio 中请选择 Preferences | Plugins，在 Marketplace 中搜索 Kotlin Multiplatform Mobile，然后进行安装，之后即可在Android Studio编写、运行、测试和调试共享代码，而无需切换到其他 IDE。</p></blockquote><blockquote><p>使用新插件，您可以直接在 Android Studio 中整合 iOS 设备和模拟器。 这将提供以下功能：</p></blockquote><ul><li>使用预定义运行配置，在模拟器或设备上运行和调试 iOS 应用程序。</li><li>在 iOS 模拟器上运行和调试常见测试和 iOS 特定测试</li></ul><blockquote><p>2.借助 New Kotlin Multiplatform Mobile Project 向导，就可以通过共享代码库创建随时可运行的移动应用程序项目。选择对应的品台(android&#x2F;iOS)点击Run即可运行和调试</p></blockquote><ul><li><p>step1 AndroidStudio—File—New—Project</p><img src="/blogs/images/multiplatform-mobile-project-wizard-1.png" class="[New KMM Project step1]" title="[New KMM Project step1]"></li><li><p>step2 工程名称及目录配置</p><img src="/blogs/images/multiplatform-mobile-project-wizard-2.png" class="[New KMM Project step2]" title="[New KMM Project step2]"></li><li><p>step3 kmm 名称及配置</p><img src="/blogs/images/multiplatform-mobile-project-wizard-3.png" class="[New KMM Project step3]" title="[New KMM Project step3]"></li><li><p>step4 运行与调试(android)</p><img src="/blogs/images/kmm_run_android.png" class="[New KMM Project step4]" title="[New KMM Project step4]"></li><li><p>step5 运行与调试(iOS)</p><blockquote><p>在AndroidStudio中运行iOS,如果xcode的安装位置不是&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer，可能识别不了，Could not detect version of installed Xcode<br>解决方案：<a href="https://stackoverflow.com/questions/69733017/kmm-kotlin-multiplatform-mobile-error-could-not-detect-version-of-installed-xco">stackoverflow</a></p></blockquote></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// in terminal</span>xcode<span class="token operator">-</span>select <span class="token operator">-</span>p<span class="token comment">// make sure reply with /Applications/Xcode.app/Contents/Developer</span><span class="token comment">// if not ,try this in terminal</span>xcode<span class="token operator">-</span>select <span class="token operator">-</span>s <span class="token operator">/</span>Applications<span class="token operator">/</span>Xcode<span class="token punctuation">.</span>app<span class="token operator">/</span>Contents<span class="token operator">/</span>Developer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <img src="/blogs/images/kmm_run_iOS.png" class="[New KMM Project step5]" title="[New KMM Project step5]"><blockquote><p><a href="https://kotlinlang.org/docs/multiplatform-mobile-getting-started.html">Kotlin多平台官方教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 跨平台 </tag>
            
            <tag> android </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javassist简介与使用教程</title>
      <link href="/blogs/2021/11/20/javassist-jian-jie-yu-shi-yong-jiao-cheng/"/>
      <url>/blogs/2021/11/20/javassist-jian-jie-yu-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p> Java 字节码以二进制的形式存储在 .class 文件中，每一个 .class 文件包含一个 Java 类或接口。Javaassist 就是一个用来 处理 Java 字节码的类库。它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，并且不需要对字节码方面有深入的了解。同时也可以去生成一个新的类对象，通过完全手动的方式。</p></blockquote><h4 id="1-引用Javassist类库"><a href="#1-引用Javassist类库" class="headerlink" title="1 引用Javassist类库"></a>1 引用Javassist类库</h4><ul><li><p>Maven 方式</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>javassist<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.27</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>GA<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Gradle 方式</p></li></ul><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">repositories <span class="token punctuation">&#123;</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token string">'org.javassist:javassist:3.27.0-GA'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Javassist主要API"><a href="#2-Javassist主要API" class="headerlink" title="2 Javassist主要API"></a>2 Javassist主要API</h4><ul><li><p>在 Javassist 中，类 <code>Javaassit.CtClass</code> 表示 class 文件。一个 CtClass (编译时类）对象可以处理一个 class 文件，<code>ClassPool</code>是 <code>CtClass</code> 对象的容器。它按需读取类文件来构造 <code>CtClass</code> 对象，并且保存 <code>CtClass</code> 对象以便以后使用</p></li><li><p>ClassPool</p><ul><li>ClassPool 会在内存中维护所有被它创建过的 CtClass</li><li>getDefault : 返回默认的<code>ClassPool</code> 是单例模式的，一般通过该方法创建我们的ClassPool</li><li>appendClassPath, insertClassPath : 将一个<code>ClassPath</code>加到类搜索路径的末尾位置 或 插入到起始位置。通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的尴尬</li><li>get , getCtClass : 根据类路径名获取该类的CtClass对象，用于后续的编辑</li></ul></li><li><p>CtClass</p><ul><li><p>removeMethod： 移除方法</p></li><li><p>addMethod： 添加方法</p></li><li><p>removeField：移除成员变量</p></li><li><p>addField： 添加成员变量</p></li><li><p>freeze : 冻结一个类，使其不可修改</p></li><li><p>isFrozen : 判断一个类是否已被冻结</p></li><li><p>prune : 删除类不必要的属性，以减少内存占用。调用该方法后，许多方法无法将无法正常使用，慎用</p></li><li><p>defrost : 解冻一个类，使其可以被修改。如果事先知道一个类会被defrost， 则禁止调用 prune 方法</p></li><li><p>detach : 将该class从ClassPool中删除</p></li><li><p>toClass : 通过类加载器加载该CtClass将修改后的CtClass加载至当前线程的上下文类加载器中，CtClass的<code>toClass</code>方法是通过调用本方法实现。<strong>需要注意的是一旦调用该方法，则无法继续修改已经被加载的class</strong></p></li><li><p>writeFile : 根据CtClass生成 <code>.class</code> 文件</p></li></ul></li><li><p>CtMethod</p><ul><li>CtMthod代表类中的某个方法，可以通过CtClass提供的API获取或者CtNewMethod新建</li><li>insertBefore : 在方法的起始位置插入代码；</li><li>insterAfter : 在方法的所有 return 语句前插入代码以确保语句能够被执行，除非遇到exception</li><li>insertAt : 在指定的位置插入代码</li><li>setBody : 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除</li><li>make : 创建一个新的方法</li></ul></li><li><p>CtField</p></li><li><p>CtField代表CtClass的成员变量</p></li><li><p>make: 生成新的成员变量</p></li></ul><h4 id="3注意事项"><a href="#3注意事项" class="headerlink" title="3注意事项"></a>3注意事项</h4><table><thead><tr><th align="left">符号</th><th>含义</th></tr></thead><tbody><tr><td align="left">$0, $1, $2, …</td><td>$0表示this，$1表示方法第一个参数 …</td></tr><tr><td align="left">$args</td><td>方法参数数组.它的类型为 Object[]，注意：$arg[0]对应$1</td></tr><tr><td align="left">$$</td><td>所有实参。例如, m($$) 等价于 m($1,$2,…)</td></tr><tr><td align="left">$cflow(…)</td><td>cflow 变量</td></tr><tr><td align="left">$r</td><td>返回结果的类型，用于强制类型转换</td></tr><tr><td align="left">$w</td><td>包装器类型，用于强制类型转换  ,eg: Integer i &#x3D; ($w)5;</td></tr><tr><td align="left">$_</td><td>返回值</td></tr><tr><td align="left">$sig</td><td>类型为 java.lang.Class 的参数类型数组</td></tr><tr><td align="left">$type</td><td>一个 java.lang.Class 对象，表示返回值类型</td></tr><tr><td align="left">$class</td><td>一个 java.lang.Class 对象，当前正在修改的类</td></tr></tbody></table><ul><li><p>在写入某些对象是要加上包全路径名称</p><blockquote><p>例如： Date，List，Map 或者自定义的类</p><p>classPool.importPackage(“java.util.List”)</p></blockquote></li><li><p>在使用泛型<E>时，泛型定义需要使用&#x2F;**&#x2F;将其包括起来</p><blockquote><p>例如：List<String> 需要写成 List&#x2F;<em><String></em>&#x2F;</p></blockquote></li><li><p>某些类型的定义不能使用 引用类型 只能 使用 基本类型</p><blockquote><p>例如：Float,Long</p><p>不能使用Float.valueOf(),只能使用Float.parseFloat() 转换</p></blockquote></li></ul><h4 id="4-示例代码"><a href="#4-示例代码" class="headerlink" title="4 示例代码"></a>4 示例代码</h4><ul><li><p>添加成员变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">/**     * 添加成员变量     */</span><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">addMemberVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 类库, jvm中所加载的class</span>        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 店家目标类搜索路径</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 导入 android.jar</span>            pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 导入目标类所在的路径</span>          pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取目标类</span>            <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span>pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 解冻</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 给目标类添加成员变量</span>            ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token class-name">CtField</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"private static String  TAG = \"PayecoPluginLoadingActivity\";"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移除成员变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 移除成员变量 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeMemberField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类移除成员变量 f</span>        <span class="token class-name">CtField</span> ctField <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctField <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">removeField</span><span class="token punctuation">(</span>ctField<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加成员方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *添加成员方法 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addMemberMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导包</span>        pool<span class="token punctuation">.</span><span class="token function">importPackage</span><span class="token punctuation">(</span><span class="token string">"java.util"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类添加成员方法</span>        <span class="token comment">// 注意在使用&lt;>这样的泛型定义 标识时 要使用 /* */ 将其包括起来</span>        <span class="token comment">// for-each 不支持，for in 是可以的，暂时不知道什么原因， for(Object o : data)&#123;</span>        <span class="token comment">//        System.out.println(o);</span>        <span class="token comment">//      &#125;</span>        <span class="token class-name">String</span> methodBody <span class="token operator">=</span> <span class="token string">"public  void sayHello() &#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"    java.util.List/*&lt;String>*/ data = new java.util.ArrayList();\n"</span> <span class="token operator">+</span>                <span class="token string">"    data.add(\"张三\");\n"</span> <span class="token operator">+</span>                <span class="token string">"    data.add(\"李四\");\n"</span> <span class="token operator">+</span>                <span class="token string">"    data.add(\"王五\");\n"</span> <span class="token operator">+</span>                <span class="token string">"    for(int i = 0; i&lt; data.size();i++)&#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"       System.out.println(data.get(i)+\" say hello\");\n"</span> <span class="token operator">+</span>                <span class="token string">"      &#125;\n"</span> <span class="token operator">+</span>                <span class="token string">"&#125;"</span><span class="token punctuation">;</span>        <span class="token class-name">CtMethod</span> newMethod <span class="token operator">=</span> <span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>methodBody<span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>newMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>移除成员方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 移除成员方法 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeMemberMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类移除成员方法 f</span>        <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctMethod <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在方法中插入代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 在方法中插入代码  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertCodeForMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 店家目标类搜索路径</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 导入 android.jar</span>         pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 导入目标类所在的路径</span>       pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取目标类</span>         <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 解冻</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         <span class="token comment">// 给目标类成员方法 onCreate 添加代码</span>         <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"onCreate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">"System.out.println($0+\"insert  onCreate() before\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">"System.out.println($0+\"insert  onCreate() after\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 给c方法指定行插入代码</span>         <span class="token class-name">CtMethod</span> ctMethod1 <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ControlFlow</span> flow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControlFlow</span><span class="token punctuation">(</span>ctMethod1<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">ControlFlow<span class="token punctuation">.</span>Block</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blocks <span class="token operator">=</span> flow<span class="token punctuation">.</span><span class="token function">basicBlocks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ControlFlow<span class="token punctuation">.</span>Block</span> block <span class="token operator">:</span> blocks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">String</span> blockIndex <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>block<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> p1 <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//计算源代码的行号，Source code line position from binary line position</span>             <span class="token keyword">int</span> pos <span class="token operator">=</span> ctMethod1<span class="token punctuation">.</span><span class="token function">getMethodInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLineNumber</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"blockIndex="</span><span class="token operator">+</span>blockIndex<span class="token operator">+</span><span class="token string">",p1="</span><span class="token operator">+</span>p1<span class="token operator">+</span><span class="token string">",pos="</span><span class="token operator">+</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"block="</span><span class="token operator">+</span>block<span class="token punctuation">.</span>clientData<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>blockIndex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 ctMethod1<span class="token punctuation">.</span><span class="token function">insertAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span><span class="token string">"System.out.println($0+\"insert  a(\"+$1+\") at line num:"</span><span class="token operator">+</span>pos<span class="token operator">+</span><span class="token string">"\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">BadBytecode</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改方法体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** *修改方法体 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMethodBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>      pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.PayecoPluginLoadingActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给目标类成员方法 f 设置方法体</span>        <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodBody <span class="token operator">=</span> <span class="token string">" System.out.println(\"new methodBody\");"</span><span class="token punctuation">;</span>        ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>methodBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建和生成class</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 创建一个类  */</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 创建一个类</span>         <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.loading.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 新增字段 name</span>         <span class="token class-name">CtField</span> member1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtField</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         member1<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span>PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 设置初始值</span>         ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span><span class="token class-name">CtField<span class="token punctuation">.</span>Initializer</span><span class="token punctuation">.</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//新增字段 age</span>         <span class="token class-name">CtField</span> member2 <span class="token operator">=</span> <span class="token class-name">CtField</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"private int age = 0 ;"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span>member2<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 生成getter setter</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span>member1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">,</span>member1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span>member2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span><span class="token class-name">CtNewMethod</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token string">"getAge"</span><span class="token punctuation">,</span>member2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 添加无参构造函数</span>         <span class="token class-name">CtConstructor</span> cons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         cons<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">" &#123; name = \"小明\"; \n"</span> <span class="token operator">+</span>                 <span class="token string">"          age = 18;  \n"</span> <span class="token operator">+</span>                 <span class="token string">"        &#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 添加有参构造函数</span>         cons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// $0=this, $1,$2,$3... 代表方法参数</span>         cons<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123; $0.name=$1;\n"</span> <span class="token operator">+</span>                 <span class="token string">"        $0.age=$2;&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 创建一个 sayHello 方法 无参数，返回类型为void</span>         <span class="token class-name">CtMethod</span> ctMethod <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtMethod</span><span class="token punctuation">(</span><span class="token class-name">CtClass</span><span class="token punctuation">.</span>voidType<span class="token punctuation">,</span><span class="token string">"sayHello"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">setModifiers</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token punctuation">;</span>         ctMethod<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"&#123;System.out.println($0.getName()+ \" sayHello\");&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">addMethod</span><span class="token punctuation">(</span>ctMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取接口</span>         <span class="token class-name">CtClass</span> interfaceI <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"java.io.Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 使代码生成的类，实现 Serializable 接口</span>         ctClass<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>interfaceI<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 创建实例</span>         <span class="token class-name">Class</span> clz <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Object</span> instance <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Method</span> method <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 保存class 文件</span>         ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5实战，修复易联支付sdk的crash"><a href="#5实战，修复易联支付sdk的crash" class="headerlink" title="5实战，修复易联支付sdk的crash"></a>5实战，修复易联支付sdk的crash</h4><blockquote><p>情景回放：由于项目的targetSdk升级到29，导致TelephonyManager.getDeviceId() 不可用，抛异常crash，由于沟通之后第三方暂未兼容，尝试自己修复,需要hook相应方法，修改代码逻辑</p></blockquote><ol><li><p>使用zip命令解压原始jar或则aar</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用unzip命令，将jar包 解压到指定目录unzip .&#x2F;FixBug&#x2F;lib&#x2F;eco_pay_classes.jar -d .&#x2F;FixBug&#x2F;lib&#x2F;fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用Javassist 进行字节码修改，修复问题</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fixEcoPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 店家目标类搜索路径</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 导入 android.jar</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/Library/Android/sdk/platforms/android-30/android.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 导入目标类所在的路径</span>        pool<span class="token punctuation">.</span><span class="token function">appendClassPath</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/lib/eco_pay_classes.jar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取目标类</span>        <span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getCtClass</span><span class="token punctuation">(</span><span class="token string">"com.payeco.android.plugin.d.k"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解冻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctClass<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ctClass<span class="token punctuation">.</span><span class="token function">defrost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取目标method</span>        <span class="token class-name">CtMethod</span> methodB <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"android.content.Context"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fixCode <span class="token operator">=</span> <span class="token string">"if(true)&#123;\n"</span> <span class="token operator">+</span>                <span class="token string">"\treturn \"\";\n"</span> <span class="token operator">+</span>                <span class="token string">"&#125;"</span><span class="token punctuation">;</span>        methodB<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>fixCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">addField</span><span class="token punctuation">(</span><span class="token class-name">CtField</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token string">"private static String aaa = \"12345\";"</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CtMethod</span> methodC <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"android.content.Context"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodC<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>fixCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"/Users/username/xxx/IDE/FixBug/build"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NotFoundException</span> <span class="token operator">|</span> <span class="token class-name">CannotCompileException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>将修改之后的class对第一步解压之后的class文件进行替换，并使用zip命令重新生成jar包</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用zip -r 将解压缩之后的所有class文件，压缩到eco_pay_classes_fix.jarzip -r ..&#x2F;eco_pay_classes_fix.jar .&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将修复之后的jar在工程中进行替换即可</p></li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://www.cnblogs.com/rickiyang/p/11336268.html">https://www.cnblogs.com/rickiyang/p/11336268.html</a></li><li><a href="https://blog.csdn.net/qq_42426159/article/details/109156048">https://blog.csdn.net/qq_42426159/article/details/109156048</a></li><li><a href="http://cn.voidcc.com/question/p-cpcynmot-tb.html">http://cn.voidcc.com/question/p-cpcynmot-tb.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> 字节码 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Q 文件存储兼容方案</title>
      <link href="/blogs/2021/09/26/android-q-wen-jian-cun-chu-jian-rong-fang-an/"/>
      <url>/blogs/2021/09/26/android-q-wen-jian-cun-chu-jian-rong-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了让用户更好地控制自己的文件，并限制文件混乱的情况，Android Q修改了APP访问外部存储中文件的方法。外部存储的新特性被称为Scoped Storage。</p><p>Android Q仍然使用READ_EXTERNAL_STORAGE和WRITE_EXTERNAL_STORAGE作为面向用户的存储相关运行时权限，但现在即使获取了这些权限，访问外部存储也受到了限制。</p><p>APP需要这些运行时权限的情景发生了变化，且各种情况下外部存储对APP的可见性也发生了变化。</p><p>在Scoped Storage新特性中，外部存储空间被分为两部分：</p><ul><li>公共目录：Downloads、Documents、Pictures 、DCIM、Movies、Music、Ringtones等<br>公共目录下的文件在APP卸载后，不会删除。<br>APP可以通过SAF(System Access Framework)、MediaStore接口访问其中的文件。</li><li>App-specific目录<br>APP卸载后，数据会清除。<br>APP的私密目录，APP访问自己的App-specific目录时无需任何权限</li><li><a href="https://open.oppomobile.com/wiki/doc#id=10432">OPPO关于android Q文件储存变更描述</a></li><li><a href="https://developer.android.google.cn/about/versions/10/privacy/changes?hl=zh#scoped-storage">Google关于android Q文件存储变更描述</a></li></ul><h2 id="一、Android-Q-文件存储行为变更"><a href="#一、Android-Q-文件存储行为变更" class="headerlink" title="一、Android Q 文件存储行为变更"></a>一、Android Q 文件存储行为变更</h2><ul><li><p>无法直接在SD卡创建文件夹</p></li><li><p>无法直接访问SD公有目录（Downloads、Documents、Pictures 、DCIM、Movies、Music、Ringtones等）的文件</p></li><li><p>API变更，Environment.getExternalStorageDirectory() 在android Q及以上版本不再适用，需要使用MediaStore接口</p></li></ul><h2 id="二、文件操作API示例："><a href="#二、文件操作API示例：" class="headerlink" title="二、文件操作API示例："></a>二、文件操作API示例：</h2><ul><li>更多用法参考：com.yt.utils.MediaStoreUtils ,已经对MediaStore接口做了相应封装，另外，由于api限制，保存文件时需要对 Build.VERSION.SDK_INT进行判断（android 10 以上走MediaStore，10以下直接通过File IO操作</li><li>如果不需要共享的文件，尽量使用context.getExternalCacheDir();获取公共缓存目录，需要申请sd卡存储权限）</li></ul><h3 id="2-1-查询文件URI"><a href="#2-1-查询文件URI" class="headerlink" title="2.1 查询文件URI"></a>2.1 查询文件URI</h3> <pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Uri</span> <span class="token function">queryMediaStoreImageUri</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">MediaQuery</span> query<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> query <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>query<span class="token punctuation">.</span><span class="token function">validRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查询video文件 请使用 MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span>    <span class="token class-name">Uri</span> externalUri <span class="token operator">=</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">;</span>    <span class="token class-name">ContentResolver</span> resolver <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Cursor</span> cursor <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>externalUri<span class="token punctuation">,</span> query<span class="token punctuation">.</span>projection<span class="token punctuation">,</span> query<span class="token punctuation">.</span>selection<span class="token punctuation">,</span>query<span class="token punctuation">.</span>args<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Uri</span> imageUri <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursor <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cursor<span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        imageUri <span class="token operator">=</span> <span class="token class-name">ContentUris</span><span class="token punctuation">.</span><span class="token function">withAppendedId</span><span class="token punctuation">(</span>externalUri<span class="token punctuation">,</span>cursor<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> imageUri<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-读取文件"><a href="#2-2-读取文件" class="headerlink" title="2.2 读取文件"></a>2.2 读取文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">File</span> <span class="token function">copyMediaStoreToExternalCache</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">Uri</span> imageUri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> imageUri <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> dateStamp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd_HHmmss"</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> mills <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> dir <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getExternalCacheDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> mimeType <span class="token operator">=</span> <span class="token function">getMime</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>imageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"hipac_cache_"</span><span class="token operator">+</span>dateStamp<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>mills<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>mimeType<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        file <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token string">"hipac_cache_"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token operator">+</span>mimeType<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ioException<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 打开文件输入流</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openInputStream</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> outBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            outBuffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        outBuffer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"readMediaStoreImage() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> file<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-将图片文件转成Bitmap"><a href="#2-3-将图片文件转成Bitmap" class="headerlink" title="2.3 将图片文件转成Bitmap"></a>2.3 将图片文件转成Bitmap</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bitmap</span> <span class="token function">readMediaStoreImage</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Uri</span> imageUri<span class="token punctuation">,</span> <span class="token class-name">BitmapFactory<span class="token punctuation">.</span>Options</span> options<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> imageUri <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// "r" 表示读，"w"表示写，</span>    <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ParcelFileDescriptor</span> pdf <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openFileDescriptor</span><span class="token punctuation">(</span>imageUri<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeFileDescriptor</span><span class="token punctuation">(</span>pdf<span class="token punctuation">.</span><span class="token function">getFileDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"readMediaStoreImage() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> bitmap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-保存图片-x2F-视频到相册"><a href="#2-4-保存图片-x2F-视频到相册" class="headerlink" title="2.4 保存图片&#x2F;视频到相册"></a>2.4 保存图片&#x2F;视频到相册</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WorkerThread</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertImageToMediaStore</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">File</span> sourceFile<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> sourceFile <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>sourceFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">String</span> fileName <span class="token operator">=</span> sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> suffix <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> mimePair <span class="token operator">=</span> <span class="token function">getMime</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> mime <span class="token operator">=</span> mimePair<span class="token punctuation">.</span>first<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isVideo <span class="token operator">=</span> <span class="token string">"video"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mimePair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ContentValues</span> contentValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DISPLAY_NAME<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>TITLE<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATE_TAKEN<span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mime<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>MIME_TYPE<span class="token punctuation">,</span>mime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>Q</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">// android Q 不再使用DATA字段，应该使用RELATIVE_PATH代替，相对于系统公有目录的路径,eg: "Pictures/hipac"</span>          <span class="token class-name">String</span> relativePath <span class="token operator">=</span> isVideo <span class="token operator">?</span> <span class="token string">"DCIM"</span> <span class="token operator">:</span> <span class="token string">"Pictures/hipac"</span><span class="token punctuation">;</span>          contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>RELATIVE_PATH<span class="token punctuation">,</span>relativePath<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Uri</span> externalUri <span class="token operator">=</span> isVideo <span class="token operator">?</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Video<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI <span class="token operator">:</span> <span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>EXTERNAL_CONTENT_URI<span class="token punctuation">;</span>          <span class="token class-name">Uri</span> insertUri <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>externalUri<span class="token punctuation">,</span>contentValues<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>insertUri <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openOutputStream</span><span class="token punctuation">(</span>insertUri<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">BufferedOutputStream</span> bufferWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      bufferWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                  bufferWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"insertImageToMediaStore() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// android 10 以下用insert方法，是直接插入到/storage/sdcard0，相册选择可能有问题</span>          contentValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span>DATA<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">File</span> externalDir <span class="token operator">=</span> isVideo <span class="token operator">?</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStoragePublicDirectory</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>DIRECTORY_DCIM<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStoragePublicDirectory</span><span class="token punctuation">(</span><span class="token class-name">Environment</span><span class="token punctuation">.</span>DIRECTORY_PICTURES<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">File</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>externalDir<span class="token punctuation">,</span><span class="token string">"hipac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              parent<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span>sourceFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>destFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                  destFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"insertImageToMediaStore() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">BufferedOutputStream</span> outBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">int</span> len <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  outBuffer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              outBuffer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              context<span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_MEDIA_SCANNER_SCAN_FILE<span class="token punctuation">,</span><span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Logs</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"ImageUtils"</span><span class="token punctuation">,</span><span class="token string">"insertImageToMediaStore() error="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 文件存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android简单数据存储方式浅析</title>
      <link href="/blogs/2020/12/01/android-jian-dan-shu-ju-cun-chu-fang-shi-qian-xi/"/>
      <url>/blogs/2020/12/01/android-jian-dan-shu-ju-cun-chu-fang-shi-qian-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>android开发中，对于简单数据(int,float,boolean,String)键值对的存储，相信大家对于SharedPreferences一定不陌生，是Android官方提供的一个基础组件，使用简单方便，但是也有一些缺陷，如主线程阻塞ANR，<br>不能保证类型安全，加载的数据会保留在内存造成内存浪费。针对此优化，最新的JetPack组件库中提供了DataStore组件来避免这些问题，并提供了SharedPreferences迁移的可能性。当然除此之外，腾讯也提供了一款<br>比较优秀的数据存储组件MMKV,开发者也可以从SharedPreferences迁移到MMKV。</p><p>SharedPreferences DataStore MMKV对比：<img src="/blogs/images/mmkv_sp_data_store.jpg" class="[图一]" title="[图一]"> </p><p>SharedPreferences DataStore 差异：<img src="/blogs/images/sp_vs_data_store.png" class="[图二]" title="[图二]"> </p><h3 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h3><ul><li>SharedPreferences是一种轻量级的数据存储方式，采用键值对的存储方式。</li><li>SharedPreferences只能存储少量数据，大量数据不能使用该方式存储，支持存储的数据类型有boolean, float, int, long,  String。</li><li>SharedPreferences存储到一个XML文件中的，路径在&#x2F;data&#x2F;data&#x2F;<packagename>&#x2F;shared_prefs&#x2F;下</li></ul><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取sp对象</span>        <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"user_info"</span><span class="token punctuation">,</span><span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取键值对</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> userAge <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"userAge"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Float</span> userHeight <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getFloat</span><span class="token punctuation">(</span><span class="token string">"userHeight"</span><span class="token punctuation">,</span><span class="token number">0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span>  single <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserInfo</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">// 获取sp对象</span>         <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"user_info"</span><span class="token punctuation">,</span><span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//更新数据</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Float</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putFloat</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-重识SharedPreferences"><a href="#2-重识SharedPreferences" class="headerlink" title="2. 重识SharedPreferences"></a>2. 重识SharedPreferences</h4><ul><li>通过 getXXX() 方法获取数据，可能会导致主线程阻塞</li><li>SharedPreference 不能保证类型安全</li><li>SharedPreference 加载的数据会一直留在内存中，浪费内存</li><li>apply() 方法虽然是异步的，可能会发生 ANR，在 8.0 之前和 8.0 之后实现各不相同</li><li>apply() 方法无法获取到操作成功或者失败的结果</li></ul><p>getXXX() 方法可能会导致主线程阻塞</p><blockquote><p>调用 getSharedPreferences() 方法，最终会调用  SharedPreferencesImpl#startLoadFromDisk() 方法开启一个线程异步读取数据</p></blockquote><blockquote><p> frameworks&#x2F;base&#x2F;core&#x2F;java&#x2F;android&#x2F;app&#x2F;SharedPreferencesImpl.java</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SharedPreferencesImpl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> mLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> mLoaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startLoadFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mLoaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"SharedPreferencesImpl-load"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">loadFromDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> defValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">awaitLoadedLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> v <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>mMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> v <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> v <span class="token operator">:</span> defValue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">awaitLoadedLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mLoaded<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                mLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> unused<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>正如你所看到的，开启一个线程异步读取数据，当我们正在读取一个比较大的数据，还没读取完，接着调用 getXXX() 方法。<br>在同步方法内调用了 wait() 方法，会一直等待 getSharedPreferences() 方法开启的线程读取完数据才能继续往下执行，如果读取几 KB 的数据还好，假设读取一个大的文件，势必会造成主线程阻塞。</p></blockquote><p>SP 不能保证类型安全</p><blockquote><p>调用 getXXX() 方法的时候，可能会出现 ClassCastException 异常，因为使用相同的 key 进行操作的时候，putXXX 方法可以使用不同类型的数据覆盖掉相同的 key。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkTypeSafe</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"userAge"</span><span class="token punctuation">;</span>        <span class="token class-name">SharedPreferences</span> sp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"user_info"</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用 Int 类型的数据覆盖相同的 key</span>        sp<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用相同的 key 读取 Sting 类型的数据</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// throw Exception</span>    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> cannot be cast <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SP 加载的数据会一直留在内存中</p><blockquote><p>通过 getSharedPreferences() 方法加载的数据，最后会将数据存储在静态的成员变量中。<br>通过静态的 ArrayMap 缓存每一个 SP 文件，而每个 SP 文件内容通过 Map 缓存键值对数据，这样数据会一直留在内存中，浪费内存。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 调用 getSharedPreferences 方法，最后会调用 getSharedPreferencesCacheLocked 方法</span> <span class="token keyword">public</span> <span class="token class-name">SharedPreferences</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">final</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token function">getSharedPreferencesCacheLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> sp<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 通过静态的 ArrayMap 缓存 SP 加载的数据</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ArrayMap</span><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span><span class="token punctuation">></span></span> sSharedPrefsCache<span class="token punctuation">;</span> <span class="token comment">// 将数据保存在 sSharedPrefsCache 中</span> <span class="token keyword">private</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span></span> <span class="token function">getSharedPreferencesCacheLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">></span></span> packagePrefs <span class="token operator">=</span> sSharedPrefsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>packagePrefs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         packagePrefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sSharedPrefsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>packageName<span class="token punctuation">,</span> packagePrefs<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> packagePrefs<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>    <p>apply() 方法是异步的，可能会发生 ANR</p><blockquote><p>apply() 方法是异步的，本身是不会有任何问题，但是当生命周期处于  handleStopService() 、 handlePauseActivity() 、 handleStopActivity()<br>的时候会一直等待 apply() 方法将数据保存成功，否则会一直等待，从而阻塞主线程造成 ANR，一起来分析一下为什么异步方法还会阻塞主线程，先来看看 apply() 方法的实现。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">MemoryCommitResult</span> mcr <span class="token operator">=</span> <span class="token function">commitToMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Runnable</span> awaitCommit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mcr<span class="token punctuation">.</span>writtenToDiskLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待</span>                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 将 awaitCommit 添加到队列 QueuedWork 中</span>    <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">addFinisher</span><span class="token punctuation">(</span>awaitCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Runnable</span> postWriteRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                awaitCommit<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">removeFinisher</span><span class="token punctuation">(</span>awaitCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 8.0 之前加入到一个单线程的线程池中执行</span>    <span class="token comment">// 8.0 之后加入 HandlerThread 中执行写入任务</span>    <span class="token class-name">SharedPreferencesImpl</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">enqueueDiskWrite</span><span class="token punctuation">(</span>mcr<span class="token punctuation">,</span> postWriteRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>   <ul><li>将一个 awaitCommit 的  Runnable 任务，添加到队列 QueuedWork 中，在 awaitCommit 中会调用 await() 方法等待，<br>在 handleStopService 、 handleStopActivity 等等生命周期会以这个作为判断条件，等待任务执行完毕</li><li>将一个 postWriteRunnable 的  Runnable 写任务，通过 enqueueDiskWrite 方法，将写入任务加入到队列中，而写入任务在一个线程中执行</li></ul><p>注意：在 8.0 之前和 8.0 之后 enqueueDiskWrite() 方法实现逻辑各不相同。</p><blockquote><p>在 8.0 之前调用 enqueueDiskWrite() 方法，将写入任务加入到 单个线程的线程池 中执行，如果 apply() 多次的话，任务将会依次执行，效率很低，android-7.0.0_r34 源码如下所示。<br>通过 Executors.newSingleThreadExecutor() 方法创建了一个 单个线程的线程池，因此任务是串行的，通过 apply() 方法创建的任务，都会添加到这个线程池内。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/SharedPreferencesImpl.java</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueueDiskWrite</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MemoryCommitResult</span> mcr<span class="token punctuation">,</span>                              <span class="token keyword">final</span> <span class="token class-name">Runnable</span> postWriteRunnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">singleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>writeToDiskRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/QueuedWork.java</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">singleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sSingleThreadExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sSingleThreadExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sSingleThreadExecutor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <p>在 8.0 之后将写入任务加入到 LinkedList 链表中，在 HandlerThread 中执行写入任务，android-10.0.0_r14 源码如下所示。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">// android-10.0.0_r14: frameworks/base/core/java/android/app/SharedPreferencesImpl.java</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueueDiskWrite</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MemoryCommitResult</span> mcr<span class="token punctuation">,</span>                                  <span class="token keyword">final</span> <span class="token class-name">Runnable</span> postWriteRunnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span>writeToDiskRunnable<span class="token punctuation">,</span> <span class="token operator">!</span>isFromSyncCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// android-10.0.0_r14: frameworks/base/core/java/android/app/QueuedWork.java</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> sWork <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> work<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shouldDelay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 handlerThread.getLooper() 生成 Handler 对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sWork<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将写入任务加入到 LinkedList 链表中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldDelay <span class="token operator">&amp;&amp;</span> sCanDelay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessageDelayed</span><span class="token punctuation">(</span><span class="token class-name">QueuedWorkHandler</span><span class="token punctuation">.</span>MSG_RUN<span class="token punctuation">,</span> DELAY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token class-name">QueuedWorkHandler</span><span class="token punctuation">.</span>MSG_RUN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <blockquote><p>在 8.0 之后通过调用 handlerThread.getLooper() 方法生成 Handler，任务都会在 HandlerThread 中执行，所有通过 apply() 方法创建的任务，都会添加到 LinkedList 链表中。<br>  当生命周期处于 handleStopService() 、 handlePauseActivity() 、 handleStopActivity() 的时候会调用 QueuedWork.waitToFinish() 会等待写入任务执行完毕，我们以其中  handlePauseActivity() 方法为例。<br>  正如你所看到的在 handlePauseActivity() 方法中，调用了 QueuedWork.waitToFinish() 方法，会等待所有的写入执行完毕，Google 在 8.0 之后对这个方法做了很大的优化，一起来看一下 8.0 之前和 8.0 之后的区别。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/ActivityThread.java</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePauseActivity</span><span class="token punctuation">(</span><span class="token class-name">IBinder</span> token<span class="token punctuation">,</span> <span class="token keyword">boolean</span> finished<span class="token punctuation">,</span> <span class="token keyword">boolean</span> userLeaving<span class="token punctuation">,</span>                                <span class="token keyword">int</span> configChanges<span class="token punctuation">,</span> <span class="token class-name">PendingTransactionActions</span> pendingActions<span class="token punctuation">,</span> <span class="token class-name">String</span> reason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 确保写任务都已经完成</span>    <span class="token class-name">QueuedWork</span><span class="token punctuation">.</span><span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <p>在 8.0 之前 waitToFinish() 方法只做了一件事，会一直等待写入任务执行完毕， android-7.0.0_r34 源码实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-7.0.0_r34: frameworks/base/core/java/android/app/QueuedWork.java</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> sPendingWorkFinishers <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Runnable</span> toFinish<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>toFinish <span class="token operator">=</span> sPendingWorkFinishers<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toFinish<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于调用 `mcr.writtenToDiskLatch.await()` 方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>     <blockquote><p>sPendingWorkFinishers 是 ConcurrentLinkedQueue 实例，apply 方法会将写入任务添加到 sPendingWorkFinishers 队列中，在 单个线程的线程池 中执行写入任务，线程的调度并不由程序来控制，也就是说当生命周期切换的时候，任务不一定处于执行状态<br>  toFinish.run() 方法，相当于调用 mcr.writtenToDiskLatch.await() 方法，会一直等待.<br>  waitToFinish() 方法就做了一件事，会一直等待写入任务执行完毕，其它什么都不做，当有很多写入任务，会依次执行，当文件很大时，效率很低，造成 ANR 就不奇怪了</p></blockquote><p>在 8.0 之后 waitToFinish() 方法做了很大的优化，当生命周期切换的时候，会主动触发任务的执行，而不是一直在等着，我们来看看 android-10.0.0_r14 源码实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// android-10.0.0_r14: frameworks/base/core/java/android/app/QueuedWork.java</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> sFinishers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">waitToFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">processPendingWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主动触发任务的执行</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StrictMode</span><span class="token punctuation">.</span><span class="token function">setThreadPolicy</span><span class="token punctuation">(</span>oldPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 等待任务执行完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Runnable</span> finisher<span class="token punctuation">;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                finisher <span class="token operator">=</span> sFinishers<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 LinkedList 中取出任务</span>            <span class="token punctuation">&#125;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>finisher <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 当 LinkedList 中没有任务时会跳出循环</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>              finisher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于调用 `mcr.writtenToDiskLatch.await()`</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <blockquote><p>在 waitToFinish() 方法中会主动调用 processPendingWork() 方法触发任务的执行，在 HandlerThread 中执行写入任务。<br>  另外还做了一个很重要的优化，当调用 apply() 方法的时候，执行磁盘写入，都是全量写入，在 8.0 之前，调用 N 次 apply() 方法，就会执行 N 次磁盘写入，<br>  在 8.0 之后，apply() 方法调用了多次，只会执行最后一次写入，通过版本号来控制的。</p></blockquote><h3 id="DataStore"><a href="#DataStore" class="headerlink" title="DataStore"></a>DataStore</h3><h4 id="1-DataStore简介"><a href="#1-DataStore简介" class="headerlink" title="1. DataStore简介"></a>1. DataStore简介</h4><p>Preferences DataStore 是JetPack最新提供的简单数据键值对数据存储组件，主要用来替换 SharedPreferences。Preferences DataStore 只支持 Int , Long , Boolean , Float , String 键值对数据，<br>适合存储简单、小型的数据，并且不支持局部更新，如果修改了其中一个值，整个文件内容将会被重新序列化，<br>可以运行 AndroidX-Jetpack-Practice&#x2F;DataStoreSimple 体验一下，如果需要局部更新，建议使用 Room。<br>另外 Jetpack DataStore 提供了 Proto DataStore 方式，用于存储类的对象（typed objects ），通过 protocol buffers 将对象序列化存储在本地</p><p>Preferences DataStore的优点</p><ul><li>DataStore 是基于 Flow 实现的，所以保证了在主线程的安全性</li><li>以事务方式处理更新数据，事务有四大特性（原子性、一致性、 隔离性、持久性）</li><li>没有 apply() 和 commit() 等等数据持久的方法</li><li>自动完成 SharedPreferences 迁移到 DataStore，保证数据一致性，不会造成数据损坏</li><li>可以监听到操作成功或者失败结果</li></ul><h4 id="2-DataStore基本用法"><a href="#2-DataStore基本用法" class="headerlink" title="2. DataStore基本用法"></a>2. DataStore基本用法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 项目module下的build.gradle添加依赖</span>dependencies <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// Preferences DataStore</span>    implementation <span class="token string">"androidx.datastore:datastore-preferences:1.0.0-alpha01"</span>    <span class="token comment">// Proto DataStore</span>    implementation <span class="token string">"androidx.datastore:datastore-core:1.0.0-alpha01"</span>       implementation 'com<span class="token punctuation">.</span>tencent<span class="token operator">:</span>mmkv<span class="token operator">:</span><span class="token number">1.0</span><span class="token number">.23</span>'<span class="token punctuation">&#125;</span><span class="token comment">// 读取数据</span><span class="token comment">// 这里和我们之前使用 SharedPreferences 的有点不一样，在 Preferences DataStore 中 Key 是一个 Preferences.Key&lt;T> 类型，只支持 Int , Long , Boolean , Float , String</span>fun <span class="token function">readFromDataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          btn_data_store_read<span class="token operator">?</span><span class="token punctuation">.</span>setOnClickListener <span class="token punctuation">&#123;</span>              val startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 获取datastore实例</span>              val dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span> <span class="token operator">=</span>                  <span class="token keyword">this</span><span class="token annotation punctuation">@MainActivity.createDataStore</span><span class="token punctuation">(</span>name <span class="token operator">=</span> dataStoreName<span class="token punctuation">)</span>              <span class="token comment">//     </span>              val nameKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span>              <span class="token comment">// 基于Flow实现</span>              val dataFlow<span class="token operator">:</span> <span class="token class-name">Flow</span><span class="token operator">&lt;</span><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Preferences<span class="token punctuation">.</span>Key</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token class-name">Any</span><span class="token operator">>></span> <span class="token operator">=</span> dataStore<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> is <span class="token class-name">IOException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token function">emptyPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> is <span class="token class-name">Throwable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token keyword">throw</span> <span class="token keyword">this</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> preferences <span class="token operator">-></span>                 <span class="token comment">// 获取名为userName 的建值</span>                 <span class="token comment">// preferences[nameKey] ?: ""</span>                  preferences<span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>              <span class="token comment">// 启动协程</span>              <span class="token class-name">GlobalScope</span><span class="token punctuation">.</span>launch <span class="token punctuation">&#123;</span>                  dataFlow<span class="token punctuation">.</span>collect <span class="token punctuation">&#123;</span> pairs <span class="token operator">-></span>                      val endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"从data store读取，cost time = $&#123;endTime - startTime&#125; ms"</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> <span class="token punctuation">(</span>pair in pairs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">// 打印获取到的键值对</span>                          <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"key=$&#123;pair.key&#125;,value=$&#123;pair.value&#125;"</span><span class="token punctuation">)</span>                      <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写入数据</span>fun <span class="token function">writeToDataStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        btn_data_store_write<span class="token operator">?</span><span class="token punctuation">.</span>setOnClickListener <span class="token punctuation">&#123;</span>           <span class="token comment">// 获取datastore实例</span>            val dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span> <span class="token operator">=</span>                <span class="token keyword">this</span><span class="token annotation punctuation">@MainActivity.createDataStore</span><span class="token punctuation">(</span>name <span class="token operator">=</span> dataStoreName<span class="token punctuation">)</span>             <span class="token comment">// 启动协程     </span>            <span class="token class-name">GlobalScope</span><span class="token punctuation">.</span>launch <span class="token punctuation">&#123;</span>                <span class="token function">saveData</span><span class="token punctuation">(</span>dataStore<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    suspend fun <span class="token function">saveData</span><span class="token punctuation">(</span>dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"save data..."</span><span class="token punctuation">)</span>        val nameKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userName"</span><span class="token punctuation">)</span>        val ageKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userAge"</span><span class="token punctuation">)</span>        val introductionKey <span class="token operator">=</span> preferencesKey<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"userIntroduction"</span><span class="token punctuation">)</span>        <span class="token comment">// 更新键值对</span>        dataStore<span class="token punctuation">.</span>edit <span class="token punctuation">&#123;</span> settings <span class="token operator">-></span>            settings<span class="token punctuation">[</span>nameKey<span class="token punctuation">]</span> <span class="token operator">=</span> userName            settings<span class="token punctuation">[</span>ageKey<span class="token punctuation">]</span> <span class="token operator">=</span> userAge            settings<span class="token punctuation">[</span>introductionKey<span class="token punctuation">]</span> <span class="token operator">=</span> userIntroduction            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token string">"save data done"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h4 id="3-从SharedPreferences迁移到Preferences-DataStore"><a href="#3-从SharedPreferences迁移到Preferences-DataStore" class="headerlink" title="3. 从SharedPreferences迁移到Preferences DataStore"></a>3. 从SharedPreferences迁移到Preferences DataStore</h4><p>在使用DataStore之前，保证完成迁移.<br>当 DataStore 对象构建完了之后，需要执行一次读取或者写入操作，即可完成 SharedPreferences 迁移到  DataStore，当迁移成功之后，会自动删除 SharedPreferences 使用的文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 迁移到Preferences DataStore</span>fun <span class="token function">migration</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    val dataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Preferences</span><span class="token punctuation">></span></span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createDataStore</span><span class="token punctuation">(</span>        name <span class="token operator">=</span> <span class="token string">"settings"</span><span class="token punctuation">,</span>        migrations <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token class-name">SharedPreferencesMigration</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string">"settings_preferences"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 迁移到Proto DataStore</span> fun <span class="token function">migration</span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token class-name">Context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     val settingsDataStore<span class="token operator">:</span> <span class="token class-name">DataStore</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Settings</span><span class="token punctuation">></span></span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createDataStore</span><span class="token punctuation">(</span>         produceFile <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token class-name">File</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>filesDir<span class="token punctuation">,</span> <span class="token string">"settings.preferences_pb"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>         serializer <span class="token operator">=</span> <span class="token class-name">SettingsSerializer</span><span class="token punctuation">,</span>         migrations <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>             <span class="token class-name">SharedPreferencesMigration</span><span class="token punctuation">(</span>                 context<span class="token punctuation">,</span>                 <span class="token string">"settings_preferences"</span>             <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> sharedPrefs<span class="token operator">:</span> <span class="token class-name">SharedPreferencesView</span><span class="token punctuation">,</span> currentData<span class="token operator">:</span> <span class="token class-name">UserPreferences</span> <span class="token operator">-></span>                 <span class="token comment">// Map your sharedPrefs to your type here</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">)</span>     <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h4 id="3-DataStore工作流程"><a href="#3-DataStore工作流程" class="headerlink" title="3. DataStore工作流程"></a>3. DataStore工作流程</h4><img src="/blogs/images/DataStore%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png" class="[图三]" title="[图三]"> <h3 id="MMKV"><a href="#MMKV" class="headerlink" title="MMKV"></a>MMKV</h3><h5 id="1-MMKV简介"><a href="#1-MMKV简介" class="headerlink" title="1. MMKV简介"></a>1. MMKV简介</h5><p>MMKV 是腾讯开源的一款基于 mmap 内存映射的 key-value 组件，底层序列化&#x2F;反序列化使用 protobuf 实现，性能高，稳定性强，<br>从 2015 年中至今在微信上使用，其性能和稳定性经过了时间的验证。<a href="https://github.com/Tencent/MMKV">GitHub地址</a></p><p>MMKV 优点</p><ul><li>数据加密。 在 Android 环境里，数据加密是非常必须的，SP实际上是把键值对放到本地文件中进行存储。如果要保证数据安全需要自己加密，MMKV 使用了 AES CFB-128 算法来加密&#x2F;解密。</li><li>多进程共享。系统自带的 SharedPreferences 对多进程的支持不好。现有基于 ContentProvider 封装的实现，虽然多进程是支持了，但是性能低下，经常导致 ANR。考虑到 mmap 共享内存本质上是多进程共享的，MMKV 在这个基础上，深入挖掘了 Android 系统的能力，提供了可能是业界最高效的多进程数据共享组件。</li><li>匿名内存。 在多进程共享的基础上，考虑到某些敏感数据(例如密码)需要进程间共享，但是不方便落地存储到文件上，直接用 mmap 不合适。而Android 系统提供了 Ashmem 匿名共享内存的能力，它在进程退出后就会消失，不会落地到文件上，非常适合这个场景。MMKV 基于此也提供了 Ashmem(匿名共享内存) MMKV 的功能。</li><li>效率更高。MMKV 使用protobuf进行序列化和反序列化，比起SP的xml存放方式，更加高效。</li><li>支持从 SP迁移，如果你之前项目里面都是使用SP，现在想改为使用MMKV，只需几行代码即可将之前的SP实现迁移到MMKV。</li></ul><p>支持的数据类型</p><ul><li><p>支持以下 Java 语言基础类型：</p><blockquote><p>boolean、int、long、float、double、byte[]</p></blockquote></li><li><p>支持以下 Java 类和容器：</p><blockquote><p>String、Set&lt; String &gt;<br>任何实现了Parcelable的类型</p></blockquote></li></ul><h5 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token comment">// 项目module下的build.gradle添加依赖</span> dependencies <span class="token punctuation">&#123;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// mmkv</span>    implementation 'com<span class="token punctuation">.</span>tencent<span class="token operator">:</span>mmkv<span class="token operator">:</span><span class="token number">1.0</span><span class="token number">.23</span>' <span class="token punctuation">&#125;</span>  <span class="token comment">// 在Application中初始化</span> MMKV<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MMKV</span> kv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存储数据很简单了，只需要调用如下一行代码即可，不用再如prefences一样调用apply或commit：</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取存储的信息</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bool: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeBool</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeInt</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeLong</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"float: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeFloat</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"double: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeDouble</span><span class="token punctuation">(</span><span class="token string">"double"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"Hello from mmkv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"string: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token char">'k'</span><span class="token punctuation">,</span> <span class="token char">'v'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    kv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bytes: "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">decodeBytes</span><span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 查询与删除</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">MMKV</span> kv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">MMKV</span> kv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">defaultMMKV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       kv<span class="token punctuation">.</span><span class="token function">removeValueForKey</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bool: "</span> <span class="token operator">+</span> kv<span class="token punctuation">.</span><span class="token function">decodeBool</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       kv<span class="token punctuation">.</span><span class="token function">removeValuesForKeys</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"allKeys: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span><span class="token function">allKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       kv<span class="token punctuation">.</span><span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> hasBool <span class="token operator">=</span> kv<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">// 业务区分，分别存储</span>   <span class="token class-name">MMKV</span> mmkv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"MyID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//支持多进程 </span>   <span class="token class-name">MMKV</span> mmkv <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"InterProcessKV"</span><span class="token punctuation">,</span> MMKV<span class="token punctuation">.</span>MULTI_PROCESS_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>   mmkv<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <h4 id="3-从SharedPreferences迁移到MMKV"><a href="#3-从SharedPreferences迁移到MMKV" class="headerlink" title="3. 从SharedPreferences迁移到MMKV"></a>3. 从SharedPreferences迁移到MMKV</h4> <pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">testImportSharedPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//SharedPreferences preferences = getSharedPreferences("myData", MODE_PRIVATE);</span>    <span class="token class-name">MMKV</span> preferences <span class="token operator">=</span> MMKV<span class="token punctuation">.</span><span class="token function">mmkvWithID</span><span class="token punctuation">(</span><span class="token string">"myData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 迁移旧数据</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">SharedPreferences</span> old_man <span class="token operator">=</span> <span class="token function">getSharedPreferences</span><span class="token punctuation">(</span><span class="token string">"myData"</span><span class="token punctuation">,</span> MODE_PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        preferences<span class="token punctuation">.</span><span class="token function">importFromSharedPreferences</span><span class="token punctuation">(</span>old_man<span class="token punctuation">)</span><span class="token punctuation">;</span>        old_man<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 跟以前用法一样</span>    <span class="token class-name">SharedPreferences<span class="token punctuation">.</span>Editor</span> editor <span class="token operator">=</span> preferences<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putBoolean</span><span class="token punctuation">(</span><span class="token string">"bool"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token string">"long"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putFloat</span><span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.14f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token string">"hello, imported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"W"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    editor<span class="token punctuation">.</span><span class="token function">putStringSet</span><span class="token punctuation">(</span><span class="token string">"string-set"</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 无需调用 commit()</span>    <span class="token comment">//editor.commit();</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> ]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 数据存储 </tag>
            
            <tag> SharedPreferences </tag>
            
            <tag> DataStore </tag>
            
            <tag> MMKV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI动态链接库so逆向反编译学习技巧</title>
      <link href="/blogs/2020/09/18/jni-dong-tai-lian-jie-ku-so-ni-xiang-fan-bian-yi-xue-xi-ji-qiao/"/>
      <url>/blogs/2020/09/18/jni-dong-tai-lian-jie-ku-so-ni-xiang-fan-bian-yi-xue-xi-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相信大多数Android开发者，在日常工作中多多少少都会接触到三方库的集成，其中包括jar包，so库，如果开发者希望在使用库方法的同时，也能够学习到其中的方法实现，那么就需求对这些库进行反编译，对于jar包而言，可以使用GD—GUI开源工具进行查看class文件。而对于so库来说，因为一般是通过C,C++语言实现，经过编译生成的动态链接库二进制文件，反编译难度很大，常规方式成本很高，今天主要介绍如何通过三方软件来实现对so库的反编译。</p><p>so编译：<img src="/blogs/images/so%E5%BA%93%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" class="[图一]" title="[图一]"> </p><h3 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h3><p>这里推荐两款so反编译工具：</p><ul><li>1、Hopper(收费，提供试用期)<blockquote><p><a href="https://www.hopperapp.com/">官方地址</a></p></blockquote></li></ul><blockquote><p>Hopper 是一种适用于 OS X 和 Linux 的逆向工程工具，可以用于反汇编、反编译和调试 32位&#x2F;64位英特尔处理器的 Mac、Linux、Windows 和 iOS 可执行程序！”用更简洁的话来说，这代表我们可以用一个编译二进制（你的 iOS app，UIKit 二进制等等）生成你之前看到的伪代码！</p></blockquote><ul><li>2、IDA Pro(收费，提供试用期)<blockquote><p><a href="https://www.hex-rays.com/products/ida/">官方地址</a></p></blockquote></li></ul><blockquote><p>IDA Pro全称是交互式反汇编器专业版（Interactive Disassembler Professional），简称IDA，它是一种典型的递归下降反汇编器。IDA并非免费软件，但Hex-Rays公司提供了一个功能有限的免费版本。IDA是Windows，Linux或Mac OS X托管的多处理器反汇编程序 和调试程序，它提供了许多功能，是一款很强大的静态反编译工具。支持很多插件和python，利用一些插件可以提供很多方便的功能大大减少工作量，在CTF中，逆向和pwn都少不了它，更多强大的功能等待童鞋们自己去学习挖掘，三言两语讲不完。它支持数十种CPU指令集其中包括Intel x86，x64，MIPS，PowerPC，ARM，Z80，68000，c8051等等</p></blockquote><p>这里我们选择IDA Pro为例进行进行分析，理由就是强大，成熟，好用。单由于mac os 10.15.x系统限制，可能装不上或者有其他问题，这里提供一种解决方案：<a href="https://blog.csdn.net/u010953692/article/details/94907317">IDA Pro 7.0 macOS 安装</a></p><h3 id="IDA-Pro工具基本使用技巧"><a href="#IDA-Pro工具基本使用技巧" class="headerlink" title="IDA Pro工具基本使用技巧"></a>IDA Pro工具基本使用技巧</h3><ul><li>1、IDA Pro 加载so库（dex文件）<blockquote><p>目前做的比较成熟，7.0版本已经支持android dex文件分析。首先打开IDA Pro启动器（可选择32位，64位）<br>启动界面，提供New(新建)，GO(运行)，Previous（上一个）三种方式，直接选择GO打开<br>接下来，直接拖拽so库到窗口面板中，选择相应匹配的ABI架构，后软件会自动进行分析直到完成，会出现5个窗口视图</p></blockquote></li></ul><p>IDA Pro 加载so库：<img src="/blogs/images/IDA_Pro_Open.png" class="[图二]" title="[图二]"></p><p>IDA Pro 分析完成：<img src="/blogs/images/IDA_Pro_analysis.png" class="[图三]" title="[图三]"></p><ul><li><p>2、IDA Pro 常用视图介绍</p><blockquote><ul><li>IDA View-A是反汇编窗口</li><li>HexView-A是十六进制格式显示的窗口</li><li>Structures是结构</li><li>Enums是枚举</li><li>Imports是导入表（程序中调用到的外面的函数）</li><li>Exports是导出表（共外界调用的函数）</li><li>Functions是函数表（这个程序中的函数）</li></ul></blockquote></li><li><p>3、如何分析函数</p><blockquote><ul><li>在Functions 窗口，任意选中一列函数，按Command+F 搜索模式，输入函数名进行索引，双击到达IDA View-A视图，光标会指向内存地址</li><li>在菜单栏，选择View – Open subviews – Generate pseduocode 生成函数对应伪代码 （快捷键F5,mac os可能因为某些原因失效）</li></ul></blockquote></li></ul><p>IDA Pro 生成函数伪代码：<img src="/blogs/images/IDA_Pro_pseduocode.png" class="[图四]" title="[图四]"></p><p>IDA Pro 函数伪代码：<img src="/blogs/images/IDA_Pro_pseduocode_2.png" class="[图五]" title="[图五]"></p><ul><li>4、查看字符串常量<blockquote><ul><li>在菜单栏，选择View – Open subviews – Strings</li></ul></blockquote></li></ul><p>至此我们基本上可以看到原本java代码声明的native关键字的本地方法在so的实现，其他IDA Pro相关知识技巧，可参考：<br><a href="https://juejin.im/post/6844903550460362766">IDA Pro 逆向速参</a></p>]]></content>
      
      
      <categories>
          
          <category> 逆向安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JNI </tag>
            
            <tag> so反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android轻量级水印实现</title>
      <link href="/blogs/2019/07/12/android-qing-liang-ji-shui-yin-shi-xian/"/>
      <url>/blogs/2019/07/12/android-qing-liang-ji-shui-yin-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>水印作为产品版权保护常见于图片，文本之中，水印根据可见性类别又分为可见水印和盲水印(也称为数字水印)，我们通常见到的是可见水印，即在原始图片上加上标识的logo文字。<br>而盲水印以下简称数字水印是通过算法将信息嵌入到随机选择的图像点中最不重要的像素位 (LSB:least significant bits)上，这可保证嵌入的水印是不可见的。本文主要讲解<br>可见水印在android上的实现。</p><h3 id="android可见水印实现"><a href="#android可见水印实现" class="headerlink" title="android可见水印实现"></a>android可见水印实现</h3><p>通常可见水印是在原图上添加logo文字，android中通过操作view的画布Canvas 来添加文字或者图案。经研究发现android系统在6.0时View类提供了设置前景色的方法，而通常我们<br>不会设置View的前景色，因此用该方法不会与View自身的视图设置冲突，并且不影响用户视图操作。另一方面，我们通常见到的水印是整个屏幕可见的，因此只需要对视图的根布局设置前景色即可。<br>因此我们设置的目标View是DecorView的子View,通过</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">View</span> view <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果图：<img src="/blogs/images/water_maker_sample.png" class="[图一]" title="[图一]"> </p><ul><li>一 自定义水印Drawable</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaterMarker</span> <span class="token keyword">extends</span> <span class="token class-name">Drawable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> screenHeight<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> screenWidth<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Paint</span> paint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> markText<span class="token punctuation">;</span> <span class="token comment">//水印文字</span>    <span class="token keyword">private</span> <span class="token class-name">RectF</span> rectF<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> textColor <span class="token operator">=</span> <span class="token number">0x0D000000</span><span class="token punctuation">;</span> <span class="token comment">//95%透明度，默认水印文字颜色</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> degree <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token comment">//旋转角度，默认 -30°</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> fontSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WaterMarker</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">String</span> markText<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        screenHeight <span class="token operator">=</span> <span class="token class-name">DeviceUtils</span><span class="token punctuation">.</span><span class="token function">getScreenHeight</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        screenWidth <span class="token operator">=</span> <span class="token class-name">DeviceUtils</span><span class="token punctuation">.</span><span class="token function">getScreenWidth</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        fontSize <span class="token operator">=</span> <span class="token class-name">TypedValue</span><span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span><span class="token class-name">TypedValue</span><span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>markText <span class="token operator">=</span> markText<span class="token punctuation">;</span>        paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setAntiAlias</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span>FILL_AND_STROKE<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setTextAlign</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Align</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置水印文字颜色     * @param color     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token keyword">int</span> color<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textColor <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 水印文字大小 px     * @param fontSize     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token keyword">float</span> fontSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fontSize <span class="token operator">=</span> fontSize<span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>fontSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置旋转角度，正数顺时针，负数逆时针     * @param degree     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRotateDegree</span><span class="token punctuation">(</span><span class="token keyword">int</span> degree<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>degree <span class="token operator">=</span> degree<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>        rectF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RectF</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        canvas<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>rectF<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>        paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>textColor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Paint<span class="token punctuation">.</span>FontMetrics</span> fontMetrics <span class="token operator">=</span> paint<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> distance <span class="token operator">=</span> <span class="token punctuation">(</span>fontMetrics<span class="token punctuation">.</span>bottom <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span>bottom<span class="token punctuation">;</span>        <span class="token keyword">int</span> textHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fontMetrics<span class="token punctuation">.</span>bottom <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalColumns <span class="token operator">=</span> screenHeight <span class="token operator">/</span> <span class="token punctuation">(</span>textHeight <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>totalColumns <span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>markText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">float</span> baseline <span class="token operator">=</span> screenHeight <span class="token operator">*</span><span class="token number">1.0F</span> <span class="token operator">/</span> totalColumns <span class="token operator">+</span> distance<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalColumns<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>markText<span class="token punctuation">,</span> screenWidth <span class="token operator">*</span><span class="token number">1.0F</span> <span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">,</span>baseline <span class="token operator">*</span> i <span class="token operator">+</span> textHeight<span class="token punctuation">,</span>paint<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAlpha</span><span class="token punctuation">(</span><span class="token keyword">int</span> alpha<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColorFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ColorFilter</span> colorFilter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOpacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">PixelFormat</span><span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二设置水印</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaterMarkerUtil</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequiresApi</span><span class="token punctuation">(</span>api <span class="token operator">=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> activity<span class="token punctuation">.</span><span class="token function">isFinishing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">View</span> view <span class="token operator">=</span> activity<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span></span>R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        view<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                view<span class="token punctuation">.</span><span class="token function">setForeground</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WaterMarker</span><span class="token punctuation">(</span>activity<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generateMarkText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMdd"</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">"测试用户  "</span> <span class="token operator">+</span><span class="token string">"张三"</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> time<span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"          "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token class-name">Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>M</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">WaterMarkerUtil</span><span class="token punctuation">.</span><span class="token function">addMarker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">WaterMarkerUtil</span><span class="token punctuation">.</span><span class="token function">generateMarkText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于数字水印"><a href="#关于数字水印" class="headerlink" title="关于数字水印"></a>关于数字水印</h3><p>添加印过程：<img src="/blogs/images/digital_watermarking1.jpg" class="[图一]" title="[图一]"> </p><p>提取水印过程：<img src="/blogs/images/digital_watermarking2.jpg" class="[图二]" title="[图二]"></p><ul><li>具体实现参考：<a href="https://www.cnblogs.com/zkwarrior/p/5980191.html">阿里根据截图查到泄露者,用的什么黑科技？(数字盲水印)</a></li><li>参考        <a href="https://www.jianshu.com/p/77c2e59585cd">Android 实现图片水印与隐形数字水印</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 水印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android埋点方案实现与总结</title>
      <link href="/blogs/2019/07/12/android-mai-dian-fang-an-yu-shi-xian-zong-jie/"/>
      <url>/blogs/2019/07/12/android-mai-dian-fang-an-yu-shi-xian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一 前言"></a>一 前言</h3><p>目前统计打点已经是一个产品常见的需求，特别是商业性的APP和金融类的APP都会对用户的行为进行采集，基于PV,UV，事件转化率等角度分进行分析，从而进行千人千面和业务定制化与个性化推荐，所以在APP中集成大数据的收集就显得很重要。</p><h3 id="二-现阶段埋点方案现状"><a href="#二-现阶段埋点方案现状" class="headerlink" title="二 现阶段埋点方案现状"></a>二 现阶段埋点方案现状</h3><p>当前数据采集方案按采集方式的实现形式主要分为：手动埋点，可视化埋点，无痕埋点。</p><ul><li><p>手动埋点： 传统的埋点方式，需要开发人员编写大量的埋点代码(点击事件里绑定)，调用SDK API进行采集和上报，如早期的友盟统计和百度统计。</p><ul><li>优点： 可以采集更多的业务数据，更加直观。</li><li>缺点： 开发量大，后期维护成本高，业务入侵性强</li></ul></li><li><p>可视化埋点： 可视化交互，第一步：APP接入可视化埋点SDK,与服务器通信，对需要统计的页面截屏进行元素分析，对需要统计的事件进行长按配置信息。第二步：SDK接受到服务器的配置下发，对用户点击事件进行分析符合规则的事件进行采集。<br>如国外的Mixpanel，国内的 TalkingData、诸葛IO ，Sensors Analytics ，后期百度和腾讯也相继推出可视化埋点SDK</p><ul><li>优点： 使用简单，不依赖大量的埋点代码，通过配置下发进行采集</li><li>缺点： 依赖视图结构，页面改版视图变化后无法采集已有配置的埋点数据，需要重新配置</li></ul><p>可视化埋点流程：<img src="/blogs/images/visible_statistics1.png" class="[图一]" title="[图一]"><br>可视化埋点流程：<img src="/blogs/images/visible_statistics2.jpg" class="[图二]" title="[图二]"></p></li><li><p>无痕埋点：通过Aop的方式hook App的点击事件，采集ViewPath，上报服务器，生成ViewPath–Event映射配置文件，下发到客户端，进行数据采集，基本上只需很少的代码开发，无业务入侵。<br>如：GrowingIO</p><ul><li>优点：能够全面采集事件(PV，UV)，无业务入侵</li><li>缺点：对于业务数据需求较高的场景不适用</li></ul></li></ul><h3 id="无痕埋点方案实现"><a href="#无痕埋点方案实现" class="headerlink" title="无痕埋点方案实现"></a>无痕埋点方案实现</h3><p>结合公司业务发展，目前采用无痕埋点方式与业务数据手动绑定结合实现埋点数据的采集。</p><ul><li><p>无痕埋实现的原理：</p><p>android原生Activity，Fragment页面有相应的生命周期，曝光会走onResume()方法，</p><p>android原生控件点击事件大多通过系统的View.OnClickListener等的回调方法响应。</p><p>基于这些特性可以想办法Hook这些系统API方法，从而达到动态代理，在代理方法里面实现业务埋点统计功能</p><p>Aop框架：AspectJ,Javassist,ASM,本文以ASM5.0实现</p></li><li><p>无痕埋点SDK Hook工作流程：<br>考虑目前android应用基本上通过AndroidStudio Gradle构建和打包，我们通过自定义Gradle插件，实现在编译期间对class文件进行修改，对所有view点击和触摸事件的回调函数进行hook。</p><pre class="line-numbers language-none"><code class="language-none">eg：onClick(Landroid&#x2F;view&#x2F;View;)VonClick(Landroid&#x2F;content&#x2F;DialogInterface;I)VonItemClick(Landroid&#x2F;widget&#x2F;AdapterView;Landroid&#x2F;view&#x2F;View;IJ)VonItemSelected(Landroid&#x2F;widget&#x2F;AdapterView;Landroid&#x2F;view&#x2F;View;IJ)VonGroupClick(Landroid&#x2F;widget&#x2F;ExpandableListView;Landroid&#x2F;view&#x2F;View;IJ)ZonChildClick(Landroid&#x2F;widget&#x2F;ExpandableListView;Landroid&#x2F;view&#x2F;View;IIJ)ZonRatingChanged(Landroid&#x2F;widget&#x2F;RatingBar;FZ)VonStopTrackingTouch(Landroid&#x2F;widget&#x2F;SeekBar;)VonCheckedChanged(Landroid&#x2F;widget&#x2F;CompoundButton;Z)VonCheckedChanged(Landroid&#x2F;widget&#x2F;RadioGroup;I)V...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从而植入代理方法，进行拦截。</p><p>android 打包工作流程：<img src="/blogs/images/android_compile1.png" class="[图一]" title="[图一]"><br>android 打包工作流程：<img src="/blogs/images/android_compile2.png" class="[图二]" title="[图二]"></p></li></ul><ul><li>编译产物：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">,</span>     <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span>DialogInterface<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnItemClickListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnItemSelectedListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnRatingBarChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnSeekBarChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnCheckedChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span>RadioGroup<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">,</span>     <span class="token class-name">OnGroupClickListener</span><span class="token punctuation">,</span> <span class="token class-name">OnChildClickListener</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 植入代理方法</span>      <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onActivityResume</span><span class="token punctuation">(</span><span class="token class-name">BaseActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 植入代理方法</span>        <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">DialogInterface</span> var1<span class="token punctuation">,</span> <span class="token keyword">int</span> var2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 植入代理方法</span>        <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token class-name">AdapterView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> var1<span class="token punctuation">,</span> <span class="token class-name">View</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var3<span class="token punctuation">,</span> <span class="token keyword">long</span> var4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 植入代理方法</span>        <span class="token class-name">PluginAgent</span><span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var3<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Github: <a href="https://github.com/AllennZhang/AndroidAutoStatistics.git">android字节码插桩与无痕埋点的实现</a></p></li><li><p>无痕埋点SDK 数据采集工作流程：<br>基于第一步字节码插桩会植入我们的代理方法，在代理方法中我们通过当前事件的View生成ViewPath,组织埋点格式的数据，进行本地存储，在合适时机下进行上报。<br>早期我们采集的数据基本基于PV,UV的统计维度进行采集，后期我们进行了扩展满足对业务数据的采集。这里为采集业务数据，我们需要在项目开发阶段，实现业务数据预埋，<br>即View和业务数据绑定，通过view.setTag(id,tag)即可实现。采集的时候通过view.getTag(id) 获取。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据预埋</span><span class="token class-name">DataPairs</span> pairs1 <span class="token operator">=</span> <span class="token class-name">DataPairs</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pairs1<span class="token punctuation">.</span><span class="token function">eventName</span><span class="token punctuation">(</span><span class="token string">"广告跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pairs1<span class="token punctuation">.</span><span class="token function">eventId</span><span class="token punctuation">(</span><span class="token class-name">NewStatisticsCode</span><span class="token punctuation">.</span>跳过<span class="token punctuation">)</span><span class="token punctuation">;</span>pairs1<span class="token punctuation">.</span><span class="token function">eventType</span><span class="token punctuation">(</span><span class="token class-name">StatisticsLogger</span><span class="token punctuation">.</span>ELEMENT_CLICK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TraceCarrier</span><span class="token punctuation">.</span><span class="token function">bindDataPairs</span><span class="token punctuation">(</span>skipBtn<span class="token punctuation">,</span>pairs1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  数据采集</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Object</span> target <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>EVENT_ATTRS_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Object</span> viewTag <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> viewPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> page <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> redpilId <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//redpil埋点id</span>       <span class="token class-name">String</span> eventName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//redpil埋点名称</span>       <span class="token class-name">String</span> extendFileds <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">//redpil埋点扩展字段</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">DataPairs</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">DataPairs</span> dataPairs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataPairs</span><span class="token punctuation">)</span> target<span class="token punctuation">;</span>           <span class="token class-name">TraceService</span><span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>dataPairs<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 至此，目前通过手动埋点，可视化埋点，无痕埋点的方式都能实现埋点统计和数据采集，但是针对不同的业务，需要采取合理方式，三种方案是互补相辅相成的。<br> 基于埋点方式采集的用户行为进行大数据分析，可以进行千人千面和业务定制化与个性化推荐，带来期望的商业价值。<br> 更多关于无痕埋点方案的介绍，后续会持续完善。这里推荐两篇不错的博文，作为参考。</p><ul><li><a href="https://www.jianshu.com/p/7a59e9384bef">得到Android团队无埋点方案</a></li><li><a href="https://www.jianshu.com/p/8459a75ce5ca">网易HubbleData之Android无埋点实践</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 埋点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 埋点 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
